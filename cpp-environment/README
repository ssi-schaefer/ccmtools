CCM Tools : C++ environment implementation README

0. Contents
===========

1. Introduction
2. Installation
3. Environment API
3.1 Debugging
3.2 Pointer wrappers
3.3 Base classes and exceptions
4. Further information

1. Introduction
===============

This package contains source code that implements the component environment for
CCM Tools C++ components. This library, or some equivalent implementation, needs
to be built and installed before installing and running the C++ component
generators from the CCM Tools.

This file presents some useful information about the libraries contained in this
source tree, including instructions for how to install and uninstall the library
(section 2), information on the environment API (section 3), and information on
how to get further information about this package, the CCM Tools, and CORBA
(section 4). The remainder of this section briefly describes the CCM Tools and
explains why this package exists.

The CCM Tools are a set of libraries and generators to aid developers in
creating and testing CORBA components. Generators for this type of code are
helpful because CORBA components are (a) difficult to implement by hand and (b)
generally quite similar to a generic code template. That is, all components
generally have constructors and destructors, methods that wrap their underlying
facet methods, marshallers and demarshallers for method arguments, and so forth.

This common code template is sometimes referred to as ``boilerplate'' code ;
this boilerplate contains what we refer to as ``component logic'': The
boilerplate is necessary for each CORBA component, but it is also more or less
the same for each CORBA component. By providing a simple and flexible way of
generating boilerplate code for a wide variety of possible component
configurations, the CCM Tools provide a way to concentrate development efforts
on the ``business logic'' ; that is, on implementing the actual component
functionality as seen from the end user's point of view.

To provide generated components, however, the CCM Tools must be able to rely on
some assumptions about the environment in which the components will run. This
package, then, contains an implentation of the environment that generated C++
components expect to find. If you are curious about the structure of this
environment, or the information contained in this library implementation, please
see section 3 (``Environment API'').

2. Installation
===============

This package requires the snappy automated build tool, Confix, for building,
installation, and uninstallation. Confix is available from its project web site:
http://confix.sf.net/. Please use the latest available version ; Confix and the
CCM Tools actually evolve together, so often the latest CCM Tools will require
the latest Confix.

To install this package, make sure you have properly configured your Confix by
defining your particular needs in the ~/.confix file (read the Confix
documentation for details). Once you have set this up, simply use the Confix
command line interface to build and install the library. For example, you can
build, install, and clean up the source tree by doing the following:

  $ confix.py --bootstrap --configure --make --targets="all install clean"

To uninstall and remove unneeded Makefiles, you can simply provide the
appropriate build targets to Confix:

  $ confix.py --make --targets="uninstall distclean"

This should provide enough control over building, installing, and uninstalling
your CCM Tools C++ environment libraries. If you have suggestions or questions,
please contact the CCM Tools developers ; see section 3 for information on how
to do this.

3. Environment API
==================

The C++ components generated by the CCM Tools require a fairly specific, yet
simple, environment to run successfully. Generated component code relies on some
environment abstractions to allow for increased security over things like
argument marshaling and demarshaling, and to ensure a common base for all
component code. As described in the introduction, the code in this package
implements such an environment library.

If you're interested in hacking on the CCM Tools or this environment library, we
recommend that you get in touch with the current developers to find out the
state of current development efforts, and what people want done with the CCM
Tools. See the next section for how to contact the developers.

The rest of this section describes the library API. This is a fairly informal,
global view of the API and should only be used as a general guide. We really
ought to write something more formal for the actual API, but nobody to date has
taken that task on. (Hint, hint ...)

3.1 Debugging
-------------

To aid in testing and debugging both generated and developed code, components
created by the CCM Tools rely on a set of debugging macros for easy,
cross-environment debugging output.

Commonly used functionality:

- CCM_Utils::DEBUGNL ( string ) - Prints the given string to a predefined file
  descriptor (usually stderr).

3.2 Pointer wrappers
--------------------

Memory ownership is one of the most complex areas of CORBA and CORBA components.
To aid in deciphering ownership of pointers and their associated memory
allocations, CCM Tools components rely on a simple pointer wrapper called a
``smart pointer''. Smart pointers are represented in the CCM Tools as a template
class: CCM_Utils::SmartPtr<T>.

Commonly used functionality:

- CCM_Utils::SmartPtr<T> - A class that provides a ``smart pointer'' to an
  object of type T. The smart pointer should be used in the same way as a
  standard C pointer, but it can be passed by value and by reference without
  concern about memory ownership issues. (?)

- CCM_Utils::SmartPtr<T>::ptr ( ) - Provides a C-style pointer to the referent
  of the given smart pointer. This is needed to, for example, access a method or
  variable of the referent object.

3.3 Base classes and exceptions
-------------------------------

Commonly used functionality:

- LocalComponents::Object - Generic base class for all CCM Tools objects.

4. Further information
======================

Further information about the CCM Tools and CORBA in general is available on the
CCM Tools web site: http://ccmtools.sf.net/. Technical information about CORBA
and the CORBA Component Model Specification is available from the OMG web site:
http://omg.org/.

You can also get information about this particular library implementation by
contacting the developers, listed in the AUTHORS file in the root of this source
tree.

Finally, good luck, and happy hacking !
