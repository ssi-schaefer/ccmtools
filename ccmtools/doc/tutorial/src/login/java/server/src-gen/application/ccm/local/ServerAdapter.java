/*
 * This file was automatically generated by CCM Tools version 0.7.0
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package application.ccm.local;

import java.util.logging.Logger;

import Components.ccm.local.AlreadyConnected;
import Components.ccm.local.Assembly;
import Components.ccm.local.CCMException;     
import Components.ccm.local.CCMHome;
import Components.ccm.local.Cookie;
import Components.ccm.local.CookieImpl;
import Components.ccm.local.CookieRequired;
import Components.ccm.local.ExceededConnectionLimit;
import Components.ccm.local.InvalidConfiguration;
import Components.ccm.local.InvalidConnection;
import Components.ccm.local.InvalidName;
import Components.ccm.local.NoConnection;
import Components.ccm.local.RemoveFailure;
import ccm.local.ServiceLocator;

  
                 
public class ServerAdapter 
    implements Server
{
    private Logger logger = ServiceLocator.instance().getLogger();
    
    private CCM_Server localInterface;
    private CCM_Server_Context ctx;
    private Assembly assembly;

    /** Facet adapter references */
    private application.ccm.local.Login loginFacetAdapter;  
	
    /** Receptacle references */  
		
		
    protected ServerAdapter()
    {
        this(null, null);
    }
	
    public ServerAdapter(CCM_Server localInterface)
    {
        this(localInterface, null);
    }
	
    public ServerAdapter(CCM_Server localInterface, Assembly assembly)
    {
        logger.fine("localInterface = " + localInterface + ", " + assembly);
        this.localInterface = localInterface;
        this.assembly = assembly;
    }
	
	
    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */    
    
    
    /** Supported interface methods */    

	
    /* 
     * Equivalent interface methods 
     */
	
    /** Attribute equivalent methods */    

    /** Facet equivalent methods */    

    public application.ccm.local.Login provide_login()
    {
        logger.fine("");
        if(loginFacetAdapter == null)
        {
            loginFacetAdapter = 
                new application.ccm.local.LoginAdapter(localInterface.get_login());
        }
        return loginFacetAdapter;
    }
    
    
    /** Receptacle equivalent methods */
	
    /** CCMObject interface methods */
	
    public void configuration_complete()
        throws InvalidConfiguration
    {
        logger.fine("");
        ctx = new CCM_Server_ContextImpl(this); 
        try
        {
            if(assembly != null) 
            { 
                assembly.configuration_complete(); 
            }
            localInterface.set_session_context(ctx);
            localInterface.ccm_activate();
        }
        catch(CCMException e)
        {
            throw new InvalidConfiguration();
        }
    }

    public void remove()
        throws RemoveFailure
    { 
        logger.fine("");
        try 
        {
            localInterface.ccm_remove();
            if(assembly != null) 
            { 
                assembly.tear_down(); 
                assembly = null;
            }
        }
        catch(CCMException e)
        {
            throw new RemoveFailure();
        }
    }
    
    public CCMHome get_ccm_home()
    {
        throw new RuntimeException("Not implemented!");
    }
    
    
    /** Navigation interface methods */
    
    public Object provide_facet(String name)
        throws InvalidName
    {
        logger.fine("name = " + name);
        if(name == null)
        {
            throw new InvalidName();
        }
        else if(name.equals("login"))
        {
            return provide_login();
        }
   
        throw new InvalidName();
    }
    
    
    /** Receptacle methods */
    
    public Cookie connect(String name, Object obj)
        throws InvalidName, InvalidConnection, 
        AlreadyConnected, ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + obj);
        if(name == null)
        {
            throw new InvalidName();
        }
        if(obj == null)
        {
            throw new InvalidConnection();
        }         
        else
        {
            throw new InvalidName();
        }
    }
    
    public void disconnect(String name, Cookie ck)
        throws InvalidName, InvalidConnection, 
        CookieRequired, NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck );
        if(name == null)
        {
            throw new InvalidName();
        }
        if(ck == null)
        {
            throw new CookieRequired();
        }      
        else
        {
            throw new InvalidName();
        }
    }    
}
