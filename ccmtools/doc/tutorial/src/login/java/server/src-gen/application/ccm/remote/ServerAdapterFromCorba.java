/*
 * This file was automatically generated by CCM Tools version 0.7.0
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package application.ccm.remote;

import java.util.logging.Logger;
import java.util.Iterator;
import java.util.Map;
import java.util.HashMap;

import Components.ccm.local.AlreadyConnected;
import Components.ccm.local.Cookie;
import Components.ccm.local.CookieImpl;
import Components.ccm.local.CCMException;   
import Components.ccm.local.ExceededConnectionLimit;
import Components.ccm.local.InvalidConfiguration;
import Components.ccm.local.InvalidConnection;
import Components.ccm.local.NoConnection;
import Components.ccm.local.RemoveFailure;

import ccm.local.ServiceLocator;
import ccm.remote.CCMSessionContainer;

import org.omg.PortableServer.Servant;
import org.omg.CORBA.BAD_OPERATION;
          
import application.ccm.local.CCM_Server_Context;
import application.ccm.local.Server;


public class ServerAdapterFromCorba 
     extends application.ServerPOA
{
    /** Default logger instance */
    private Logger logger = ServiceLocator.instance().getLogger();
  
    /** CCM session container instance */  
    private CCMSessionContainer container;

    /** Local component instance */
    private Server localInterface;
        
    /** CORBA facet references */    
    private application.Login loginFacet;
   

    /** CORBA receptacle references */   
        
    public ServerAdapterFromCorba(CCMSessionContainer container, 
        Server localComponent)
    {    
        logger.fine("localComponent = " + localComponent);
        this.container = container;
        this.localInterface = localComponent;    
        loginFacet = null;
                   
    }
    
    
    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */    
    
    /** Supported interface methods */    
    
    
    /** 
     * Equivalent interface methods 
     */
     
    /** Attribute equivalent methods */
        


    /** Facet equivalent methods */    
    

    public application.Login provide_login()
    {
        logger.fine("");
        try
        {
            if(loginFacet == null)
            {
                application.ccm.local.Login localAdapter = 
                    localInterface.provide_login();
                Servant servant = 
                    new application.ccm.remote.LoginAdapterFromCorba(localAdapter);
                org.omg.CORBA.Object obj = 
                    container.getCorbaObjectFromServant(servant);
                loginFacet = application.LoginHelper.narrow(obj);
            }
        }
        catch(CCMException e)
        {
            e.printStackTrace();
        }
        return loginFacet;
    }

     
    /** Receptacle equivalent methods */
         
    
    /** 
     * The following operations are defined in the Components::CCMObject
     * interface.
     */
    
    public Components.CCMHome get_ccm_home()
    {
        logger.fine("");
        return container.getCorbaHome();
    }

    public void configuration_complete()
        throws Components.InvalidConfiguration
    {
        logger.fine("");
        try
        {
            localInterface.configuration_complete();
        }
        catch(InvalidConfiguration e)
        {
            e.printStackTrace();
            throw new Components.InvalidConfiguration();
        }
    }

    public void remove()
        throws Components.RemoveFailure
    {
        logger.fine("");
        try
        {
            if(localInterface == null)
            {
                throw new Components.RemoveFailure("Can't remove component because its " 
                       + "local reference is null!");
            }
            else
            {
                localInterface.remove();
            }
        }
        catch(RemoveFailure e)
        {
        	    e.printStackTrace();
            throw new Components.RemoveFailure(e.getMessage());
        }
    }
    
    
    /** 
     * The following operations are defined in the Components::Navigation
     * interface.
     */

    public org.omg.CORBA.Object provide_facet(String name) 
        throws Components.InvalidName
    {
        logger.fine("");	
        if(name == null)
        {
            throw new Components.InvalidName();
        }        
        else if(name.equals("login"))
        {
            return provide_login();
        }

        else
        {
            throw new Components.InvalidName();
        }
    }


    /** 
     * The following operations are defined in the Components::Receptacles
     * interface.
     */
     
    public Components.Cookie connect(String name, org.omg.CORBA.Object obj) 
        throws Components.InvalidName, 
        Components.InvalidConnection, 
        Components.AlreadyConnected, 
        Components.ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + obj);
        if(name == null) 
        {
            throw new Components.InvalidName("connection name is null!");
        }
        else
        {
            throw new Components.InvalidName(name);
        }	
    }

    public void disconnect(String name, Components.Cookie ck) 
        throws Components.InvalidName, 
        Components.InvalidConnection, 
        Components.CookieRequired, 
        Components.NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck);
        if(name == null)
        {
            throw new Components.InvalidName("connection name is null!");
        }
        else
        {
            throw new Components.InvalidName(name);
        }	
    }
}
