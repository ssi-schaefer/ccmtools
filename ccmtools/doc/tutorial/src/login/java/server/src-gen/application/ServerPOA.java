package application;


/**
* application/ServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from ./idl2/application_Server.idl
* Wednesday, August 16, 2006 12:56:53 PM CEST
*/

public abstract class ServerPOA extends org.omg.PortableServer.Servant
 implements application.ServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("provide_login", new java.lang.Integer (0));
    _methods.put ("get_ccm_home", new java.lang.Integer (1));
    _methods.put ("configuration_complete", new java.lang.Integer (2));
    _methods.put ("remove", new java.lang.Integer (3));
    _methods.put ("provide_facet", new java.lang.Integer (4));
    _methods.put ("connect", new java.lang.Integer (5));
    _methods.put ("disconnect", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // application/Server/provide_login
       {
         application.Login $result = null;
         $result = this.provide_login ();
         out = $rh.createReply();
         application.LoginHelper.write (out, $result);
         break;
       }


  /**
    		 * Returns a CCMHome reference to the home that manages this 
    		 * component.
    		 */
       case 1:  // Components/CCMObject/get_ccm_home
       {
         Components.CCMHome $result = null;
         $result = this.get_ccm_home ();
         out = $rh.createReply();
         Components.CCMHomeHelper.write (out, $result);
         break;
       }


  /**
      		 * This operation is called by a configurator to indicate that
      		 * the initial component configuration has completed.
      		 */
       case 2:  // Components/CCMObject/configuration_complete
       {
         try {
           this.configuration_complete ();
           out = $rh.createReply();
         } catch (Components.InvalidConfiguration $ex) {
           out = $rh.createExceptionReply ();
           Components.InvalidConfigurationHelper.write (out, $ex);
         }
         break;
       }


  /**
      		 * This operation is used to delete a component.
      		 */
       case 3:  // Components/CCMObject/remove
       {
         try {
           this.remove ();
           out = $rh.createReply();
         } catch (Components.RemoveFailure $ex) {
           out = $rh.createExceptionReply ();
           Components.RemoveFailureHelper.write (out, $ex);
         }
         break;
       }


  /**
  		 * Returns a reference to the facet denoted by the name parameter.
  		 */
       case 4:  // Components/Navigation/provide_facet
       {
         try {
           String name = Components.FeatureNameHelper.read (in);
           org.omg.CORBA.Object $result = null;
           $result = this.provide_facet (name);
           out = $rh.createReply();
           org.omg.CORBA.ObjectHelper.write (out, $result);
         } catch (Components.InvalidName $ex) {
           out = $rh.createExceptionReply ();
           Components.InvalidNameHelper.write (out, $ex);
         }
         break;
       }


  /**
  		 * Connect the object reference specified by the connection parameter
  		 * to the receptacle specified by the name parameter on the target
  		 * component.
  		 * If the specified receptacle is a multiplex receptacle, the 
  		 * operation returns a cookie value that can be used subsequently
  		 * to disconnect the object reference.
  		 * If the receptacle is a simplex receptacle, the return value is a
  		 * nil.
  		 */
       case 5:  // Components/Receptacles/connect
       {
         try {
           String name = Components.FeatureNameHelper.read (in);
           org.omg.CORBA.Object connection = org.omg.CORBA.ObjectHelper.read (in);
           Components.Cookie $result = null;
           $result = this.connect (name, connection);
           out = $rh.createReply();
           Components.CookieHelper.write (out, $result);
         } catch (Components.InvalidName $ex) {
           out = $rh.createExceptionReply ();
           Components.InvalidNameHelper.write (out, $ex);
         } catch (Components.InvalidConnection $ex) {
           out = $rh.createExceptionReply ();
           Components.InvalidConnectionHelper.write (out, $ex);
         } catch (Components.AlreadyConnected $ex) {
           out = $rh.createExceptionReply ();
           Components.AlreadyConnectedHelper.write (out, $ex);
         } catch (Components.ExceededConnectionLimit $ex) {
           out = $rh.createExceptionReply ();
           Components.ExceededConnectionLimitHelper.write (out, $ex);
         }
         break;
       }


  /**
  		 * If the receptacle defined by the name parameter is a simplex one,
  		 * the operation will disassociate any object reference currently 
  		 * connected to the receptacle (the cookie value is ignored).
  		 * If the receptacle defined by the name parameter is a multiplex
  		 * receptacle, the disconnect operation disassociates the object
  		 * reference associated with the cookie value from the receptacle.
  		 */
       case 6:  // Components/Receptacles/disconnect
       {
         try {
           String name = Components.FeatureNameHelper.read (in);
           Components.Cookie ck = Components.CookieHelper.read (in);
           this.disconnect (name, ck);
           out = $rh.createReply();
         } catch (Components.InvalidName $ex) {
           out = $rh.createExceptionReply ();
           Components.InvalidNameHelper.write (out, $ex);
         } catch (Components.InvalidConnection $ex) {
           out = $rh.createExceptionReply ();
           Components.InvalidConnectionHelper.write (out, $ex);
         } catch (Components.CookieRequired $ex) {
           out = $rh.createExceptionReply ();
           Components.CookieRequiredHelper.write (out, $ex);
         } catch (Components.NoConnection $ex) {
           out = $rh.createExceptionReply ();
           Components.NoConnectionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:application/Server:1.0", 
    "IDL:Components/CCMObject:1.0", 
    "IDL:Components/Navigation:1.0", 
    "IDL:Components/Receptacles:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Server _this() 
  {
    return ServerHelper.narrow(
    super._this_object());
  }

  public Server _this(org.omg.CORBA.ORB orb) 
  {
    return ServerHelper.narrow(
    super._this_object(orb));
  }


} // class ServerPOA
