/*
 * This file was automatically generated by CCM Tools version 0.7.0
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package application.ccm.local;

import java.util.logging.Logger;
import java.util.Map;
import java.util.HashMap;

import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;
import org.omg.PortableServer.Servant;

import Components.ccm.local.AlreadyConnected;
import Components.ccm.local.CCMException;
import Components.ccm.local.CCMExceptionReason;
import Components.ccm.local.Cookie;
import Components.ccm.local.CookieImpl;
import Components.ccm.local.CookieRequired;
import Components.ccm.local.ExceededConnectionLimit;
import Components.ccm.local.CCMHome;
import Components.ccm.local.InvalidName;
import Components.ccm.local.InvalidConnection;
import Components.ccm.local.InvalidConfiguration; 
import Components.ccm.local.NoConnection;
import Components.ccm.local.RemoveFailure; 

import ccm.local.ServiceLocator;
import ccm.local.ServiceLocatorException;

  
                 

public class ServerAdapterToCorba 
    implements Server
{
    private Logger logger = ServiceLocator.instance().getLogger();

    /** CORBA reference to a remote component */
    private application.Server remoteInterface;

    /** Java references to local facet adapters */    
    private application.ccm.local.Login login;


    /** Java references to local receptacle adapters */

    /** CORBA references */
    private POA componentPoa;
    
    
    public ServerAdapterToCorba(application.Server remoteComponent)
        throws CCMException
    {    
        logger.fine("remoteComponent = " + remoteComponent);
        this.remoteInterface = remoteComponent;
        try
        {
            componentPoa = ServiceLocator.instance().createSessionComponentPoa("ServerPoa");
        }
        catch(ServiceLocatorException e)
        {
            throw new CCMException(e.getMessage(), CCMExceptionReason.SYSTEM_ERROR);
        }
    }
    
    
    /* 
     * Supported interface methods 
     */
        
    

    
    /** 
     * Equivalent interface methods 
     */
    
            

    public application.ccm.local.Login provide_login()
    {
        logger.fine("");
        if(login == null)
        {
            login = 
                new application.ccm.local.LoginAdapterToCorba(remoteInterface.provide_login());
        }
        return login;
    }



    
    /** CCMObject interface methods */
    
    public void configuration_complete()
        throws InvalidConfiguration
    {
        logger.fine("");
        if(remoteInterface != null)
        {
            try
            {
                remoteInterface.configuration_complete();
            }
            catch(Components.InvalidConfiguration e)
            {
                e.printStackTrace();
                throw new InvalidConfiguration();
            }    
        }
    }
    
    public void remove()
        throws RemoveFailure
    {
        logger.fine("");
        try
        {
            if(remoteInterface == null)
            {
                throw new RemoveFailure("Can't remove component because its remote reference is null!");           
            
            }
            else
            {
                remoteInterface.remove();
            }
        }
        catch(Components.RemoveFailure e)
        {
            throw new RemoveFailure();
        }
    }
    
    public CCMHome get_ccm_home()
    {
        logger.fine("");
        // TODO
        throw new RuntimeException("Not implemented!");
    }
    
    
    /** Navigation interface methods */
    
    public Object provide_facet(String name)
        throws InvalidName
    {
        logger.fine("name = " + name);
        if(name == null)
        {
            throw new InvalidName();
        }        
        else if(name.equals("login"))
        {
            return provide_login();
        }

        else
        {
            throw new InvalidName();
        }
    }
    
    
    /** Receptacle interface methods */
    
    public Cookie connect(String name, Object localObject)
        throws InvalidName, InvalidConnection,
               AlreadyConnected, ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + localObject);
        if(name == null)
        {
            throw new InvalidName();
        }
        else
        {
            throw new InvalidName();
        }
    }
    
    public void disconnect(String name, Cookie ck)
        throws InvalidName, InvalidConnection,
               CookieRequired, NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck);
        if(name == null)
        {
            throw new InvalidName();
        }
        else
        {
            throw new InvalidName();
        }
    }
}
