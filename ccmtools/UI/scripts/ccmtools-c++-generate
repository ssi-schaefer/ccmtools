#! /usr/bin/env python

## ccmtools-c++-generate : C++ component generator wrapper
## Leif Johnson <leif@ambient.2y.net>
## copyright (c) 2003 Salomon Automation
##
## $Id$
##
## This program is free software; you can redistribute it and/or modify it unde
## the terms of the GNU General Public License as published by the Free Softwar
## Foundation; either version 2 of the License, or (at your option) any later
## version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
## details.
##
## You should have received a copy of the GNU General Public License along with
## this program; if not, write to the Free Software Foundation, Inc., 59 Temple
## Place - Suite 330, Boston, MA 02111-1307, USA.

import os, sys, time

FORCE_COPY = 0
ENABLE_DEBUG = 0
ENABLE_PYTHON_TEST = 0

IDL_FILES = ''
INCLUDE_PATH = ''
CODE_DEFINES = ''
CODE_VERSION = '0.1.0'

INSTALL_DIR = ''
SOURCE_DIR = ''
CCMTOOLS_PACKAGE = 'ccmtools-package'
if 'CCMTOOLS_PACKAGE' in os.environ.keys():
    CCMTOOLS_PACKAGE = os.environ['CCMTOOLS_PACKAGE']

USAGE = '''Usage: ccmtools-c++-generate [OPTION]... IDL-FILE...

Generate C++ components and test components based on the given IDL files.

Options:
    -c VERSION,
      --code-version=VERSION    Set VERSION of generated package [%s]
    -d, --debug                 Enable debugging in generated source code
    -DFOO[=BAR]                 Define FOO (as BAR) for generated source code
    -f, --force-copy            Force copying generated application files
    -h, --help                  Print out this help
    -i DIR, --install=DIR       Use DIR as the install prefix [Confix default]
    -IDIR                       Add DIR to the include path for IDL files
    -p NAME, --package=NAME     Set package name to NAME [%s]
    -s DIR, --source=DIR        Store generated source code in DIR
                                [./<PACKAGE-NAME>]
    -y, --python                Enable Python testing in generated source code
    -V, --version               Print out ccmtools version information

The environment variable CCMTOOLS_PACKAGE can be used to set the package name.

Generated application logic and user types files will be copied to the current
directory, unless they exist already, or if the -f option is enabled. Make sure
you have a "ccmtools" profile in your $HOME/.confix configuration file.''' \
    % (CODE_VERSION, CCMTOOLS_PACKAGE)

## utility functions.

def remove(dir):
    files = os.listdir(dir)
    for f in files:
        new_file = os.path.join(dir, f)
        if os.path.isdir(new_file): remove(new_file)
        else:                       os.remove(new_file)
    os.rmdir(dir)

def findtail(dir, tail):
    result = []
    for f in os.listdir(dir):
        new_file = os.path.join(dir, f)
        if os.path.isdir(new_file):
            result += findtail(new_file, tail)
        elif f.endswith(tail):
            result.append(new_file)
    return result

def findhead(dir, head):
    result = []
    for f in os.listdir(dir):
        new_file = os.path.join(dir, f)
        if os.path.isdir(new_file):
            result += findhead(new_file, head)
        elif f.startswith(head):
            result.append(new_file)
    return result

def copyhere(file):
    try:
        try:
            src_handle = open(file, 'rb')
            dst_handle = open(os.path.basename(file), 'wb')
            dst_handle.write(src_handle.read())
        finally:
            dst_handle.close()
            src_handle.close()
    except:
        return 1
    return 0

## handle arguments.

index = 1
while index < len(sys.argv):
    arg = sys.argv[index]
    index += 1

    if arg == '-c': CODE_VERSION = sys.argv[index]; index += 1
    elif arg.startswith('--c') and arg.find('=') > 0:
        CODE_VERSION = arg.split('=')[1]

    elif arg == '-d' or arg.startswith('--d'): ENABLE_DEBUG = 1
    elif arg.startswith('-D'): CODE_DEFINES += ' ' + arg
    elif arg == '-f' or arg.startswith('--f'): FORCE_COPY = 1
    elif arg == '-h' or arg.startswith('--h'): print USAGE; sys.exit(0)
    elif arg == '-i': INSTALL_DIR = sys.argv[index]; index += 1
    elif arg.startswith('--i') and arg.find('=') > 0:
        INSTALL_DIR = arg.split('=')[1]

    elif arg.startswith('-I'): INCLUDE_PATH += ' ' + arg
    elif arg == '-p': CCMTOOLS_PACKAGE = sys.argv[index]; index += 1
    elif arg.startswith('--pa') and arg.find('=') > 0:
        CCMTOOLS_PACKAGE = arg.split('=')[1]

    elif arg == '-s': SOURCE_DIR = sys.argv[index]; index += 1
    elif arg.startswith('--s') and arg.find('=') > 0:
        SOURCE_DIR = arg.split('=')[1]

    elif arg == '-y' or arg.startswith('--py'): ENABLE_PYTHON_TEST = 1
    elif arg == '-V' or arg.startswith('--v'):
        os.execlp('ccmtools-generate', 'ccmtools-generate', '--version')

    elif arg.find('.idl') > 0: IDL_FILES += ' ' + arg

## argument post processing and validation.

if not IDL_FILES:
    print 'No input IDL files specified!'
    print
    print USAGE
    sys.exit(1)

parts = CODE_VERSION.split('.')[:2]
ver_maj, ver_min = parts[0], '0'
if len(parts) > 1: ver_min = parts[1]

esc_l = r'\\\\\\\"\\\\\\\\\\\\\\\"'
esc_r = r'\\\\\\\\\\\\\\\"\\\\\\\"'
date = '%04d-%02d-%02d_%02d:%02d_UTC' % time.gmtime()[:5]
CODE_DEFINES += r' -DCCMTOOLS_PACKAGE_VERSION_MAJOR=' + ver_maj
CODE_DEFINES += r' -DCCMTOOLS_PACKAGE_VERSION_MINOR=' + ver_min
CODE_DEFINES += r' -DCCMTOOLS_PACKAGE_VERSION=%s%s%s' % (esc_l, CODE_VERSION, esc_r)
CODE_DEFINES += r' -DCCMTOOLS_PACKAGE_DATE=%s%s%s' % (esc_l, date, esc_r)
CODE_DEFINES += r' -DCCMTOOLS_PACKAGE_NAME=%s%s%s' % (esc_l, CCMTOOLS_PACKAGE, esc_r)
if ENABLE_DEBUG:       CODE_DEFINES += r' -DCCM_DEBUG'
if ENABLE_PYTHON_TEST: CODE_DEFINES += r' -DCCM_TEST_PYTHON'

SOURCE_DIR = SOURCE_DIR or CCMTOOLS_PACKAGE
if (sys.platform[:3] == 'win' and not SOURCE_DIR[1:3] == ':\\') or \
       not SOURCE_DIR.startswith(os.sep):
    SOURCE_DIR = os.path.join(os.getcwd(), SOURCE_DIR)

if os.path.isdir(SOURCE_DIR): remove(SOURCE_DIR)
os.makedirs(os.path.join(SOURCE_DIR, 'idl3'))

## generate components. the generation order is (a) idl3mirror, (b) c++mirror
## (for test generation) (c) c++ python wrappers (for rapid prototyping), (d)
## c++ mirror components (uses the idl3mirror files), and (e) the real c++
## components.

idl3_dir = os.path.join(SOURCE_DIR, 'idl3')
idl3cmd = 'ccmtools-generate %s -o %s' % (INCLUDE_PATH, idl3_dir)
cmd = 'ccmtools-generate %s -o %s' % (INCLUDE_PATH, SOURCE_DIR)

if ENABLE_DEBUG and os.system('%s idl3mirror -u %s' % (idl3cmd, IDL_FILES)):
    print 'Error while generating IDL3 mirror files.'
    sys.exit(1)

if ENABLE_DEBUG and os.system('%s c++mirror -u %s %s' %
                              (cmd, CODE_DEFINES, IDL_FILES)):
    print 'Error while generating C++ mirror test files.'
    sys.exit(1)

if ENABLE_PYTHON_TEST and os.system('%s c++python -e -u %s' % (cmd, IDL_FILES)):
    print 'Error while generating Python bindings.'
    sys.exit(1)

if ENABLE_DEBUG:
    cwd = os.getcwd()
    os.chdir(idl3_dir)
    if os.system('%s c++local -a -u %s *' % (cmd, CODE_DEFINES)):
        print 'Error while generating C++ mirror components.'
        os.chdir(cwd)
        sys.exit(1)
    os.chdir(cwd)

if os.system('%s c++local -a %s %s' % (cmd, CODE_DEFINES, IDL_FILES)):
    print 'Error generating local C++ components.'
    sys.exit(1)

## copy generated application logic files and user types files to the working
## directory. only do this copy if such files do not already exist, or if the
## force command line option was given.

for f in findtail(SOURCE_DIR, '_app.cc') + \
         findtail(SOURCE_DIR, '_app.h') + \
         findtail(SOURCE_DIR, '_user_types.h') + \
         findhead(SOURCE_DIR, '_check_'):
    if FORCE_COPY or not os.path.isfile(os.path.basename(f)):
        if copyhere(f):
            print 'Error copying %s to current directory.'
            sys.exit(1)

