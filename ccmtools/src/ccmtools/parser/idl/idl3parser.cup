
/** Preliminary Declarations Section */

import java.util.*;
import java.math.*;
import java_cup.runtime.*;

import ccmtools.metamodel.BaseIDL.*;
import ccmtools.metamodel.ComponentIDL.*;

parser code 
{:
	/**
	 * This method overides the original report_error() method
	 * and generates a useful error message.
	 */
	public void report_error(String message, Object info)
	{
		StringBuilder out = new StringBuilder();
		if(info instanceof Symbol)
		{
			Symbol s = (Symbol)info;
			out.append(ParserHelper.getInstance().getCurrentSourceFile());
			out.append(" line " + ParserHelper.getInstance().getCurrentSourceLine());
		}
		out.append(": " + message);
		throw new RuntimeException(out.toString());
	}
	
	public void report_fatal_error(String message, Object info)
	{
		System.exit(1);
	}
	
:};


action code
{:
	private ParserHelper helper = ParserHelper.getInstance();
	
	

:}

/** Declaration of Terminals and Non Terminals Section */

terminal String		T_PRAGMA;
terminal String 		T_INCLUDE;

terminal 	T_LEFT_CURLY_BRACKET;
terminal 	T_RIGHT_CURLY_BRACKET;
terminal		T_LEFT_SQUARE_BRACKET;
terminal	 	T_RIGHT_SQUARE_BRACKET;
terminal		T_LEFT_PARANTHESIS;
terminal		T_RIGHT_PARANTHESIS;
terminal		T_COLON;
terminal 	T_COMMA;
terminal 	T_SEMICOLON;  
terminal	 	T_SCOPE;
terminal		T_EQUAL;
terminal 	T_SHIFTRIGHT;
terminal 	T_SHIFTLEFT;
terminal		T_PLUS_SIGN;
terminal 	T_MINUS_SIGN; 
terminal		T_ASTERISK; 
terminal		T_SOLIDUS;
terminal		T_PERCENT_SIGN;
terminal 	T_TILDE;
terminal 	T_VERTICAL_LINE; 
terminal		T_CIRCUMFLEX; 
terminal		T_AMPERSAND;
terminal		T_LESS_THAN_SIGN;
terminal 	T_GREATER_THAN_SIGN;

terminal		T_IMPORT;
terminal		T_CONST;
terminal		T_TYPEDEF;
terminal		T_FLOAT;
terminal		T_DOUBLE;
terminal		T_CHAR;
terminal		T_WCHAR;
terminal		T_FIXED;
terminal		T_BOOLEAN;
terminal		T_STRING;
terminal		T_WSTRING;
terminal		T_VOID;
terminal		T_UNSIGNED;
terminal		T_LONG;
terminal		T_SHORT;
terminal		T_FALSE;
terminal		T_TRUE;
terminal		T_STRUCT;
terminal		T_UNION;
terminal		T_SWITCH;
terminal		T_CASE;
terminal		T_DEFAULT;
terminal		T_ENUM;
terminal		T_IN;
terminal		T_OUT;
terminal		T_INTERFACE;
terminal		T_ABSTRACT;
terminal		T_VALUETYPE;
terminal		T_TRUNCATABLE;
terminal		T_SUPPORTS;
terminal		T_CUSTOM;
terminal		T_PUBLIC;
terminal		T_PRIVATE;
terminal		T_FACTORY;
terminal		T_NATIVE;
terminal		T_VALUEBASE;
terminal		T_TYPEID;
terminal		T_TYPEPREFIX;
terminal		T_GETRAISES;
terminal		T_SETRAISES;
terminal		T_LOCAL;

terminal		T_MODULE;
terminal		T_OCTET;
terminal		T_ANY;
terminal		T_SEQUENCE;
terminal		T_READONLY;
terminal		T_ATTRIBUTE;
terminal		T_EXCEPTION;
terminal		T_ONEWAY;
terminal		T_INOUT;
terminal		T_RAISES;
terminal		T_CONTEXT;

terminal		T_OBJECT;

terminal		T_COMPONENT;
terminal		T_PROVIDES;
terminal		T_USES;
terminal		T_MULTIPLE;
terminal		T_EMITS;
terminal		T_PUBLISHES;
terminal		T_CONSUMES;
terminal		T_HOME;
terminal		T_MANAGES;
terminal		T_PRIMARYKEY;
terminal		T_FINDER;
terminal		T_EVENTTYPE;

terminal 	String		T_IDENTIFIER;
terminal		Double		T_FLOATING_PT_LITERAL;
terminal		BigInteger	T_FIXED_PT_LITERAL;     
terminal		Integer		T_INTEGER_LITERAL;
terminal		Character 	T_CHARACTER_LITERAL;
terminal		Character 	T_WCHARACTER_LITERAL;
terminal  	String 		T_STRING_LITERAL;
terminal		String 		T_WSTRING_LITERAL;


/* 1 */
nonterminal	MContainer 		specification;
nonterminal List				definitions;  	// List<MConatined>
nonterminal	Object			definition;
nonterminal	MModuleDef		module;
nonterminal	MInterfaceDef	interface;
nonterminal		interface_dcl;
nonterminal		forward_dcl;
nonterminal		interface_header;
nonterminal		interface_body;
nonterminal		exports;
nonterminal		export;

/* 10 */
nonterminal		interface_inheritance_spec;	
nonterminal		interface_names;
nonterminal		scoped_names;
nonterminal MIDLType		scoped_name;
nonterminal		value;
nonterminal		value_forward_dcl;
nonterminal		value_box_dcl;
nonterminal		value_abs_dcl;
nonterminal		value_body;
nonterminal		value_dcl;
nonterminal		value_elements;
nonterminal		value_header;
nonterminal		value_inheritance_spec;
nonterminal		value_inheritance_bases;
nonterminal		value_names;

/* 20 */
nonterminal		value_name;			
nonterminal		value_element;
nonterminal		state_member;
nonterminal		init_dcl;
nonterminal		init_param_decls;
nonterminal		init_param_decl;
nonterminal		init_param_attribute;

nonterminal	MConstantDef	 const_dcl;
nonterminal	MIDLType	 const_type;
nonterminal	Object const_exp;

nonterminal	Object or_expr;	 					/* 30 */		
nonterminal	Object xor_expr;
nonterminal	Object and_expr;
nonterminal	Object shift_expr;
nonterminal	Object add_expr;
nonterminal	Object mult_expr;
nonterminal	Object unary_expr;
nonterminal	Object primary_expr;
nonterminal	Object literal; 			

nonterminal	Integer	positive_int_const; 			/* 41 */

nonterminal	MIDLType	 type_dcl;
nonterminal	MIDLType type_spec;
nonterminal	MIDLType simple_type_spec;
nonterminal	MIDLType base_type_spec;
nonterminal	MIDLType template_type_spec;
nonterminal	MIDLType constr_type_spec;

nonterminal	List	 declarators;
nonterminal String declarator;					/* 50 */
nonterminal	String simple_declarator;
nonterminal	String complex_declarator;

nonterminal	MPrimitiveDef floating_pt_type;
nonterminal	MPrimitiveDef integer_type;
nonterminal	MPrimitiveDef signed_int;
nonterminal	MPrimitiveDef signed_short_int;
nonterminal	MPrimitiveDef signed_long_int;
nonterminal	MPrimitiveDef signed_longlong_int;
nonterminal	MPrimitiveDef unsigned_int;
nonterminal	MPrimitiveDef unsigned_short_int;	/* 60 */
nonterminal	MPrimitiveDef unsigned_long_int;
nonterminal	MPrimitiveDef unsigned_longlong_int;
nonterminal	MPrimitiveDef char_type;
nonterminal	MPrimitiveDef wide_char_type;
nonterminal	MPrimitiveDef boolean_type;
nonterminal	MPrimitiveDef octet_type;
nonterminal	MPrimitiveDef any_type;
nonterminal	MPrimitiveDef object_type;

nonterminal	MStructDef struct_type;
nonterminal List member_list;					/* 70 */			
nonterminal	MFieldDef member;

nonterminal	MUnionDef union_type;
nonterminal		switch_type_spec;
nonterminal		switch_body;
nonterminal		case;
nonterminal		case_label;
nonterminal		element_spec;

nonterminal	MEnumDef	 enum_type;
nonterminal	List	 enumerators;
nonterminal	String enumerator;

nonterminal	MSequenceDef sequence_type;			/* 80 */	
nonterminal	MStringDef string_type;
nonterminal	MWstringDef wide_string_type;

nonterminal	String array_declarator;

nonterminal List<Integer> fixed_array_sizes;
nonterminal	Integer fixed_array_size;
nonterminal		attr_dcl;
nonterminal		except_dcl;
nonterminal		members;
nonterminal		op_dcl;
nonterminal		op_attribute;
nonterminal		op_type_spec;


nonterminal		parameter_dcls;					/* 90 */
nonterminal		param_dcls;
nonterminal		param_dcl;
nonterminal		param_attribute;
nonterminal		raises_expr;
nonterminal		context_expr;
nonterminal		string_literals;
nonterminal	String T_string_literal;
nonterminal	String T_wstring_literal;

nonterminal		param_type_spec;

nonterminal MFixedDef fixed_pt_type;

nonterminal	MFixedDef fixed_pt_const_type;
nonterminal	MIDLType value_base_type;
nonterminal		constr_forward_decl;

/* 100 */
nonterminal		import_dcl;				
nonterminal		imported_scope;
nonterminal		type_id_dcl;
nonterminal		type_prefix_dcl;
nonterminal		readonly_attr_spec;
nonterminal		readonly_attr_declarator;
nonterminal		simple_declarators;
nonterminal		attr_spec;
nonterminal		attr_declarator;
nonterminal		attr_raises_expr;
nonterminal		get_excep_expr;
nonterminal		set_excep_expr;

/* 110 */
nonterminal		exception_list;		
nonterminal		component;
nonterminal		component_forward_dcl;
nonterminal		component_dcl;
nonterminal		component_header;
nonterminal		supported_interface_spec;
nonterminal		component_inheritance_spec;
nonterminal		component_body;
nonterminal		component_export;
nonterminal		provides_dcl;

/* 120 */
nonterminal		interface_type;		
nonterminal		uses_dcl;
nonterminal		emits_dcl;
nonterminal		publishes_dcl;
nonterminal		consumes_dcl;
nonterminal		home_dcl;
nonterminal		home_header;
nonterminal		home_inheritance_spec;
nonterminal		primary_key_spec;
nonterminal		home_body;

/* 130 */
nonterminal		home_exports;		
nonterminal		home_export;
nonterminal		factory_dcl;
nonterminal		finder_dcl;
nonterminal		event;
nonterminal		event_forward_dcl;
nonterminal		event_abs_dcl;
nonterminal		event_dcl;
nonterminal		event_header;



/** Precedence and Associatively of Terminals Section */


/** Grammar Section */

start with specification;

/* 1 */
specification 
	::= 
		definitions:l
		{:
			RESULT = helper.parseSpecification(l);
		:}
	;
		
						
/* 2 */	
definitions 
	::=
		definition:d
		{:
			RESULT = helper.parseDefinitions(d);
		:}
	| 
		definition:d definitions	:l
		{:
			RESULT = helper.parseDefinitions(d,l);
		:}
	;

definition 
	::=	
		T_INCLUDE
	|	
		T_PRAGMA
	|	
		type_dcl:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		const_dcl:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		except_dcl:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		interface:d T_SEMICOLON
		{:
			RESULT = d;
		:}		
	| 	
		module:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		value:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		type_id_dcl:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		type_prefix_dcl:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		event:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		component:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		home_dcl:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	| 	
		import_dcl:d T_SEMICOLON
		{:
			RESULT = d;
		:}
	;

		
/* 3 */
module
	::= 
		T_MODULE T_IDENTIFIER:id 
		T_LEFT_CURLY_BRACKET 
		{:
			helper.getScope().pushModule(id);
		:}
		definitions:d
		{:

		:} 
		T_RIGHT_CURLY_BRACKET
		{:
			helper.getScope().popModule();
		:}
	;
	
	
/* 4 */	
interface
	::= 	interface_dcl
	| forward_dcl
 	;
	
	
/* 5 */
interface_dcl
	::= interface_header T_LEFT_CURLY_BRACKET interface_body T_RIGHT_CURLY_BRACKET
	;
	
	
/* 6 */
forward_dcl
	::= 
		T_INTERFACE T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	| 
		T_ABSTRACT T_INTERFACE T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	| 
		T_LOCAL T_INTERFACE T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	;
	
	
/* 7 */
interface_header
	::= 
		T_INTERFACE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}	
	| 	
		T_INTERFACE T_IDENTIFIER:id
		 interface_inheritance_spec
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_ABSTRACT T_INTERFACE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_ABSTRACT T_INTERFACE T_IDENTIFIER:id 
		interface_inheritance_spec
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_LOCAL T_INTERFACE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_LOCAL T_INTERFACE T_IDENTIFIER:id
		interface_inheritance_spec
		{:
			helper.registerTypeId(id);
		:}		
	; 


/* 8 */
interface_body
	::= /*empty*/
	| exports
	;

exports
	::= export
	| export exports
	;


/* 9 */
export
	::= type_dcl T_SEMICOLON
	| const_dcl T_SEMICOLON 
	| except_dcl T_SEMICOLON
	| attr_dcl T_SEMICOLON
	| op_dcl T_SEMICOLON 
	| type_id_dcl T_SEMICOLON
	| type_prefix_dcl T_SEMICOLON
	;


/* 10 */
/* 11 */
interface_inheritance_spec
	::= T_COLON interface_names
	;

interface_names
	::= scoped_names
	;

scoped_names
	::= scoped_name
	| scoped_name T_COMMA scoped_names
	;


/* 12 */
scoped_name
	::= T_IDENTIFIER
	| T_SCOPE T_IDENTIFIER
	| scoped_name T_SCOPE T_IDENTIFIER
	;


/* 13 */
value
	::= value_dcl
	| value_abs_dcl
	| value_box_dcl
	| value_forward_dcl
	;


/* 14 */
value_forward_dcl
	::= 
		T_VALUETYPE T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
		
	| 
		T_ABSTRACT T_VALUETYPE T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	;


/* 15 */
value_box_dcl
	::= 
		T_VALUETYPE T_IDENTIFIER:id
	 	type_spec
		{:
			helper.registerTypeId(id);
		:}		
	;


/* 16 */
value_abs_dcl
	::= 
		T_ABSTRACT T_VALUETYPE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}		
	 	T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	| 
		T_ABSTRACT T_VALUETYPE T_IDENTIFIER:id 
			value_inheritance_spec 
		{:
			helper.registerTypeId(id);
		:}				
		T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	;

value_body
	::= /*empty*/
	| exports
	;


/* 17 */
value_dcl
	::= value_header T_LEFT_CURLY_BRACKET value_elements T_RIGHT_CURLY_BRACKET
	| value_header T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;

value_elements
	::= value_element
	| value_element value_elements
	;


/* 18 */
value_header
	::= 
		T_VALUETYPE T_IDENTIFIER:id 	value_inheritance_spec
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_CUSTOM T_VALUETYPE T_IDENTIFIER:id 
			value_inheritance_spec		
		{:
			helper.registerTypeId(id);
		:}
	| 
		T_VALUETYPE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_CUSTOM T_VALUETYPE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}			
	;


/* 19 */
value_inheritance_spec
	::= T_COLON value_inheritance_bases
	| T_COLON value_inheritance_bases T_SUPPORTS interface_names 
	| T_SUPPORTS interface_names
	;


value_inheritance_bases
	::= value_name
	| value_name T_COMMA value_names
	| T_TRUNCATABLE value_name
	| T_TRUNCATABLE value_name T_COMMA value_names
	;

value_names
	::= scoped_names
	;


/* 20 */
value_name
	::= scoped_name
	;


/* 21 */
value_element
	::= export
	| state_member
	| init_dcl
	;


/* 22 */
state_member
	::= T_PUBLIC type_spec declarators T_SEMICOLON
	| T_PRIVATE type_spec declarators T_SEMICOLON
	;


/* 23 */
init_dcl
	::= T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS T_SEMICOLON
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS T_SEMICOLON
	;


/* 24 */
init_param_decls
	::= init_param_decl
	| init_param_decl T_COMMA init_param_decls
	;


/* 25 */
init_param_decl
	::= init_param_attribute param_type_spec simple_declarator
	;


/* 26 */
init_param_attribute
	::= T_IN
	;


/* 27 */
const_dcl
	::= 
		T_CONST const_type:t T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}		
	 	T_EQUAL const_exp:e
	 	{:
	 		RESULT = helper.parseConstDcl(t, id, e);
	 	:}
	;


/* 28 */
const_type
	::= 
		integer_type:t
		{:
			RESULT = t;
		:}
	| 
		char_type:t
		{:
			RESULT = t;
		:}
	| 
		wide_char_type:t
		{:
			RESULT = t;
		:}
	| 
		boolean_type:t
		{:
			RESULT = t;
		:}
	| 
		floating_pt_type:t
		{:
			RESULT = t;
		:}		
	| 
		string_type:t
		{:
			RESULT = t;
		:}		
	| 
		wide_string_type:t
		{:
			RESULT = t;
		:}
	| 
		fixed_pt_const_type:t
		{:
			RESULT = t;
		:}
	| 	
		scoped_name:t 
		{:
			RESULT = t;
		:}
	| 
		octet_type:t
		{:
			RESULT = t;
		:}
	;


/* 29 */
const_exp
	::= or_expr:e
		{:
			RESULT = e;
		:}
	;


/* 30 */
or_expr
	::= 
		xor_expr:e
		{:
			RESULT = e;		
		:}
	| 
		or_expr T_VERTICAL_LINE xor_expr
	;


/* 31 */
xor_expr
	::= 
		and_expr:e
		{:
			RESULT = e;
		:}
	| 
		xor_expr T_CIRCUMFLEX and_expr
	;


/* 32 */
and_expr
	::= 
		shift_expr:e
		{:
			RESULT = e;
		:}
	| 
		and_expr T_AMPERSAND shift_expr
	;


/* 33 */
shift_expr
	::= 
		add_expr:e
		{:
			RESULT = e;
		:}
	| 
		shift_expr T_SHIFTRIGHT add_expr
	| 
		shift_expr T_SHIFTLEFT add_expr
	;


/* 34 */
add_expr
	::= 
		mult_expr:e
		{:
			RESULT = e;
		:}
	| 
		add_expr T_PLUS_SIGN mult_expr
	| 
		add_expr T_MINUS_SIGN mult_expr
	;


/* 35 */
mult_expr
	::= 
		unary_expr:e
		{:
			RESULT = e;
		:}
	| 
		mult_expr T_ASTERISK unary_expr
	| 
		mult_expr T_SOLIDUS unary_expr
	| 
		mult_expr T_PERCENT_SIGN unary_expr
	;


/* 36 */
/* 37 */
unary_expr
	::= 
		T_MINUS_SIGN primary_expr:e
		{:
			RESULT = helper.parseUnaryExprMinusSign(e);
		:}
	| 
		T_PLUS_SIGN primary_expr:e
		{:
			helper.getLogger().fine("36: T_PLUS_SIGN primary_expr = " + e);		
			RESULT = e;
		:}
	| 
		T_TILDE primary_expr:e
		{:
			helper.getLogger().fine("36: T_TILDE primary_expr = " + e);		
			RESULT = e;		
		:}
	| 
		primary_expr:e
		{:
			helper.getLogger().fine("36: primary_expr = " + e);		
			RESULT = e;
		:}
	;


/* 38 */
primary_expr
	::= 
		scoped_name
	| 
		literal:l
		{:
			helper.getLogger().fine("38: literal = " + l);		
			RESULT = l;
		:}
	| 
		T_LEFT_PARANTHESIS const_exp T_RIGHT_PARANTHESIS
	;


/* 39 */
/* 40 */
literal
	::= 
		T_INTEGER_LITERAL:i
		{:
			RESULT = i;
		:}
	| 
		T_string_literal:s
		{:
			RESULT = s;
		:}
	| 
		T_wstring_literal:ws
		{:
			RESULT = ws;
		:}
	| 
		T_CHARACTER_LITERAL:c
		{:
			RESULT = c;
		:}

	| 
		T_WCHARACTER_LITERAL:wc
		{:
			RESULT = wc;
		:}	
	| 
		T_FIXED_PT_LITERAL:fp
		{:
			RESULT = fp;
		:}		
	| 
		T_FLOATING_PT_LITERAL:f
		{:
			RESULT = f;
		:}		
	| 
		T_TRUE /*boolean_literal*/
		{:
			RESULT = Boolean.TRUE;
		:}
	| 
		T_FALSE /*boolean_literal*/
		{:
			RESULT = Boolean.FALSE;
		:}
	;


/* 41 */
positive_int_const
	::= 
		const_exp:e
		{:
			RESULT = helper.parsePositiveIntConst(e);
		:}
	;


/* 42 */
/* 43 */
type_dcl
	::= 
		T_TYPEDEF type_spec declarators
	| 
		struct_type:t
		{:
			helper.getLogger().fine("42: struct_type = " + t);	
			RESULT = t;
		:}
	| 
		union_type
	| 
		enum_type:t
		{:
			helper.getLogger().fine("42: enum_type = " + t);	
			RESULT = t;
		:}
	| 
		T_NATIVE simple_declarator
	| 
		constr_forward_decl
	;


/* 44 */
type_spec
	::= 
		simple_type_spec:t
		{:
			RESULT = t;
		:}		
	| 
		constr_type_spec:t
		{:
			RESULT = t;
		:}
	;


/* 45 */
simple_type_spec
	::= 
		base_type_spec:t
		{:
			RESULT = t;
		:}
	| 
		template_type_spec:t
		{:
			RESULT = t;
		:}
	| 
		scoped_name:t
		{:
			RESULT = t;
		:}
	;


/* 46 */
base_type_spec
	::= 
		floating_pt_type:t
		{:
			RESULT = t;
		:}
	| 
		integer_type:t
		{:
			RESULT = t;
		:}
	| 
		char_type:t
		{:
			RESULT = t;
		:}
	| 
		wide_char_type:t
		{:
			RESULT = t;
		:}
	| 
		boolean_type:t
		{:
			RESULT = t;
		:}
	| 
		octet_type:t
		{:
			RESULT = t;
		:}
	| 
		any_type:t
		{:
			RESULT = t;
		:}
	| 
		object_type:t
		{:
			RESULT = t;
		:}
	| 
		value_base_type:t
		{:
			RESULT = t;
		:}
	;


/* 47 */
template_type_spec
	::= 
		sequence_type:t
		{:
			RESULT = t;
		:}
	| 
		string_type:t
		{:
			RESULT = t;
		:}
	| 
		wide_string_type:t
		{:
			RESULT = t;
		:}
	| 
		fixed_pt_type:t
		{:
			RESULT = t;
		:}
	;


/* 48 */
constr_type_spec
	::= 
		struct_type:t
		{:
			RESULT = t;
		:}
	| 
		union_type:t
		{:
			RESULT = t;
		:}
	| 
		enum_type:t
		{:
			RESULT = t;
		:}
	;


/* 49 */
declarators
	::= 
		declarator:d
		{:
			RESULT = helper.parseDeclarators(d);
		:}	
	| 
		declarator:d T_COMMA declarators:l
		{:
			RESULT = helper.parseDeclarators(d, l);
		:}
	;


/* 50 */
declarator
	::= 
		simple_declarator:d
		{:
			RESULT = d;
		:}
	| 
		complex_declarator:d
		{:
			RESULT = d;
		:}
	;

/* 51 */
simple_declarator
	::= 
		T_IDENTIFIER:id
		{:
			RESULT = helper.parseSimpleDeclarator(id);
		:}
	;


/* 52 */
complex_declarator
	::= 
		array_declarator:d
		{:
			RESULT = d;
		:}
	;


/* 53 */
floating_pt_type
	::= 
		T_FLOAT
		{:
			RESULT = helper.parseFloatType();
		:}	
	| 
		T_DOUBLE
		{:
			RESULT = helper.parseDoubleType();
		:}			
	| 
		T_LONG T_DOUBLE
		{:
			RESULT = helper.parseLongDoubleType();
		:}			
	;


/* 54 */
integer_type
	::= 
		signed_int:i
		{:
			RESULT = i;
		:}
	| 
		unsigned_int:i
		{:
			RESULT = i;
		:}
	;


/* 55 */
signed_int
	::= 
		signed_long_int:i
		{:
			RESULT = i;
		:}
	| 
		signed_short_int:i
		{:
			RESULT = i;
		:}
	| 
		signed_longlong_int:i
		{:
			RESULT = i;		
		:}
	;


/* 56 */
signed_short_int
	::= 
		T_SHORT 
		{:
			RESULT = helper.parseSignedShortType();
		:}
	;


/* 57 */
signed_long_int
	::= 
		T_LONG
		{:
			RESULT = helper.parseSignedLongType();
		:}		
	;


/* 58 */
signed_longlong_int
	::= 
		T_LONG T_LONG
		{:
			RESULT = helper.parseSignedLongLongType();
		:}
	;


/* 59 */
unsigned_int
	::= 
		unsigned_long_int:i
		{:
			RESULT = i;
		:}
		
	| 
		unsigned_short_int:i
		{:
			RESULT = i;
		:}
		
	| 
		unsigned_longlong_int:i
		{:
			RESULT = i;
		:}		
	;


/* 60 */
unsigned_short_int
	::= 
		T_UNSIGNED T_SHORT 
		{:
			RESULT = helper.parseUnsignedShortType();
		:}
	;


/* 61 */
unsigned_long_int
	::= 
		T_UNSIGNED T_LONG
		{:
			RESULT = helper.parseUnsignedLongType();
		:}		
	;

/* 62 */
unsigned_longlong_int
	::= 
		T_UNSIGNED T_LONG T_LONG
		{:
			RESULT = helper.parseUnsignedLongLongType();
		:}	
	;


/* 63 */
char_type
	::= 
		T_CHAR
		{:
			RESULT = helper.parseCharType();
		:}
	;


/* 64 */
wide_char_type
	::= 	
		T_WCHAR
		{:
			RESULT = helper.parseWideCharType();
		:}
	;


/* 65 */
boolean_type
	::= 		
		T_BOOLEAN
		{:
			RESULT = helper.parseBooleanType();
		:}		
	;


/* 66 */
octet_type
	::= 
		T_OCTET
		{:
			RESULT = helper.parseOctetType();
		:}				
	;


/* 67 */
any_type
	::= 
		T_ANY
		{:
			RESULT = helper.parseAnyType();
		:}				
	;


/* 68 */
object_type
	::= 
		T_OBJECT
		{:
			RESULT = helper.parseObjectType();
		:}				
	;


/* 69 */
struct_type
	::= 
		T_STRUCT T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}		
	 	T_LEFT_CURLY_BRACKET member_list:l T_RIGHT_CURLY_BRACKET
	 	{:
	 		RESULT = helper.parseStructType(id, l);
	 	:}
	;


/* 70 */
member_list
	::= 
		member:m
		{:
			RESULT = helper.parseMemberList(m);
		:}
	| 
		member:m member_list:l
		{:
			RESULT = helper.parseMemberList(m,l);
		:}
	;


/* 71 */
member
	::= 
		type_spec:t declarators:d T_SEMICOLON
		{:
			RESULT = helper.parseMember(t,d);
		:}
	;


/* 72 */
union_type
	::= 	
		T_UNION T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}				
		T_SWITCH T_LEFT_PARANTHESIS switch_type_spec 
		T_RIGHT_PARANTHESIS T_LEFT_CURLY_BRACKET switch_body T_RIGHT_CURLY_BRACKET
	; 


/* 73 */
switch_type_spec
	::= integer_type
	| char_type
	| boolean_type
	| enum_type
	| scoped_name
	;


/* 74 */
switch_body
	::= case
	| case switch_body
	;


/* 75 */
case	
	::= case_label case
	| case_label element_spec T_SEMICOLON
	| case_label T_PRAGMA element_spec T_SEMICOLON   /* New */
	;


/* 76 */
case_label
	::= T_CASE const_exp T_COLON 
	| T_DEFAULT T_COLON
	;


/* 77 */
element_spec
	::= type_spec declarator
	;


/* 78 */
enum_type
	::= T_ENUM T_IDENTIFIER:id 
		{:
			helper.registerTypeId(id);
		:}		
		T_LEFT_CURLY_BRACKET enumerators:l T_RIGHT_CURLY_BRACKET
		{:
			RESULT = helper.parseEnumType(id, l);
		:}
	;

enumerators
	::= 
		enumerator:e
		{:
			RESULT = helper.parseEnumerator(e); 
		:}
	| 
		enumerator:e T_COMMA enumerators:l
		{:
			RESULT = helper.parseEnumerators(e,l);
		:}
	;


/* 79 */
enumerator
	::= 
		T_IDENTIFIER:id
		{:
			RESULT = id;
		:}
	;


/* 80 */
sequence_type
	::= T_SEQUENCE T_LESS_THAN_SIGN simple_type_spec T_COMMA positive_int_const T_GREATER_THAN_SIGN
	| T_SEQUENCE T_LESS_THAN_SIGN simple_type_spec T_GREATER_THAN_SIGN
	;


/* 81 */
string_type
	::= 
		T_STRING T_LESS_THAN_SIGN positive_int_const:b T_GREATER_THAN_SIGN
		{:
			RESULT = helper.	parseBoundedStringType(b);
		:}
	| 
		T_STRING
		{:
			RESULT = helper.parseStringType();
		:}
	;


/* 82 */
wide_string_type
	::= 
		T_WSTRING T_LESS_THAN_SIGN positive_int_const:b T_GREATER_THAN_SIGN
		{:
			RESULT = helper.parseBoundedWideStringType(b);
		:}		
	| 
		T_WSTRING
		{:
			RESULT = helper.parseWideStringType();
		:}		
	;


/* 83 */
array_declarator
	::= T_IDENTIFIER:id
//		{:
//			helper.registerTypeId(id);
//		:}
		fixed_array_sizes
	;

fixed_array_sizes
	::= fixed_array_size
	| fixed_array_size fixed_array_sizes
	;


/* 84 */
fixed_array_size
	::= T_LEFT_SQUARE_BRACKET positive_int_const T_RIGHT_SQUARE_BRACKET
	;


/* 85 */
attr_dcl
	::= readonly_attr_spec
	| attr_spec
	;


/* 86 */
except_dcl
	::= 
		T_EXCEPTION T_IDENTIFIER:id 
		{:
			helper.registerTypeId(id);
		:}			 	
		T_LEFT_CURLY_BRACKET members T_RIGHT_CURLY_BRACKET
	;

members
	::= /*empty*/
	| member members
	;


/* 87 */
op_dcl
	::= op_attribute op_type_spec T_IDENTIFIER parameter_dcls raises_expr context_expr
	| op_attribute op_type_spec T_IDENTIFIER parameter_dcls context_expr
	| op_attribute op_type_spec T_IDENTIFIER parameter_dcls raises_expr
	| op_attribute op_type_spec T_IDENTIFIER parameter_dcls
	;


/* 88 */
op_attribute
	::= /*empty*/
	| T_ONEWAY
	;


/* 89 */
op_type_spec	
	::= param_type_spec
	| T_VOID
	;


/* 90 */
parameter_dcls
	::= T_LEFT_PARANTHESIS param_dcls T_RIGHT_PARANTHESIS
	| T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS
	;

param_dcls
	::= param_dcl
	| param_dcl T_COMMA param_dcls
	;


/* 91 */
param_dcl
	::= param_attribute param_type_spec simple_declarator
	;


/* 92 */
param_attribute
	::= T_IN
	| T_OUT
	| T_INOUT
	;


/* 93 */
raises_expr
	::= T_RAISES T_LEFT_PARANTHESIS scoped_names T_RIGHT_PARANTHESIS
	;

/* 94 */
context_expr
	::= T_CONTEXT T_LEFT_PARANTHESIS string_literals T_RIGHT_PARANTHESIS
	;

string_literals
	::= 
		T_string_literal
	| 
		T_string_literal T_COMMA string_literals
	;

T_string_literal
	::= 
		T_STRING_LITERAL:s
		{:
			RESULT = helper.parseStringLiteral(s);
		:}
	| 
		T_STRING_LITERAL:s1 T_string_literal:s2
		{:
			RESULT = helper.parseStringConcatenation(s1, s2);
		:}
	;

T_wstring_literal
	::= 
		T_WSTRING_LITERAL:s
		{:
			RESULT = helper.parseWideStringLiteral(s);	
		:}
	| 
		T_WSTRING_LITERAL:s1 T_wstring_literal:s2
		{:
			RESULT = helper.parseWideStringConcatenation(s1, s2);
		:}
	;


/* 95 */
param_type_spec
	::= base_type_spec
	| template_type_spec
	| scoped_name
	;


/* 96 */
fixed_pt_type
	::= 
		T_FIXED T_LESS_THAN_SIGN positive_int_const:d T_COMMA T_INTEGER_LITERAL:s T_GREATER_THAN_SIGN
		{:
			RESULT = helper.parseFixedType(d,s);
		:}
	;


/* 97 */
fixed_pt_const_type
	::= 
		T_FIXED
	;


/* 98 */
value_base_type
	::= 
		T_VALUEBASE
		{:
			RESULT = helper.parseValueBaseType();
		:}
	;


/* 99 A (from 2.4, not in CCM) */
constr_forward_decl
	::= 
		T_STRUCT T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	| 
		T_UNION T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	;


/* 99 */
/* 100 */
import_dcl
	::= T_IMPORT imported_scope
	;

imported_scope
	::= scoped_name
	| T_string_literal
	;


/* 101 */
type_id_dcl
	::= T_TYPEID scoped_name T_string_literal
	;


/* 102 */
type_prefix_dcl
	::= T_TYPEPREFIX scoped_name T_string_literal
	;


/* 103 */
readonly_attr_spec
	::= T_READONLY T_ATTRIBUTE param_type_spec readonly_attr_declarator
	;


/* 104 */
readonly_attr_declarator
	::= simple_declarator raises_expr
	| simple_declarators
	;

simple_declarators
	::= simple_declarator
	| simple_declarator T_COMMA simple_declarators
	;


/* 105 */
attr_spec
	::= T_ATTRIBUTE param_type_spec attr_declarator
	;


/* 106 */
attr_declarator
	::= simple_declarator attr_raises_expr
	| simple_declarators
	;


/* 107 */
attr_raises_expr
	::= get_excep_expr
	| set_excep_expr
	| get_excep_expr set_excep_expr
	| set_excep_expr get_excep_expr
	;


/* 108 */
get_excep_expr
	::= T_GETRAISES exception_list
	;


/* 109 */
set_excep_expr
	::= T_SETRAISES exception_list
	;


/* 110 */
exception_list
	::= T_LEFT_PARANTHESIS scoped_names T_RIGHT_PARANTHESIS
	;


/* 111 */
component
	::= component_dcl
	| component_forward_dcl
	;


/* 112 */
component_forward_dcl
	::= T_COMPONENT T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	;


/* 113 */
component_dcl
	::= component_header T_LEFT_CURLY_BRACKET component_body T_RIGHT_CURLY_BRACKET
	| component_header T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;


/* 114 */
component_header
	::= 
		T_COMPONENT T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_COMPONENT T_IDENTIFIER:id component_inheritance_spec
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_COMPONENT T_IDENTIFIER:id supported_interface_spec
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_COMPONENT T_IDENTIFIER:id component_inheritance_spec supported_interface_spec
		{:
			helper.registerTypeId(id);
		:}		
	;


/* 115 */
supported_interface_spec
	::= T_SUPPORTS interface_names
	;


/* 116 */
component_inheritance_spec
	::= T_COLON scoped_name
	;


/* 117 */
component_body
	::= component_export
	| component_export component_body
	;


/* 118 */
component_export
	::= provides_dcl T_SEMICOLON
	| uses_dcl T_SEMICOLON
	| emits_dcl T_SEMICOLON
	| publishes_dcl T_SEMICOLON
	| consumes_dcl T_SEMICOLON
	| attr_dcl T_SEMICOLON
	;


/* 119 */
provides_dcl
	::= T_PROVIDES interface_type T_IDENTIFIER
	;


/* 120 */
interface_type
	::= scoped_name
	| T_OBJECT
	;


/* 121 */
uses_dcl
	::= T_USES interface_type T_IDENTIFIER
	| T_USES T_MULTIPLE interface_type T_IDENTIFIER
	;


/* 122 */
emits_dcl
	::= T_EMITS scoped_name T_IDENTIFIER
	;


/* 123 */
publishes_dcl
	::= T_PUBLISHES scoped_name T_IDENTIFIER
	;


/* 124 */
consumes_dcl
	::= T_CONSUMES scoped_name T_IDENTIFIER
	;


/* 125 */
home_dcl
	::= home_header home_body
	;


/* 126 */
home_header
	::= 
		T_HOME T_IDENTIFIER:id 
			T_MANAGES scoped_name
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec T_MANAGES scoped_name
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			T_MANAGES scoped_name primary_key_spec
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec T_MANAGES scoped_name primary_key_spec
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			supported_interface_spec T_MANAGES scoped_name
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec supported_interface_spec T_MANAGES scoped_name
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			supported_interface_spec T_MANAGES scoped_name primary_key_spec
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec supported_interface_spec T_MANAGES scoped_name primary_key_spec 
		{:
			helper.registerTypeId(id);
		:}				
	;


/* 127 */
home_inheritance_spec
	::= T_COLON scoped_name
	;


/* 128 */
primary_key_spec
	::= T_PRIMARYKEY scoped_name
	;


/* 129 */
home_body
	::= T_LEFT_CURLY_BRACKET home_exports T_RIGHT_CURLY_BRACKET
	| T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;


/* 130 */
home_exports
	::= home_export
	| home_export home_exports
	;

home_export
	::= export
	| factory_dcl T_SEMICOLON
	| finder_dcl T_SEMICOLON
	;


/* 131 */
factory_dcl
	::= T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS raises_expr
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS raises_expr
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS
	;


/* 132 */
finder_dcl
	::= T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS raises_expr
	| T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS raises_expr
	| T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS
	| T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS
	;


/* 134 */
event
	::= event_dcl
	| event_abs_dcl
	| event_forward_dcl
	;


/* 135 */
event_forward_dcl
	::= 
		T_EVENTTYPE T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	| 
		T_ABSTRACT T_EVENTTYPE T_IDENTIFIER:id
		{:
			helper.registerForwardDclId(id);
		:}
	;


/* 136 */
event_abs_dcl
	::= 
		T_ABSTRACT T_EVENTTYPE T_IDENTIFIER:id 
		{:
			helper.registerTypeId(id);
		:}			 	
		T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	| 
		T_ABSTRACT T_EVENTTYPE T_IDENTIFIER:id value_inheritance_spec 
		{:
			helper.registerTypeId(id);
		:}				
		T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	;


/* 137 */
event_dcl
	::= event_header T_LEFT_CURLY_BRACKET value_elements T_RIGHT_CURLY_BRACKET
	| event_header T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;


/* 138 */
event_header
	::= 
		T_EVENTTYPE T_IDENTIFIER:id value_inheritance_spec 
		{:
			helper.registerTypeId(id);
		:}		
	| 
		T_CUSTOM T_EVENTTYPE T_IDENTIFIER:id value_inheritance_spec
		{:
			helper.registerTypeId(id);
		:}		
		
	| 
		T_EVENTTYPE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}				
	| 
		T_CUSTOM T_EVENTTYPE T_IDENTIFIER:id
		{:
			helper.registerTypeId(id);
		:}		
	;
