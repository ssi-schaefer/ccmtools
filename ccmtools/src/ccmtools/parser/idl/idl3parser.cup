
/** Preliminary Declarations Section */

import java.util.*;
import java.math.*;
import java_cup.runtime.*;

import ccmtools.metamodel.BaseIDL.*;
import ccmtools.metamodel.ComponentIDL.*;

parser code 
{:
	/**
	 * This method overides the original report_error() method
	 * and generates a useful error message.
	 */
	public void report_error(String message, Object info)
	{
		StringBuilder out = new StringBuilder();
		if(info instanceof Symbol)
		{
			Symbol s = (Symbol)info;
			out.append(ParserHelper.getInstance().getCurrentSourceFile());
			out.append(" line " + ParserHelper.getInstance().getCurrentSourceLine());
		}
		out.append(": " + message);
		throw new RuntimeException(out.toString());
	}
	
	public void report_fatal_error(String message, Object info)
	{
		System.exit(1);
	}
:};


/** Declaration of Terminals and Non Terminals Section */

terminal String		T_PRAGMA;
terminal String 		T_INCLUDE;

terminal 	T_LEFT_CURLY_BRACKET;
terminal 	T_RIGHT_CURLY_BRACKET;
terminal		T_LEFT_SQUARE_BRACKET;
terminal	 	T_RIGHT_SQUARE_BRACKET;
terminal		T_LEFT_PARANTHESIS;
terminal		T_RIGHT_PARANTHESIS;
terminal		T_COLON;
terminal 	T_COMMA;
terminal 	T_SEMICOLON;  
terminal	 	T_SCOPE;
terminal		T_EQUAL;
terminal 	T_SHIFTRIGHT;
terminal 	T_SHIFTLEFT;
terminal		T_PLUS_SIGN;
terminal 	T_MINUS_SIGN; 
terminal		T_ASTERISK; 
terminal		T_SOLIDUS;
terminal		T_PERCENT_SIGN;
terminal 	T_TILDE;
terminal 	T_VERTICAL_LINE; 
terminal		T_CIRCUMFLEX; 
terminal		T_AMPERSAND;
terminal		T_LESS_THAN_SIGN;
terminal 	T_GREATER_THAN_SIGN;

terminal		T_IMPORT;
terminal		T_CONST;
terminal		T_TYPEDEF;
terminal		T_FLOAT;
terminal		T_DOUBLE;
terminal		T_CHAR;
terminal		T_WCHAR;
terminal		T_FIXED;
terminal		T_BOOLEAN;
terminal		T_STRING;
terminal		T_WSTRING;
terminal		T_VOID;
terminal		T_UNSIGNED;
terminal		T_LONG;
terminal		T_SHORT;
terminal		T_FALSE;
terminal		T_TRUE;
terminal		T_STRUCT;
terminal		T_UNION;
terminal		T_SWITCH;
terminal		T_CASE;
terminal		T_DEFAULT;
terminal		T_ENUM;
terminal		T_IN;
terminal		T_OUT;
terminal		T_INTERFACE;
terminal		T_ABSTRACT;
terminal		T_VALUETYPE;
terminal		T_TRUNCATABLE;
terminal		T_SUPPORTS;
terminal		T_CUSTOM;
terminal		T_PUBLIC;
terminal		T_PRIVATE;
terminal		T_FACTORY;
terminal		T_NATIVE;
terminal		T_VALUEBASE;
terminal		T_TYPEID;
terminal		T_TYPEPREFIX;
terminal		T_GETRAISES;
terminal		T_SETRAISES;
terminal		T_LOCAL;

terminal		T_MODULE;
terminal		T_OCTET;
terminal		T_ANY;
terminal		T_SEQUENCE;
terminal		T_READONLY;
terminal		T_ATTRIBUTE;
terminal		T_EXCEPTION;
terminal		T_ONEWAY;
terminal		T_INOUT;
terminal		T_RAISES;
terminal		T_CONTEXT;

terminal		T_OBJECT;

terminal		T_COMPONENT;
terminal		T_PROVIDES;
terminal		T_USES;
terminal		T_MULTIPLE;
terminal		T_EMITS;
terminal		T_PUBLISHES;
terminal		T_CONSUMES;
terminal		T_HOME;
terminal		T_MANAGES;
terminal		T_PRIMARYKEY;
terminal		T_FINDER;
terminal		T_EVENTTYPE;

terminal 	String		T_IDENTIFIER;
terminal		Double		T_FLOATING_PT_LITERAL;
terminal		BigInteger	T_FIXED_PT_LITERAL;     
terminal		Integer		T_INTEGER_LITERAL;
terminal		Character 	T_CHARACTER_LITERAL;
terminal		Character 	T_WCHARACTER_LITERAL;
terminal  	String 		T_STRING_LITERAL;
terminal		String 		T_WSTRING_LITERAL;


/* 1 */
nonterminal	MContainer 		specification;
nonterminal List				definitions;  	// List<MConatined>
nonterminal	Object			definition;
nonterminal	MModuleDef		module;
nonterminal	MInterfaceDef	interface;
nonterminal		interface_dcl;
nonterminal		forward_dcl;
nonterminal		interface_header;
nonterminal		interface_body;
nonterminal		exports;
nonterminal		export;

/* 10 */
nonterminal		interface_inheritance_spec;	
nonterminal		interface_names;
nonterminal		scoped_names;
nonterminal MIDLType		scoped_name;
nonterminal		value;
nonterminal		value_forward_dcl;
nonterminal		value_box_dcl;
nonterminal		value_abs_dcl;
nonterminal		value_body;
nonterminal		value_dcl;
nonterminal		value_elements;
nonterminal		value_header;
nonterminal		value_inheritance_spec;
nonterminal		value_inheritance_bases;
nonterminal		value_names;

/* 20 */
nonterminal		value_name;			
nonterminal		value_element;
nonterminal		state_member;
nonterminal		init_dcl;
nonterminal		init_param_decls;
nonterminal		init_param_decl;
nonterminal		init_param_attribute;

nonterminal	MConstantDef		const_dcl;
nonterminal	MIDLType			const_type;
nonterminal	Object			const_exp;
/* 30 */
nonterminal	Object			or_expr;				
nonterminal	Object			xor_expr;
nonterminal	Object			and_expr;
nonterminal	Object			shift_expr;
nonterminal	Object			add_expr;
nonterminal	Object			mult_expr;
nonterminal	Object			unary_expr;
nonterminal	Object			primary_expr;
nonterminal	Object			literal; 			

/* 40 */
nonterminal	Integer			positive_int_const;

nonterminal	MIDLType			type_dcl;
nonterminal		type_spec;
nonterminal		simple_type_spec;
nonterminal		base_type_spec;
nonterminal		template_type_spec;
nonterminal		constr_type_spec;
nonterminal		declarators;

/* 50 */
nonterminal 		declarator;			
nonterminal		simple_declarator;
nonterminal		complex_declarator;
nonterminal	MPrimitiveDef		floating_pt_type;
nonterminal	MPrimitiveDef		integer_type;
nonterminal	MPrimitiveDef		signed_int;
nonterminal	MPrimitiveDef		signed_short_int;
nonterminal	MPrimitiveDef		signed_long_int;
nonterminal	MPrimitiveDef 		signed_longlong_int;
nonterminal	MPrimitiveDef		unsigned_int;
/* 60 */
nonterminal	MPrimitiveDef		unsigned_short_int;	
nonterminal	MPrimitiveDef		unsigned_long_int;
nonterminal	MPrimitiveDef		unsigned_longlong_int;
nonterminal	MPrimitiveDef		char_type;
nonterminal	MPrimitiveDef		wide_char_type;
nonterminal	MPrimitiveDef		boolean_type;
nonterminal	MPrimitiveDef		octet_type;
nonterminal	MPrimitiveDef		any_type;
nonterminal	MPrimitiveDef		object_type;


nonterminal	MStructDef			struct_type;
/* 70 */
nonterminal		member_list;			
nonterminal		member;
nonterminal		union_type;
nonterminal		switch_type_spec;
nonterminal		switch_body;
nonterminal		case;
nonterminal		case_label;
nonterminal		element_spec;
nonterminal	MEnumDef				enum_type;
nonterminal	List					enumerators;
nonterminal	String				enumerator;

/* 80 */
nonterminal	MSequenceDef			sequence_type;		
nonterminal	MStringDef			string_type;
nonterminal	MWstringDef			wide_string_type;
nonterminal		array_declarator;
nonterminal List<Integer>		fixed_array_sizes;
nonterminal	Integer				fixed_array_size;
nonterminal		attr_dcl;
nonterminal		except_dcl;
nonterminal		members;
nonterminal		op_dcl;
nonterminal		op_attribute;
nonterminal		op_type_spec;

/* 90 */
nonterminal		parameter_dcls;		
nonterminal		param_dcls;
nonterminal		param_dcl;
nonterminal		param_attribute;
nonterminal		raises_expr;
nonterminal		context_expr;
nonterminal		string_literals;
nonterminal		T_string_literal;
nonterminal		T_wstring_literal;
nonterminal		param_type_spec;
nonterminal		fixed_pt_type;
nonterminal	MFixedDef			fixed_pt_const_type;
nonterminal		value_base_type;
nonterminal		constr_forward_decl;

/* 100 */
nonterminal		import_dcl;				
nonterminal		imported_scope;
nonterminal		type_id_dcl;
nonterminal		type_prefix_dcl;
nonterminal		readonly_attr_spec;
nonterminal		readonly_attr_declarator;
nonterminal		simple_declarators;
nonterminal		attr_spec;
nonterminal		attr_declarator;
nonterminal		attr_raises_expr;
nonterminal		get_excep_expr;
nonterminal		set_excep_expr;

/* 110 */
nonterminal		exception_list;		
nonterminal		component;
nonterminal		component_forward_dcl;
nonterminal		component_dcl;
nonterminal		component_header;
nonterminal		supported_interface_spec;
nonterminal		component_inheritance_spec;
nonterminal		component_body;
nonterminal		component_export;
nonterminal		provides_dcl;

/* 120 */
nonterminal		interface_type;		
nonterminal		uses_dcl;
nonterminal		emits_dcl;
nonterminal		publishes_dcl;
nonterminal		consumes_dcl;
nonterminal		home_dcl;
nonterminal		home_header;
nonterminal		home_inheritance_spec;
nonterminal		primary_key_spec;
nonterminal		home_body;

/* 130 */
nonterminal		home_exports;		
nonterminal		home_export;
nonterminal		factory_dcl;
nonterminal		finder_dcl;
nonterminal		event;
nonterminal		event_forward_dcl;
nonterminal		event_abs_dcl;
nonterminal		event_dcl;
nonterminal		event_header;



/** Precedence and Associatively of Terminals Section */


/** Grammar Section */

start with specification;

/* 1 */
specification 
	::= 
		definitions:l
		{:
			ParserHelper.getInstance().getLogger().fine("1: ");
			MContainer container = new MContainerImpl();
			container.setContentss(l);
			
			RESULT = container;
		:}
	;
		
						
/* 2 */	
definitions 
	::=
		definition:d
		{:
			ParserHelper.getInstance().getLogger().fine("2: definition");
			List l = new ArrayList();
			l.add(d);
			RESULT = l;
		:}
	| 
		definition:d definitions	:l
		{:
			ParserHelper.getInstance().getLogger().fine("2: definition definitions");
			if(d != null)
			{
				l.add(d);
			}
			else
			{
				// processed some T_INCLUDE or T_PRAGMA lines
			}
			RESULT = l;
		:}
	;


definition 
	::=	
		T_INCLUDE
	|	
		T_PRAGMA
	|	
		type_dcl:t T_SEMICOLON
		{:
			RESULT = t;
		:}
	| 	
		const_dcl:c T_SEMICOLON
		{:
			ParserHelper.getInstance().getLogger().fine("2b: const_dcl");
			RESULT = c;
		:}
	| 	
		except_dcl T_SEMICOLON
	| 	
		interface T_SEMICOLON
	| 	
		module T_SEMICOLON
	| 	
		value T_SEMICOLON
	| 	
		type_id_dcl T_SEMICOLON
	| 	
		type_prefix_dcl T_SEMICOLON
	| 	
		event T_SEMICOLON
	| 	
		component T_SEMICOLON
	| 	
		home_dcl T_SEMICOLON
	| 	
		import_dcl T_SEMICOLON
	;

		
/* 3 */
module
	::= 
		T_MODULE T_IDENTIFIER:id 
		T_LEFT_CURLY_BRACKET 
		{:
			ParserHelper.getInstance().getScope().pushModule(id);
		:}
		definitions 
		T_RIGHT_CURLY_BRACKET
		{:
			ParserHelper.getInstance().getScope().popModule();
		:}
	;
	
	
/* 4 */	
interface
	::= 	interface_dcl
	| forward_dcl
 	;
	
	
/* 5 */
interface_dcl
	::= interface_header T_LEFT_CURLY_BRACKET interface_body T_RIGHT_CURLY_BRACKET
	;
	
	
/* 6 */
forward_dcl
	::= 
		T_INTERFACE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	| 
		T_ABSTRACT T_INTERFACE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	| 
		T_LOCAL T_INTERFACE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	;
	
	
/* 7 */
interface_header
	::= 
		T_INTERFACE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}	
	| 	
		T_INTERFACE T_IDENTIFIER:id
		 interface_inheritance_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_ABSTRACT T_INTERFACE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_ABSTRACT T_INTERFACE T_IDENTIFIER:id 
		interface_inheritance_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_LOCAL T_INTERFACE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_LOCAL T_INTERFACE T_IDENTIFIER:id
		interface_inheritance_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	; 


/* 8 */
interface_body
	::= /*empty*/
	| exports
	;

exports
	::= export
	| export exports
	;


/* 9 */
export
	::= type_dcl T_SEMICOLON
	| const_dcl T_SEMICOLON 
	| except_dcl T_SEMICOLON
	| attr_dcl T_SEMICOLON
	| op_dcl T_SEMICOLON 
	| type_id_dcl T_SEMICOLON
	| type_prefix_dcl T_SEMICOLON
	;


/* 10 */
/* 11 */
interface_inheritance_spec
	::= T_COLON interface_names
	;

interface_names
	::= scoped_names
	;

scoped_names
	::= scoped_name
	| scoped_name T_COMMA scoped_names
	;


/* 12 */
scoped_name
	::= T_IDENTIFIER
	| T_SCOPE T_IDENTIFIER
	| scoped_name T_SCOPE T_IDENTIFIER
	;


/* 13 */
value
	::= value_dcl
	| value_abs_dcl
	| value_box_dcl
	| value_forward_dcl
	;


/* 14 */
value_forward_dcl
	::= 
		T_VALUETYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
		
	| 
		T_ABSTRACT T_VALUETYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	;


/* 15 */
value_box_dcl
	::= 
		T_VALUETYPE T_IDENTIFIER:id
	 	type_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	;


/* 16 */
value_abs_dcl
	::= 
		T_ABSTRACT T_VALUETYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	 	T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	| 
		T_ABSTRACT T_VALUETYPE T_IDENTIFIER:id 
			value_inheritance_spec 
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
		T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	;

value_body
	::= /*empty*/
	| exports
	;


/* 17 */
value_dcl
	::= value_header T_LEFT_CURLY_BRACKET value_elements T_RIGHT_CURLY_BRACKET
	| value_header T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;

value_elements
	::= value_element
	| value_element value_elements
	;


/* 18 */
value_header
	::= 
		T_VALUETYPE T_IDENTIFIER:id 	value_inheritance_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_CUSTOM T_VALUETYPE T_IDENTIFIER:id 
			value_inheritance_spec		
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}
	| 
		T_VALUETYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_CUSTOM T_VALUETYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}			
	;


/* 19 */
value_inheritance_spec
	::= T_COLON value_inheritance_bases
	| T_COLON value_inheritance_bases T_SUPPORTS interface_names 
	| T_SUPPORTS interface_names
	;


value_inheritance_bases
	::= value_name
	| value_name T_COMMA value_names
	| T_TRUNCATABLE value_name
	| T_TRUNCATABLE value_name T_COMMA value_names
	;

value_names
	::= scoped_names
	;


/* 20 */
value_name
	::= scoped_name
	;


/* 21 */
value_element
	::= export
	| state_member
	| init_dcl
	;


/* 22 */
state_member
	::= T_PUBLIC type_spec declarators T_SEMICOLON
	| T_PRIVATE type_spec declarators T_SEMICOLON
	;


/* 23 */
init_dcl
	::= T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS T_SEMICOLON
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS T_SEMICOLON
	;


/* 24 */
init_param_decls
	::= init_param_decl
	| init_param_decl T_COMMA init_param_decls
	;


/* 25 */
init_param_decl
	::= init_param_attribute param_type_spec simple_declarator
	;


/* 26 */
init_param_attribute
	::= T_IN
	;


/* 27 */
const_dcl
	::= 
		T_CONST const_type:t T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	 	T_EQUAL const_exp:e
	 	{:
	 		ParserHelper.getInstance().getLogger().fine("27: T_EQUAL const_exp = " + e);
	 		MConstantDef constant = new MConstantDefImpl();
	 		constant.setIdentifier(id);
			constant.setSourceFile(ParserHelper.getInstance().getCurrentSourceFile());
			if(t instanceof MPrimitiveDef)
			{
				MPrimitiveDef primitive = (MPrimitiveDef)t;
				constant.setIdlType(t);
				if(primitive.getKind() == MPrimitiveKind.PK_SHORT 
					|| primitive.getKind() == MPrimitiveKind.PK_USHORT)
				{
					short i = (short)(((Integer)e).intValue());
					constant.setConstValue(new Short(i));
				}
				else if(primitive.getKind() == MPrimitiveKind.PK_LONG 
					|| primitive.getKind() == MPrimitiveKind.PK_ULONG)
				{
					constant.setConstValue((Integer)e);				
				}
				else if(primitive.getKind() == MPrimitiveKind.PK_LONGLONG 
					|| primitive.getKind() == MPrimitiveKind.PK_ULONGLONG)
				{
					long l = (((Integer)e).intValue());
					constant.setConstValue(new Long(l));		
				}
				else if(primitive.getKind() == MPrimitiveKind.PK_FLOAT)
				{
					float f = (float)((Double)e).doubleValue();
					constant.setConstValue(new Float(f));				
				}				
				else if(primitive.getKind() == MPrimitiveKind.PK_DOUBLE)
				{
					constant.setConstValue((Double)e);				
				}				
				else if(primitive.getKind() == MPrimitiveKind.PK_LONGDOUBLE)
				{
					constant.setConstValue((Double)e);				
				}				
				else if(primitive.getKind() == MPrimitiveKind.PK_CHAR
					|| primitive.getKind() == MPrimitiveKind.PK_WCHAR)
				{
					constant.setConstValue((Character)e);				
				}	
				else if(primitive.getKind() == MPrimitiveKind.PK_OCTET)
				{
					constant.setConstValue((Integer)e);				
				}	
				else if(primitive.getKind() == MPrimitiveKind.PK_BOOLEAN)
				{
					constant.setConstValue((Boolean)e);				
				}									
			}
			else if(t instanceof MStringDef)
			{
				MStringDef str = (MStringDef)t;
				constant.setIdlType(str);
				constant.setConstValue((String)e);
			}
			else if(t instanceof MWstringDef)
			{
				MWstringDef str = (MWstringDef)t;
				constant.setIdlType(str);
				constant.setConstValue((String)e);			
			}
			RESULT = constant;
	 	:}
	;


/* 28 */
const_type
	::= 
		integer_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: integer_type = " + t);
			RESULT = t;
		:}
	| 
		char_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: char_type = " + t);		
			RESULT = t;
		:}
	| 
		wide_char_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: wide_char_type = " + t);		
			RESULT = t;
		:}
	| 
		boolean_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: boolean_type = " + t);		
			RESULT = t;
		:}
	| 
		floating_pt_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: floating_pt_type = " + t);		
			RESULT = t;
		:}		
	| 
		string_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: string_type = " + t);
			RESULT = t;
		:}		
	| 
		wide_string_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: wide_string_type = " + t);		
			RESULT = t;
		:}
	| 
		fixed_pt_const_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: fixed_pt_const_type = " + t);		
			RESULT = t;
		:}
	| 	
		scoped_name:t 
		{:
			ParserHelper.getInstance().getLogger().fine("28: scoped_name = " + t);
			RESULT = t;
		:}
	| 
		octet_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("28: octet_type = " + t);
			RESULT = t;
		:}
	;


/* 29 */
const_exp
	::= or_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("29: or_expr = " + e);
			RESULT = e;
		:}
	;


/* 30 */
or_expr
	::= 
		xor_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("30: xor_expr = " + e);
			RESULT = e;		
		:}
	| 
		or_expr T_VERTICAL_LINE xor_expr
	;


/* 31 */
xor_expr
	::= 
		and_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("31: and_expr = " + e);
			RESULT = e;
		:}
	| 
		xor_expr T_CIRCUMFLEX and_expr
	;


/* 32 */
and_expr
	::= 
		shift_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("32: and_expr = " + e);
			RESULT = e;
		:}
	| 
		and_expr T_AMPERSAND shift_expr
	;


/* 33 */
shift_expr
	::= 
		add_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("33: add_expr = " + e);
			RESULT = e;
		:}
	| 
		shift_expr T_SHIFTRIGHT add_expr
	| 
		shift_expr T_SHIFTLEFT add_expr
	;


/* 34 */
add_expr
	::= 
		mult_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("34: mult_expr = " + e);
			RESULT = e;
		:}
	| 
		add_expr T_PLUS_SIGN mult_expr
	| 
		add_expr T_MINUS_SIGN mult_expr
	;


/* 35 */
mult_expr
	::= 
		unary_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("35: unary_expr = " + e);
			RESULT = e;
		:}
	| 
		mult_expr T_ASTERISK unary_expr
	| 
		mult_expr T_SOLIDUS unary_expr
	| 
		mult_expr T_PERCENT_SIGN unary_expr
	;


/* 36 */
/* 37 */
unary_expr
	::= 
		T_MINUS_SIGN primary_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("36|37: T_MINUS_SIGN primary_expr = " + e);
			if(e instanceof Integer)
			{
				RESULT = new Integer(-((Integer)e).intValue());
			}
			else if(e instanceof Double)
			{
				RESULT = new Double(-((Double)e).doubleValue());
			}
			else
			{
				RESULT = e; //????
			}
		:}
	| 
		T_PLUS_SIGN primary_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("36|37: T_PLUS_SIGN primary_expr = " + e);		
			RESULT = e;
		:}
	| 
		T_TILDE primary_expr:e
	| 
		primary_expr:e
		{:
			ParserHelper.getInstance().getLogger().fine("36|37: primary_expr = " + e);		
			RESULT = e;
		:}
	;


/* 38 */
primary_expr
	::= 
		scoped_name
	| 
		literal:l
		{:
			ParserHelper.getInstance().getLogger().fine("38: literal = " + l);		
			RESULT = l;
		:}
	| 
		T_LEFT_PARANTHESIS const_exp T_RIGHT_PARANTHESIS
	;


/* 39 */
/* 40 */
literal
	::= 
		T_INTEGER_LITERAL:i
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_INTEGER_LITERAL = " + i);
			RESULT = i;
		:}
	| 
		T_string_literal:s
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_string_literal = " + s);
			RESULT = s;
		:}
	| 
		T_wstring_literal:ws
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_wstring_literal = " + ws);			
			RESULT = ws;
		:}
	| 
		T_CHARACTER_LITERAL:c
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_CHARACTER_LITERAL = " + c);		
			RESULT = c;
		:}

	| 
		T_WCHARACTER_LITERAL:wc
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_WCHARACTER_LITERAL = " + wc);			
			RESULT = wc;
		:}	
	| 
		T_FIXED_PT_LITERAL:fp
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_FIXED_PT_LITERAL = " + fp);			
			RESULT = fp;
		:}		
	| 
		T_FLOATING_PT_LITERAL:f
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_FLOATING_PT_LITERAL = " + f);			
			RESULT = f;
		:}		
	| 
		T_TRUE /*boolean_literal*/
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_TRUE");			
			RESULT = Boolean.TRUE;
		:}
	| 
		T_FALSE /*boolean_literal*/
		{:
			ParserHelper.getInstance().getLogger().fine("39|40: T_FALSE");			
			RESULT = Boolean.FALSE;
		:}
	;


/* 41 */
positive_int_const
	::= 
		const_exp:e
		{:
			ParserHelper.getInstance().getLogger().fine("41: const_exp = " + e);		
			RESULT = (Integer)e;
		:}
	;


/* 42 */
/* 43 */
type_dcl
	::= 
		T_TYPEDEF type_spec declarators
	| 
		struct_type
	| 
		union_type
	| 
		enum_type:t
		{:
			ParserHelper.getInstance().getLogger().fine("42: enum_type = " + t);	
			RESULT = t;
		:}
	| 
		T_NATIVE simple_declarator
	| 
		constr_forward_decl
	;


/* 44 */
type_spec
	::= simple_type_spec
	| constr_type_spec 
	;


/* 45 */
simple_type_spec
	::= base_type_spec
	| template_type_spec
	| scoped_name:sn
	;


/* 46 */
base_type_spec
	::= floating_pt_type
	| integer_type
	| char_type
	| wide_char_type
	| boolean_type
	| octet_type
	| any_type
	| object_type
	| value_base_type
	;


/* 47 */
template_type_spec
	::= sequence_type
	| string_type
	| wide_string_type
	| fixed_pt_type
	;


/* 48 */
constr_type_spec
	::= struct_type
	| union_type
	| enum_type
	;


/* 49 */
declarators
	::= declarator
	| declarator:d T_COMMA declarators:l
	;


/* 50 */
declarator
	::= simple_declarator
	| complex_declarator
	;

/* 51 */
simple_declarator
	::= 
		T_IDENTIFIER:id
//		{:
//			ParserHelper.getInstance().registerTypeId(id);
//		:}
	;


/* 52 */
complex_declarator
	::= array_declarator
	;


/* 53 */
floating_pt_type
	::= 
		T_FLOAT
		{:
			ParserHelper.getInstance().getLogger().fine("53: T_FLOAT");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_FLOAT);
			RESULT = s;
		:}	
	| 
		T_DOUBLE
		{:
			ParserHelper.getInstance().getLogger().fine("53: T_DOUBLE");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_DOUBLE);
			RESULT = s;
		:}			
	| 
		T_LONG T_DOUBLE
		{:
			ParserHelper.getInstance().getLogger().fine("53: T_LONG T_DOUBLE");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_LONGDOUBLE);
			RESULT = s;
		:}			
	;


/* 54 */
integer_type
	::= 
		signed_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("54: signed_int = " + i);			
			RESULT = i;
		:}
	| 
		unsigned_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("54: unsigned_int = " + i);					
			RESULT = i;
		:}
	;


/* 55 */
signed_int
	::= 
		signed_long_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("55: signed_long_int = " + i);					
			RESULT = i;
		:}
	| 
		signed_short_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("55: signed_short_int = " + i);					
			RESULT = i;
		:}
	| 
		signed_longlong_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("55: signed_longlong_int = " + i);	
			RESULT = i;		
		:}
	;


/* 56 */
signed_short_int
	::= 
		T_SHORT 
		{:
			ParserHelper.getInstance().getLogger().fine("56: T_SHORT");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_SHORT);
			RESULT = s;
		:}
	;


/* 57 */
signed_long_int
	::= 
		T_LONG
		{:
			ParserHelper.getInstance().getLogger().fine("57: T_LONG");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_LONG);
			RESULT = s;
		:}		
	;


/* 58 */
signed_longlong_int
	::= 
		T_LONG T_LONG
		{:
			ParserHelper.getInstance().getLogger().fine("58: T_LONG T_LONG");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_LONGLONG);
			RESULT = s;
		:}
	;


/* 59 */
unsigned_int
	::= 
		unsigned_long_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("59: unsigned_long_int = " + i);			
			RESULT = i;
		:}
		
	| 
		unsigned_short_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("59: unsigned_short_int = " + i);					
			RESULT = i;
		:}
		
	| 
		unsigned_longlong_int:i
		{:
			ParserHelper.getInstance().getLogger().fine("59: unsigned_longlong_int = " + i);					
			RESULT = i;
		:}		
	;


/* 60 */
unsigned_short_int
	::= 
		T_UNSIGNED T_SHORT 
		{:
			ParserHelper.getInstance().getLogger().fine("60: T_UNSIGNED T_SHORT");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_USHORT);
			RESULT = s;
		:}
	;


/* 61 */
unsigned_long_int
	::= 
		T_UNSIGNED T_LONG
		{:
			ParserHelper.getInstance().getLogger().fine("61: T_UNSIGNED T_LONG");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_ULONG);
			RESULT = s;
		:}		
	;

/* 62 */
unsigned_longlong_int
	::= 
		T_UNSIGNED T_LONG T_LONG
		{:
			ParserHelper.getInstance().getLogger().fine("62: T_UNSIGNED T_LONG T_LONG");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_ULONGLONG);
			RESULT = s;
		:}	
	;


/* 63 */
char_type
	::= 
		T_CHAR
		{:
			ParserHelper.getInstance().getLogger().fine("63: T_CHAR");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_CHAR);
			RESULT = s;	
		:}
	;


/* 64 */
wide_char_type
	::= 	
		T_WCHAR
		{:
			ParserHelper.getInstance().getLogger().fine("64: T_WCHAR");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_WCHAR);
			RESULT = s;	
		:}
	;


/* 65 */
boolean_type
	::= 		
		T_BOOLEAN
		{:
			ParserHelper.getInstance().getLogger().fine("65: T_BOOLEAN");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_BOOLEAN);
			RESULT = s;	
		:}		
	;


/* 66 */
octet_type
	::= 
		T_OCTET
		{:
			ParserHelper.getInstance().getLogger().fine("66: T_OCTET");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_OCTET);
			RESULT = s;	
		:}				
	;


/* 67 */
any_type
	::= 
		T_ANY
		{:
			ParserHelper.getInstance().getLogger().fine("67: T_ANY");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_ANY);
			RESULT = s;	
		:}				
	;


/* 68 */
object_type
	::= 
		T_OBJECT
		{:
			ParserHelper.getInstance().getLogger().fine("68: T_OBJECT");			
			MPrimitiveDef s = new MPrimitiveDefImpl();
			s.setKind(MPrimitiveKind.PK_OBJREF);
			RESULT = s;	
		:}				
	;


/* 69 */
struct_type
	::= 
		T_STRUCT T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	 	T_LEFT_CURLY_BRACKET member_list T_RIGHT_CURLY_BRACKET
	;


/* 70 */
member_list
	::= member
	| member member_list
	;


/* 71 */
member
	::= type_spec declarators T_SEMICOLON
	;


/* 72 */
union_type
	::= 	
		T_UNION T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
		T_SWITCH T_LEFT_PARANTHESIS switch_type_spec 
		T_RIGHT_PARANTHESIS T_LEFT_CURLY_BRACKET switch_body T_RIGHT_CURLY_BRACKET
	; 


/* 73 */
switch_type_spec
	::= integer_type
	| char_type
	| boolean_type
	| enum_type
	| scoped_name
	;


/* 74 */
switch_body
	::= case
	| case switch_body
	;


/* 75 */
case	
	::= case_label case
	| case_label element_spec T_SEMICOLON
	| case_label T_PRAGMA element_spec T_SEMICOLON   /* New */
	;


/* 76 */
case_label
	::= T_CASE const_exp T_COLON 
	| T_DEFAULT T_COLON
	;


/* 77 */
element_spec
	::= type_spec declarator
	;


/* 78 */
enum_type
	::= T_ENUM T_IDENTIFIER:id 
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
		T_LEFT_CURLY_BRACKET enumerators:l T_RIGHT_CURLY_BRACKET
		{:
			ParserHelper.getInstance().getLogger().fine("78: enumerators = " + l);	
			MEnumDef enumeration = new MEnumDefImpl();
			enumeration.setIdentifier(id);
			enumeration.setSourceFile(ParserHelper.getInstance().getCurrentSourceFile());
			if(l.size() > 0)
			{
				Collections.reverse(l);
				enumeration.setMembers(l);
			}
			else
			{
				// error
			}			
			RESULT = enumeration;
		:}
	;

enumerators
	::= 
		enumerator:e
		{:
			List l = new ArrayList();
			l.add(e);
			RESULT = l;
		:}
	| 
		enumerator:e T_COMMA enumerators:l
		{:
			l.add(e);
			RESULT = l;
		:}
	;


/* 79 */
enumerator
	::= 
		T_IDENTIFIER:id
		{:
			RESULT = id;
		:}
	;


/* 80 */
sequence_type
	::= T_SEQUENCE T_LESS_THAN_SIGN simple_type_spec T_COMMA positive_int_const T_GREATER_THAN_SIGN
	| T_SEQUENCE T_LESS_THAN_SIGN simple_type_spec T_GREATER_THAN_SIGN
	;


/* 81 */
string_type
	::= 
		T_STRING T_LESS_THAN_SIGN positive_int_const:b T_GREATER_THAN_SIGN
		{:
			ParserHelper.getInstance().getLogger().fine("81: T_STRING positive_int_const = " + b);			
			MStringDef s = new MStringDefImpl();			
			s.setBound(new Long(b.intValue()));
			RESULT = s;					
		:}
	| 
		T_STRING
		{:
			ParserHelper.getInstance().getLogger().fine("81: T_STRING");			
			MStringDef s = new MStringDefImpl();			
			RESULT = s;			
		:}
	;


/* 82 */
wide_string_type
	::= 
		T_WSTRING T_LESS_THAN_SIGN positive_int_const:b T_GREATER_THAN_SIGN
		{:
			ParserHelper.getInstance().getLogger().fine("82: T_WSTRING positive_int_const = " + b);			
			MWstringDef s = new MWstringDefImpl();			
			s.setBound(new Long(b.intValue()));
			RESULT = s;					
		:}		
	| 
		T_WSTRING
		{:
			ParserHelper.getInstance().getLogger().fine("82: T_STRING");			
			MWstringDef s = new MWstringDefImpl();			
			RESULT = s;			
		:}		
	;


/* 83 */
array_declarator
	::= T_IDENTIFIER:id
//		{:
//			ParserHelper.getInstance().registerTypeId(id);
//		:}
		fixed_array_sizes
	;

fixed_array_sizes
	::= fixed_array_size
	| fixed_array_size fixed_array_sizes
	;


/* 84 */
fixed_array_size
	::= T_LEFT_SQUARE_BRACKET positive_int_const T_RIGHT_SQUARE_BRACKET
	;


/* 85 */
attr_dcl
	::= readonly_attr_spec
	| attr_spec
	;


/* 86 */
except_dcl
	::= 
		T_EXCEPTION T_IDENTIFIER:id 
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}			 	
		T_LEFT_CURLY_BRACKET members T_RIGHT_CURLY_BRACKET
	;

members
	::= /*empty*/
	| member members
	;


/* 87 */
op_dcl
	::= op_attribute op_type_spec T_IDENTIFIER parameter_dcls raises_expr context_expr
	| op_attribute op_type_spec T_IDENTIFIER parameter_dcls context_expr
	| op_attribute op_type_spec T_IDENTIFIER parameter_dcls raises_expr
	| op_attribute op_type_spec T_IDENTIFIER parameter_dcls
	;


/* 88 */
op_attribute
	::= /*empty*/
	| T_ONEWAY
	;


/* 89 */
op_type_spec	
	::= param_type_spec
	| T_VOID
	;


/* 90 */
parameter_dcls
	::= T_LEFT_PARANTHESIS param_dcls T_RIGHT_PARANTHESIS
	| T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS
	;

param_dcls
	::= param_dcl
	| param_dcl T_COMMA param_dcls
	;


/* 91 */
param_dcl
	::= param_attribute param_type_spec simple_declarator
	;


/* 92 */
param_attribute
	::= T_IN
	| T_OUT
	| T_INOUT
	;


/* 93 */
raises_expr
	::= T_RAISES T_LEFT_PARANTHESIS scoped_names T_RIGHT_PARANTHESIS
	;

/* 94 */
context_expr
	::= T_CONTEXT T_LEFT_PARANTHESIS string_literals T_RIGHT_PARANTHESIS
	;

string_literals
	::= 
		T_string_literal
	| 
		T_string_literal T_COMMA string_literals
	;

T_string_literal
	::= 
		T_STRING_LITERAL:s
		{:
			ParserHelper.getInstance().getLogger().fine("94: T_STRING_LITERAL = " + s);	
			RESULT = s;
		:}
	| 
		T_STRING_LITERAL T_string_literal
	;

T_wstring_literal
	::= 
		T_WSTRING_LITERAL:s
		{:
			ParserHelper.getInstance().getLogger().fine("94: T_WSTRING_LITERAL = " + s);	
			RESULT = s;
		:}
	| 
		T_WSTRING_LITERAL T_wstring_literal
	;


/* 95 */
param_type_spec
	::= base_type_spec
	| template_type_spec
	| scoped_name
	;


/* 96 */
fixed_pt_type
	::= T_FIXED T_LESS_THAN_SIGN positive_int_const T_COMMA T_INTEGER_LITERAL T_GREATER_THAN_SIGN
	;


/* 97 */
fixed_pt_const_type
	::= T_FIXED
	;


/* 98 */
value_base_type
	::= T_VALUEBASE
	;


/* 99 A (from 2.4, not in CCM) */
constr_forward_decl
	::= 
		T_STRUCT T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	| 
		T_UNION T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	;


/* 99 */
/* 100 */
import_dcl
	::= T_IMPORT imported_scope
	;

imported_scope
	::= scoped_name
	| T_string_literal
	;


/* 101 */
type_id_dcl
	::= T_TYPEID scoped_name T_string_literal
	;


/* 102 */
type_prefix_dcl
	::= T_TYPEPREFIX scoped_name T_string_literal
	;


/* 103 */
readonly_attr_spec
	::= T_READONLY T_ATTRIBUTE param_type_spec readonly_attr_declarator
	;


/* 104 */
readonly_attr_declarator
	::= simple_declarator raises_expr
	| simple_declarators
	;

simple_declarators
	::= simple_declarator
	| simple_declarator T_COMMA simple_declarators
	;


/* 105 */
attr_spec
	::= T_ATTRIBUTE param_type_spec attr_declarator
	;


/* 106 */
attr_declarator
	::= simple_declarator attr_raises_expr
	| simple_declarators
	;


/* 107 */
attr_raises_expr
	::= get_excep_expr
	| set_excep_expr
	| get_excep_expr set_excep_expr
	| set_excep_expr get_excep_expr
	;


/* 108 */
get_excep_expr
	::= T_GETRAISES exception_list
	;


/* 109 */
set_excep_expr
	::= T_SETRAISES exception_list
	;


/* 110 */
exception_list
	::= T_LEFT_PARANTHESIS scoped_names T_RIGHT_PARANTHESIS
	;


/* 111 */
component
	::= component_dcl
	| component_forward_dcl
	;


/* 112 */
component_forward_dcl
	::= T_COMPONENT T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	;


/* 113 */
component_dcl
	::= component_header T_LEFT_CURLY_BRACKET component_body T_RIGHT_CURLY_BRACKET
	| component_header T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;


/* 114 */
component_header
	::= 
		T_COMPONENT T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_COMPONENT T_IDENTIFIER:id component_inheritance_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_COMPONENT T_IDENTIFIER:id supported_interface_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_COMPONENT T_IDENTIFIER:id component_inheritance_spec supported_interface_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	;


/* 115 */
supported_interface_spec
	::= T_SUPPORTS interface_names
	;


/* 116 */
component_inheritance_spec
	::= T_COLON scoped_name
	;


/* 117 */
component_body
	::= component_export
	| component_export component_body
	;


/* 118 */
component_export
	::= provides_dcl T_SEMICOLON
	| uses_dcl T_SEMICOLON
	| emits_dcl T_SEMICOLON
	| publishes_dcl T_SEMICOLON
	| consumes_dcl T_SEMICOLON
	| attr_dcl T_SEMICOLON
	;


/* 119 */
provides_dcl
	::= T_PROVIDES interface_type T_IDENTIFIER
	;


/* 120 */
interface_type
	::= scoped_name
	| T_OBJECT
	;


/* 121 */
uses_dcl
	::= T_USES interface_type T_IDENTIFIER
	| T_USES T_MULTIPLE interface_type T_IDENTIFIER
	;


/* 122 */
emits_dcl
	::= T_EMITS scoped_name T_IDENTIFIER
	;


/* 123 */
publishes_dcl
	::= T_PUBLISHES scoped_name T_IDENTIFIER
	;


/* 124 */
consumes_dcl
	::= T_CONSUMES scoped_name T_IDENTIFIER
	;


/* 125 */
home_dcl
	::= home_header home_body
	;


/* 126 */
home_header
	::= 
		T_HOME T_IDENTIFIER:id 
			T_MANAGES scoped_name
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec T_MANAGES scoped_name
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			T_MANAGES scoped_name primary_key_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec T_MANAGES scoped_name primary_key_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			supported_interface_spec T_MANAGES scoped_name
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec supported_interface_spec T_MANAGES scoped_name
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_HOME T_IDENTIFIER:id 
			supported_interface_spec T_MANAGES scoped_name primary_key_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_HOME T_IDENTIFIER:id 
			home_inheritance_spec supported_interface_spec T_MANAGES scoped_name primary_key_spec 
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	;


/* 127 */
home_inheritance_spec
	::= T_COLON scoped_name
	;


/* 128 */
primary_key_spec
	::= T_PRIMARYKEY scoped_name
	;


/* 129 */
home_body
	::= T_LEFT_CURLY_BRACKET home_exports T_RIGHT_CURLY_BRACKET
	| T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;


/* 130 */
home_exports
	::= home_export
	| home_export home_exports
	;

home_export
	::= export
	| factory_dcl T_SEMICOLON
	| finder_dcl T_SEMICOLON
	;


/* 131 */
factory_dcl
	::= T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS raises_expr
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS raises_expr
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS
	| T_FACTORY T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS
	;


/* 132 */
finder_dcl
	::= T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS raises_expr
	| T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS raises_expr
	| T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS init_param_decls T_RIGHT_PARANTHESIS
	| T_FINDER T_IDENTIFIER T_LEFT_PARANTHESIS T_RIGHT_PARANTHESIS
	;


/* 134 */
event
	::= event_dcl
	| event_abs_dcl
	| event_forward_dcl
	;


/* 135 */
event_forward_dcl
	::= 
		T_EVENTTYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	| 
		T_ABSTRACT T_EVENTTYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerForwardDclId(id);
		:}
	;


/* 136 */
event_abs_dcl
	::= 
		T_ABSTRACT T_EVENTTYPE T_IDENTIFIER:id 
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}			 	
		T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	| 
		T_ABSTRACT T_EVENTTYPE T_IDENTIFIER:id value_inheritance_spec 
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
		T_LEFT_CURLY_BRACKET value_body T_RIGHT_CURLY_BRACKET
	;


/* 137 */
event_dcl
	::= event_header T_LEFT_CURLY_BRACKET value_elements T_RIGHT_CURLY_BRACKET
	| event_header T_LEFT_CURLY_BRACKET T_RIGHT_CURLY_BRACKET
	;


/* 138 */
event_header
	::= 
		T_EVENTTYPE T_IDENTIFIER:id value_inheritance_spec 
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	| 
		T_CUSTOM T_EVENTTYPE T_IDENTIFIER:id value_inheritance_spec
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
		
	| 
		T_EVENTTYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}				
	| 
		T_CUSTOM T_EVENTTYPE T_IDENTIFIER:id
		{:
			ParserHelper.getInstance().registerTypeId(id);
		:}		
	;
