package ccmtools.generator.java.templates;

import java.util.Iterator;
import ccmtools.generator.java.metamodel.*;

public class ComponentDefAdapterFromCorbaTemplate
{
  protected static String nl;
  public static synchronized ComponentDefAdapterFromCorbaTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    ComponentDefAdapterFromCorbaTemplate result = new ComponentDefAdapterFromCorbaTemplate();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * This file was automatically generated by ";
  protected final String TEXT_2 = NL + " * <http://ccmtools.sourceforge.net>" + NL + " * DO NOT EDIT!" + NL + " */" + NL + "" + NL + "package ";
  protected final String TEXT_3 = ";" + NL + "" + NL + "import java.util.logging.Logger;" + NL + "" + NL + "import ccm.local.ServiceLocator;" + NL + "import ccm.local.Components.CCMException;     " + NL + "import ccm.remote.CCMSessionContainer;" + NL + "" + NL + "import org.omg.PortableServer.Servant;" + NL + "          ";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "public class ";
  protected final String TEXT_6 = "AdapterFromCorba " + NL + "     extends ";
  protected final String TEXT_7 = "POA" + NL + "{" + NL + "    /** Default logger instance */" + NL + "    private Logger logger = ServiceLocator.instance().getLogger();" + NL + "  " + NL + "    /** CCM session container instance */  " + NL + "    private CCMSessionContainer container;" + NL + "" + NL + "    /** Local component instance */" + NL + "    private ";
  protected final String TEXT_8 = " localComponent;" + NL + "        " + NL + "    /** References to CORBA facet adapters */";
  protected final String TEXT_9 = "    ";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = "   " + NL + "        " + NL + "    public ";
  protected final String TEXT_12 = "AdapterFromCorba(CCMSessionContainer container, ";
  protected final String TEXT_13 = NL + "        ";
  protected final String TEXT_14 = " localComponent)" + NL + "    {    " + NL + "        logger.fine(\"localComponent = \" + localComponent);" + NL + "        \tthis.container = container;" + NL + "        this.localComponent = localComponent;";
  protected final String TEXT_15 = "    ";
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = "                 " + NL + "    }" + NL + "    " + NL + "    /** " + NL + "     * Equivalent interface methods " + NL + "     */" + NL + "     ";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = NL + "     " + NL + "    /** CCMObject interface methods */" + NL + "    " + NL + "    public Components.CCMHome get_ccm_home ()" + NL + "    {" + NL + "        logger.fine(\"\");" + NL + "        return container.getCorbaHome();" + NL + "    }" + NL + "" + NL + "    public void configuration_complete ()" + NL + "    {" + NL + "        logger.fine(\"\");" + NL + "        try" + NL + "        {" + NL + "            localComponent.configuration_complete();" + NL + "        }" + NL + "        catch(Exception e)" + NL + "        {" + NL + "            e.printStackTrace();" + NL + "        }" + NL + "    }" + NL + "" + NL + "    public void remove ()" + NL + "    {" + NL + "        logger.fine(\"\");" + NL + "        //TODO" + NL + "    }" + NL + "    " + NL + "    " + NL + "    /** " + NL + "     * Navigation interface methods " + NL + "     */" + NL + "" + NL + "    public org.omg.CORBA.Object provide_facet (String name) " + NL + "        throws Components.InvalidName" + NL + "    {" + NL + "        logger.fine(\"\");\t" + NL + "        if(name == null)" + NL + "        {" + NL + "            throw new Components.InvalidName();" + NL + "        }";
  protected final String TEXT_20 = "        ";
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = NL + "        else" + NL + "        {" + NL + "            throw new Components.InvalidName();" + NL + "        }" + NL + "    }" + NL + "" + NL + "" + NL + "" + NL + "    /** " + NL + "     * Receptacle interface methods " + NL + "     */" + NL + "     " + NL + "    public Components.Cookie connect(String name, org.omg.CORBA.Object obj) " + NL + "        throws Components.InvalidName, " + NL + "        Components.InvalidConnection, " + NL + "        Components.AlreadyConnected, " + NL + "        Components.ExceededConnectionLimit" + NL + "    {" + NL + "        logger.fine(\"\");" + NL + "        //TODO" + NL + "        return null;" + NL + "    }" + NL + "" + NL + "    public void disconnect(String name, Components.Cookie ck) " + NL + "        throws Components.InvalidName, " + NL + "        Components.InvalidConnection, " + NL + "        Components.CookieRequired, " + NL + "        Components.NoConnection" + NL + "    {" + NL + "        logger.fine(\"\");" + NL + "        //TODO" + NL + "    }" + NL + "}";

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
     ComponentDef component = (ComponentDef) argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(component.generateCcmtoolsVersion());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(component.generateJavaRemoteNamespace());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(component.generateJavaImportStatements(component.generateJavaRemoteNamespace()));
    stringBuffer.append(TEXT_5);
    stringBuffer.append(component.getIdentifier());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(component.generateAbsoluteIdlName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(component.getIdentifier());
    stringBuffer.append(TEXT_8);
    
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();

    stringBuffer.append(TEXT_9);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(provides.generateCorbaFacetAdapterDeclaration());
    
}

    stringBuffer.append(TEXT_11);
    stringBuffer.append(component.getIdentifier());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(component.getIdentifier());
    stringBuffer.append(TEXT_14);
    
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();

    stringBuffer.append(TEXT_15);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(provides.generateCorbaFacetAdapterDeclarationInit());
    
}

    stringBuffer.append(TEXT_17);
    
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();

    stringBuffer.append(TEXT_18);
    stringBuffer.append(provides.generateEquivalentMethodAdapterFromCorba());
    
}

    stringBuffer.append(TEXT_19);
    		
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();

    stringBuffer.append(TEXT_20);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(provides.generateNavigationMethodAdapterFromCorba());
    
}

    stringBuffer.append(TEXT_22);
    return stringBuffer.toString();
  }
}
