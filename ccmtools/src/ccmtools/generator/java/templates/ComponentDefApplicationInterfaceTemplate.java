package ccmtools.generator.java.templates;

import java.util.Iterator;
import ccmtools.generator.java.metamodel.*;

public class ComponentDefApplicationInterfaceTemplate
{
  protected static String nl;
  public static synchronized ComponentDefApplicationInterfaceTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    ComponentDefApplicationInterfaceTemplate result = new ComponentDefApplicationInterfaceTemplate();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * This file was automatically generated by ";
  protected final String TEXT_2 = NL + " * <http://ccmtools.sourceforge.net>" + NL + " * DO NOT EDIT!" + NL + " */" + NL + "" + NL + "package ";
  protected final String TEXT_3 = ";" + NL + "                 " + NL + "public interface ";
  protected final String TEXT_4 = " " + NL + "    extends ccm.local.Components.SessionComponent" + NL + "{" + NL + "    /** Supported interface constants */" + NL + "    " + NL + "    " + NL + "    " + NL + "" + NL + "    /** Supported interface attributes */";
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = "    " + NL + "    " + NL + "    " + NL + "    /** Supported interface methods */";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = "    " + NL + "" + NL + "" + NL + "" + NL + "" + NL + "    /** Component attribute accessor methods */" + NL + "    ";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "    " + NL + "" + NL + "" + NL + "    /** Facet implementation factory methods */" + NL;
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = "    " + NL + "}";

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
     ComponentDef component = (ComponentDef) argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(component.generateCcmtoolsVersion());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(component.generateJavaNamespace());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(component.generateCcmIdentifier());
    stringBuffer.append(TEXT_4);
    
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();

    stringBuffer.append(TEXT_5);
    stringBuffer.append(attr.generateDeclaration());
    
	}
}

    stringBuffer.append(TEXT_6);
    
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getOperation().iterator(); j.hasNext();)
    {
    	OperationDef op = (OperationDef)j.next();

    stringBuffer.append(TEXT_7);
    stringBuffer.append(op.generateDeclaration());
    
	}
}

    stringBuffer.append(TEXT_8);
    
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();

    stringBuffer.append(TEXT_9);
    stringBuffer.append(attr.generateDeclaration());
    
}

    stringBuffer.append(TEXT_10);
    
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();

    stringBuffer.append(TEXT_11);
    stringBuffer.append(provides.generateEquivalentApplicationMethodDeclaration());
    
}

    stringBuffer.append(TEXT_12);
    return stringBuffer.toString();
  }
}
