package ccmtools.generator.java.templates;

import java.util.Iterator;
import ccmtools.generator.java.metamodel.*;

public class InterfaceDeclarationTemplate
{
  protected static String nl;
  public static synchronized InterfaceDeclarationTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    InterfaceDeclarationTemplate result = new InterfaceDeclarationTemplate();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * This file was automatically generated by ";
  protected final String TEXT_2 = NL + " * <http://ccmtools.sourceforge.net>" + NL + " * ";
  protected final String TEXT_3 = NL + " * DO NOT EDIT!" + NL + " */" + NL + "" + NL + "package ";
  protected final String TEXT_4 = ";" + NL + "                 " + NL + "import ccm.local.Components.*;" + NL + " " + NL + "/** " + NL + " * Java interface declaration (based on the corresponding IDL interface)." + NL + " */" + NL + "public interface ";
  protected final String TEXT_5 = " ";
  protected final String TEXT_6 = NL + "    ";
  protected final String TEXT_7 = NL + "{";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = NL + "}";

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
     InterfaceDef iface = (InterfaceDef) argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append( iface.generateCcmtoolsVersion());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(iface.generateTimestamp());
    stringBuffer.append(TEXT_3);
    stringBuffer.append( iface.getJavaNamespace() );
    stringBuffer.append(TEXT_4);
    stringBuffer.append( iface.getIdentifier() );
    stringBuffer.append(TEXT_5);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(iface.generateBaseInterfaceDeclarations());
    stringBuffer.append(TEXT_7);
    
for(Iterator i=iface.getConstants().iterator(); i.hasNext();)
{
	ConstantDef constant = (ConstantDef)i.next();	

    stringBuffer.append(TEXT_8);
    stringBuffer.append(constant.generateConstantDeclaration());
    
}

    stringBuffer.append(TEXT_9);
    
for(Iterator i=iface.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();

    stringBuffer.append(TEXT_10);
    stringBuffer.append(attr.generateAttributeDeclaration());
    
}

    stringBuffer.append(TEXT_11);
    
for(Iterator i=iface.getOperation().iterator(); i.hasNext();)
{
    OperationDef op = (OperationDef)i.next();

    stringBuffer.append(TEXT_12);
    stringBuffer.append(op.generateOperationDeclaration());
    
}

    stringBuffer.append(TEXT_13);
    return stringBuffer.toString();
  }
}
