<%@ jet package="ccmtools.generator.java.templates" 
	    class="ComponentDefAdapterFromCorbaTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/*
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package <%=component.generateJavaRemoteNamespace()%>;

import java.util.logging.Logger;
import java.util.Iterator;
import java.util.Map;
import java.util.HashMap;

import Components.ccm.local.AlreadyConnected;
import Components.ccm.local.Cookie;
import Components.ccm.local.CookieImpl;
import Components.ccm.local.CCMException;   
import Components.ccm.local.ExceededConnectionLimit;
import Components.ccm.local.InvalidConfiguration;
import Components.ccm.local.InvalidConnection;
import Components.ccm.local.NoConnection;

import ccm.local.ServiceLocator;
import ccm.remote.CCMSessionContainer;

import org.omg.PortableServer.Servant;
import org.omg.CORBA.BAD_OPERATION;
          
<%=component.generateJavaImportStatements(component.generateJavaRemoteNamespace())%>

public class <%=component.getIdentifier()%>AdapterFromCorba 
     extends <%=component.generateAbsoluteIdlName()%>POA
{
    /** Default logger instance */
    private Logger logger = ServiceLocator.instance().getLogger();
  
    /** CCM session container instance */  
    private CCMSessionContainer container;

    /** Local component instance */
    private <%=component.getIdentifier()%> localInterface;
        
    /** CORBA facet references */
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>    
<%=provides.generateCorbaFacetReferenceDeclaration()%>
<%
}
%>   

    /** CORBA receptacle references */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>    
<%=uses.generateCorbaReceptacleReferenceDeclaration()%>
<%
}
%>   
        
    public <%=component.getIdentifier()%>AdapterFromCorba(CCMSessionContainer container, 
        <%=component.getIdentifier()%> localComponent)
    {    
        logger.fine("localComponent = " + localComponent);
        this.container = container;
        this.localInterface = localComponent;
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>    
<%=provides.generateCorbaFacetReferenceInit()%>
<%
}
%>              
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>    
<%=uses.generateCorbaReceptacleReferenceInit()%>
<%
}
%>     
    }
    
    
    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateAdapterFromCorba()%>
<%
	}
}
%>    
    
    /** Supported interface methods */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllOperations().iterator(); j.hasNext();)
    {
    	OperationDef op = (OperationDef)j.next();
%>
<%=op.generateAdapterFromCorba()%>
<%
	}
}
%>    
    
    
    /** 
     * Equivalent interface methods 
     */
     
    /** Attribute equivalent methods */
    
<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateAdapterFromCorba()%>
<%
}
%>    


    /** Facet equivalent methods */    
    
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateEquivalentMethodAdapterFromCorba()%>
<%
}
%>
     
    /** Receptacle equivalent methods */
         
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateEquivalentMethodAdapterFromCorba()%>
<%
}
%>
    
    /** 
     * The following operations are defined in the Components::CCMObject
     * interface.
     */
    
    public Components.CCMHome get_ccm_home()
    {
        logger.fine("");
        return container.getCorbaHome();
    }

    public void configuration_complete()
        throws Components.InvalidConfiguration
    {
        logger.fine("");
        try
        {
            localInterface.configuration_complete();
        }
        catch(InvalidConfiguration e)
        {
            e.printStackTrace();
            throw new Components.InvalidConfiguration();
        }
    }

    public void remove()
        throws Components.RemoveFailure
    {
        logger.fine("");
        //TODO:
    }
    
    
    /** 
     * The following operations are defined in the Components::Navigation
     * interface.
     */

    public org.omg.CORBA.Object provide_facet(String name) 
        throws Components.InvalidName
    {
        logger.fine("");	
        if(name == null)
        {
            throw new Components.InvalidName();
        }
<%		
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>        
<%=provides.generateNavigationMethodAdapterFromCorba()%>
<%
}
%>
        else
        {
            throw new Components.InvalidName();
        }
    }


    /** 
     * The following operations are defined in the Components::Receptacles
     * interface.
     */
     
    public Components.Cookie connect(String name, org.omg.CORBA.Object obj) 
        throws Components.InvalidName, 
        Components.InvalidConnection, 
        Components.AlreadyConnected, 
        Components.ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + obj);
        if(name == null) 
        {
            throw new Components.InvalidName("connection name is null!");
        }
<%		
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>        
<%=uses.generateReceptacleConnectMethodAdapterFromCorba()%>
<%
}
%>
        else
        {
            throw new Components.InvalidName(name);
        }	
    }

    public void disconnect(String name, Components.Cookie ck) 
        throws Components.InvalidName, 
        Components.InvalidConnection, 
        Components.CookieRequired, 
        Components.NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck);
        if(name == null)
        {
            throw new Components.InvalidName("connection name is null!");
        }
<%		
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>        
<%=uses.generateReceptacleDisconnectMethodAdapterFromCorba()%>
<%
}
%>
        else
        {
            throw new Components.InvalidName(name);
        }	
    }
}