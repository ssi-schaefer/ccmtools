<%@ jet package="ccmtools.generator.java.templates" 
	    class="UsesDefMultipleEquivalentMethodAdapterLocalTemplate" 
		imports="ccmtools.generator.java.metamodel.* "	    
%>
<% 
UsesDef uses = (UsesDef) argument;  
InterfaceDef iface = uses.getInterface();
%>

    public Cookie connect_<%=uses.getIdentifier()%>(<%=iface.generateAbsoluteJavaName()%> obj)
        throws ExceededConnectionLimit, 
               InvalidConnection
    {
        logger.fine("Object reference = " + obj);
        if(obj == null)
        {
            throw new InvalidConnection();
        }	
        else
        {
            Cookie ck = new CookieImpl();            
            <%=uses.getIdentifier()%>ReceptacleMap.put(ck, obj);
            return ck;
        }
    }

    public <%=iface.generateAbsoluteJavaName()%> disconnect_<%=uses.getIdentifier()%>(Cookie ck)
        throws InvalidConnection
    {
	    logger.fine("Cookie = " + ck);        
        if(ck == null || !<%=uses.getIdentifier()%>ReceptacleMap.containsKey(ck))
        {
            throw new InvalidConnection();
        }
        else
        {
            <%=uses.getInterface().generateAbsoluteJavaName()%> f = <%=uses.getIdentifier()%>ReceptacleMap.get(ck);
            <%=uses.getIdentifier()%>ReceptacleMap.remove(ck);
            return f;
        }
    }
        
    public java.util.Map<Cookie, <%=iface.generateAbsoluteJavaName()%>> get_connections_<%=uses.getIdentifier()%>()
    {
        logger.fine("");
        // return a copy of the receptacle map
        return new java.util.HashMap<Cookie, <%=iface.generateAbsoluteJavaName()%>>(<%=uses.getIdentifier()%>ReceptacleMap);
    }
