<%@ jet package="ccmtools.generator.java.templates" 
	    class="ComponentDefApplicationClassTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/**
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * 
 * <%=component.generateCcmIdentifier()%> component business logic.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */

package <%=component.generateJavaNamespace()%>;
   
/**
 * This class implements component equivalent and supported interfaces
 * as well as component attributes.
 * Additionally, session component callback methods must be implemented.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */   
public class <%=component.getIdentifier()%>Impl 
    implements <%=component.generateCcmIdentifier()%>
{
    /** Supported interface attribute variables */

<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateApplicationDeclaration()%>
<%
	}
}
%>    
    

    /** Component attribute variables */
    
<%
for(Iterator i=component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateApplicationDeclaration()%>
<%
}
%> 

    public <%=component.generateAbsoluteJavaCcmName()%>_Context ctx;
    
    
    public <%=component.getIdentifier()%>Impl()
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }


    /* 
     * Supported interface methods 
     */

    /** Supported interface constants */
    
    
    

    /** Supported interface attributes */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateApplicationImplementation()%>
<%
	}
}
%>    
    
    
    /** Supported interface methods */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getOperation().iterator(); j.hasNext();)
    {
    	OperationDef op = (OperationDef)j.next();
%>
<%=op.generateApplicationImplementation()%>
<%
	}
}
%>    


    /** Component attribute accessor methods */

<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateApplicationImplementation()%>
<%
}
%>    


    /** Facet implementation factory methods */
    
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateGetMethodImplementation()%>
<%
}
%>    

    /** Component callback methods */
    
    public void set_session_context(ccm.local.Components.SessionContext ctx) 
        throws ccm.local.Components.CCMException
    {
        this.ctx = (<%=component.generateAbsoluteJavaCcmName()%>_Context)ctx; 
    }

    public void ccm_activate() 
        throws ccm.local.Components.CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }

    public void ccm_passivate() 
        throws ccm.local.Components.CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }

    public void ccm_remove() 
        throws ccm.local.Components.CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }
}