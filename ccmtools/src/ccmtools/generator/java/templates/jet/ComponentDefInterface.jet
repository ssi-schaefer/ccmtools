<%@ jet package="ccmtools.generator.java.templates" 
	    class="ComponentDefInterfaceTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/*
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package <%=component.generateJavaNamespace()%>;
                 
public interface <%=component.getIdentifier()%> 
    extends ccm.local.Components.CCMObject<%=component.generateSupportsDeclarations()%>
{
    /** Supported interface constants */
    
    
    

    /** Supported interface attributes */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateDeclaration()%>
<%
	}
}
%>    
    
    
    /** Supported interface methods */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getOperation().iterator(); j.hasNext();)
    {
    	OperationDef op = (OperationDef)j.next();
%>
<%=op.generateDeclaration()%>
<%
	}
}
%>    


    /** Attribute equivalent methods */
<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateDeclaration()%>
<%
}
%>    

    /** Facet equivalent methods */
    
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateEquivalentMethodDeclaration()%>
<%
}
%>    
    
    /** Receptacle equivalent methods */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateEquivalentMethodDeclaration()%>
<%
}
%>    
}