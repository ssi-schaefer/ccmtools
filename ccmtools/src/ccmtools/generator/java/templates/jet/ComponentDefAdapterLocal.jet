<%@ jet package="ccmtools.generator.java.templates" 
	    class="ComponentDefAdapterLocalTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/*
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package <%=component.generateJavaNamespace()%>;

import java.util.logging.Logger;
import ccm.local.ServiceLocator;

                 
public class <%=component.getIdentifier()%>Adapter 
    implements <%=component.generateAbsoluteJavaName()%>
{
    private Logger logger = ServiceLocator.instance().getLogger();
    
    private <%=component.generateAbsoluteJavaCcmName()%> localInterface;
    private <%=component.generateAbsoluteJavaCcmName()%>_Context ctx;

    /** Facet adapter references */
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateFacetAdapterReference()%>
<%
}
%>  
	
    /** Receptacle references */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateReceptacleAdapterReference()%>
<%
}
%>  
		
		
    protected <%=component.getIdentifier()%>Adapter()
    {
        logger.fine("");
    }
	
    public <%=component.getIdentifier()%>Adapter(<%=component.generateAbsoluteJavaCcmName()%> localInterface)
    {
        logger.fine("localInterface = " + localInterface);
        this.localInterface = localInterface;
    }
	
	
	
    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateAdapterLocal()%>
<%
	}
}
%>    
    
    
    /** Supported interface methods */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllOperations().iterator(); j.hasNext();)
    {
    	OperationDef op = (OperationDef)j.next();
%>
<%=op.generateAdapterLocal()%>
<%
	}
}
%>    

	
	
    /* 
     * Equivalent interface methods 
     */
	
    /** Attribute equivalent methods */
<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateAdapterLocal()%>
<%
}
%>    

    /** Facet equivalent methods */    
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateEquivalentMethodAdapterLocal()%>
<%
}
%>    
    
    /** Receptacle equivalent methods */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateEquivalentMethodAdapterLocal()%>
<%
}
%>
	
    /** CCMObject interface methods */
	
    public void configuration_complete()
        throws ccm.local.Components.InvalidConfiguration
    {
        logger.fine("");
        ctx = new <%=component.generateAbsoluteJavaCcmName()%>_ContextImpl(this); 
        try
        {
            localInterface.set_session_context(ctx);
            localInterface.ccm_activate();
        }
        catch (ccm.local.Components.CCMException e)
        {
            throw new ccm.local.Components.InvalidConfiguration();
        }
    }

    public void remove()
        throws ccm.local.Components.RemoveFailure
    { 
        logger.fine("");
        try 
        {
            localInterface.ccm_remove();
        }
        catch(ccm.local.Components.CCMException e)
        {
            throw new ccm.local.Components.RemoveFailure();
        }
    }
    
    public ccm.local.Components.HomeExecutorBase get_ccm_home()
    {
        throw new RuntimeException("Not implemented!");
    }
    
    
    /** Navigation interface methods */
    
    public Object provide_facet(String name)
        throws ccm.local.Components.InvalidName
    {
        logger.fine("name = " + name);
        if(name == null)
        {
            throw new ccm.local.Components.InvalidName();
        }
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateNavigationMethodAdapterLocal()%>
<%
}
%>   
        throw new ccm.local.Components.InvalidName();
    }
    
    
    /** Receptacle methods */
    
    public ccm.local.Components.Cookie connect(String name, Object obj)
        throws ccm.local.Components.InvalidName, 
               ccm.local.Components.InvalidConnection,
               ccm.local.Components.AlreadyConnected, 
               ccm.local.Components.ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + obj);
        if(name == null)
        {
            throw new ccm.local.Components.InvalidName();
        }
        if(obj == null)
        {
            throw new ccm.local.Components.InvalidConnection();
        }    
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>     
<%=uses.generateReceptacleConnectMethodAdapterLocal()%>
<%
}
%>     
        else
        {
            throw new ccm.local.Components.InvalidName();
        }
    }
    
    public void disconnect(String name, ccm.local.Components.Cookie ck)
        throws ccm.local.Components.InvalidName, 
               ccm.local.Components.InvalidConnection,
               ccm.local.Components.CookieRequired, 
               ccm.local.Components.NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck );
        if(name == null)
        {
            throw new ccm.local.Components.InvalidName();
        }
        if(ck == null)
        {
            throw new ccm.local.Components.CookieRequired();
        } 
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>     
<%=uses.generateReceptacleDisconnectMethodAdapterLocal()%>
<%
}
%>     
        else
        {
            throw new ccm.local.Components.InvalidName();
        }
    }    
}