<%@ jet package="ccmtools.generator.java.templates" 
	    class="ComponentDefAdapterLocalTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/*
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package <%=component.generateJavaNamespace()%>;

<%=component.generateJavaImportStatements()%>  
                 
public class <%=component.getIdentifier()%>Adapter 
    implements <%=component.getIdentifier()%>
{
    private java.util.logging.Logger logger = ccmtools.local.ServiceLocator.instance().getLogger();
    
    private <%=component.generateCcmIdentifier()%> localInterface;
    private <%=component.generateCcmIdentifier()%>_Context ctx;
    private Components.Assembly assembly;
    private Components.ComponentDelegator delegator;

    /** Facet adapter references */
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateFacetAdapterReference()%>
<%
}
%>  
	
    /** Receptacle references */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateReceptacleAdapterReference()%>
<%
}
%>  
		
		
    protected <%=component.getIdentifier()%>Adapter()
    {
        this(null, null);
    }
	
    public <%=component.getIdentifier()%>Adapter(<%=component.generateCcmIdentifier()%> localInterface)
    {
        this(localInterface, null);
    }
	
    public <%=component.getIdentifier()%>Adapter(<%=component.generateCcmIdentifier()%> localInterface, Components.Assembly assembly)
    {
        logger.fine("localInterface = " + localInterface + ", " + assembly);
        this.localInterface = localInterface;
        this.assembly = assembly;
        if(localInterface!=null && (localInterface instanceof Components.ComponentDelegator))
        	this.delegator = (Components.ComponentDelegator)localInterface;
    }
	
	
    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateAdapterLocal()%>
<%
	}
}
%>    
    
    
    /** Supported interface methods */
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllOperations().iterator(); j.hasNext();)
    {
    	OperationDef op = (OperationDef)j.next();
%>
<%=op.generateAdapterLocal()%>
<%
	}
}
%>    

	
    /* 
     * Equivalent interface methods 
     */
	
    /** Attribute equivalent methods */
<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateAdapterLocal()%>
<%
}
%>    

    /** Facet equivalent methods */    
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateEquivalentMethodAdapterLocal()%>
<%
}
%>    
    
    /** Receptacle equivalent methods */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateEquivalentMethodAdapterLocal()%>
<%
}
%>
	
    /** CCMObject interface methods */
	
    public void configuration_complete()
        throws Components.InvalidConfiguration
    {
        logger.fine("");
        ctx = new <%=component.generateCcmIdentifier()%>_ContextImpl(this); 
        try
        {
            if(assembly != null) 
            { 
                assembly.configuration_complete(); 
            }
            localInterface.set_session_context(ctx);
            localInterface.ccm_activate();
        }
        catch(Components.CCMException e)
        {
            throw new Components.InvalidConfiguration();
        }
    }

    public void remove()
        throws Components.RemoveFailure
    { 
        logger.fine("");
        try 
        {
            localInterface.ccm_remove();
            if(assembly != null) 
            { 
                assembly.tear_down(); 
                assembly = null;
            }
        }
        catch(Components.CCMException e)
        {
            throw new Components.RemoveFailure();
        }
    }
    
    public Components.CCMHome get_ccm_home()
    {
        throw new RuntimeException("Not implemented!");
    }
    
    
    /** Navigation interface methods */
    
    public Object provide_facet(String name)
        throws Components.InvalidName
    {
        logger.fine("name = " + name);
        if(name == null)
        {
            throw new Components.InvalidName();
        }
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateNavigationMethodAdapterLocal()%>
<%
}
%>   
        throw new Components.InvalidName();
    }
    
    
    /** Receptacle methods */
    
    public Components.Cookie connect(String name, Object obj)
        throws Components.InvalidName, Components.InvalidConnection, 
        Components.AlreadyConnected, Components.ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + obj);
        if(name == null)
        {
            throw new Components.InvalidName();
        }
        if(obj == null)
        {
            throw new Components.InvalidConnection();
        }    
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>     
<%=uses.generateReceptacleConnectMethodAdapterLocal()%>
<%
}
%>     
        else
        {
            throw new Components.InvalidName();
        }
    }
    
    public void disconnect(String name, Components.Cookie ck)
        throws Components.InvalidName, Components.InvalidConnection, 
        Components.CookieRequired, Components.NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck );
        if(name == null)
        {
            throw new Components.InvalidName();
        }
        if(ck == null)
        {
            throw new Components.CookieRequired();
        } 
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>     
<%=uses.generateReceptacleDisconnectMethodAdapterLocal()%>
<%
}
%>     
        else
        {
            throw new Components.InvalidName();
        }
    }    
}
