<%@ jet package="ccmtools.generator.java.templates" 
	    class="CcmComponentAdapterTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/*
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * <%=component.generateTimestamp()%>
 * DO NOT EDIT!
 */

package <%=component.getJavaNamespace()%>;
                 
public class <%=component.getIdentifier()%>Adapter 
    implements <%=component.getAbsoluteJavaName()%>
{
    private <%=component.getAbsoluteJavaCcmName()%> localInterface;
    private <%=component.getAbsoluteJavaCcmName()%>_Context ctx;

    /** Facet adapter references */
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateFacetAdapterReference()%>
<%
}
%>  
	
	
    protected <%=component.getIdentifier()%>Adapter()
    {
    }
	
    public <%=component.getIdentifier()%>Adapter(<%=component.getAbsoluteJavaCcmName()%> localInterface)
    {
        this.localInterface = localInterface;
    }
	
	
    /** Supported interface methods */ 
	
	
	
    /** 
     * Equivalent interface methods 
     */
	
    /** Attribute equivalent methods */
<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateAttributeAdapter()%>
<%
}
%>    

    /** Facet equivalent methods */
    
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateProvidesEquivalentMethodAdapter()%>
<%
}
%>    
    
    /** Receptacle equivalent methods */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateUsesEquivalentMethodAdapter()%>
<%
}
%>
	
    /** CCMObject interface methods */
	
    public void configuration_complete()
        throws ccm.local.Components.InvalidConfiguration
    {
        ctx = new <%=component.getAbsoluteJavaCcmName()%>_ContextImpl(this); 
        try
        {
            localInterface.set_session_context(ctx);
            localInterface.ccm_activate();
        }
        catch (ccm.local.Components.CCMException e)
        {
            throw new ccm.local.Components.InvalidConfiguration();
        }
    }

    public void remove()
        throws ccm.local.Components.RemoveFailure
    { 
        try 
        {
            localInterface.ccm_remove();
        }
        catch(ccm.local.Components.CCMException e)
        {
            throw new ccm.local.Components.RemoveFailure();
        }
    }
    
    public ccm.local.Components.HomeExecutorBase get_ccm_home()
    {
        throw new RuntimeException("Not implemented!");
    }
    
    
    /** Navigation interface methods */
    
    public Object provide_facet(String name)
        throws ccm.local.Components.InvalidName
    {
        if(name == null)
        {
            throw new ccm.local.Components.InvalidName();
        }
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateProvidesAdapterNavigationMethodImplementation()%>
<%
}
%>   
        throw new ccm.local.Components.InvalidName();
    }
    
    
    /** Receptacle methods */
    
    public ccm.local.Components.Cookie connect(String name, Object connection)
        throws ccm.local.Components.InvalidName, 
               ccm.local.Components.InvalidConnection,
               ccm.local.Components.AlreadyConnected, 
               ccm.local.Components.ExceededConnectionLimit
    {
        throw new ccm.local.Components.InvalidName();
    }
    
    public void disconnect(String name, ccm.local.Components.Cookie ck)
        throws ccm.local.Components.InvalidName, 
               ccm.local.Components.InvalidConnection,
               ccm.local.Components.CookieRequired, 
               ccm.local.Components.NoConnection
    {
        throw new ccm.local.Components.InvalidName();
    }    
}