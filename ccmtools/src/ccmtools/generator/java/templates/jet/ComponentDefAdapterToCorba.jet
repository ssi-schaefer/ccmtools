<%@ jet package="ccmtools.generator.java.templates" 
	    class="ComponentDefAdapterToCorbaTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/*
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package <%=component.generateJavaNamespace()%>;

import java.util.logging.Logger;
import ccm.local.ServiceLocator;
                 
import org.omg.CORBA.ORB;
import org.omg.CORBA.Policy;
import org.omg.PortableServer.ImplicitActivationPolicyValue;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.AdapterAlreadyExists;
import org.omg.PortableServer.POAPackage.InvalidPolicy;


public class <%=component.getIdentifier()%>AdapterToCorba 
    implements <%=component.generateAbsoluteJavaName()%>
{
    private Logger logger = ServiceLocator.instance().getLogger();
    
    public static final String COMPONENT_REPOSITORY_ID = 
        "<%=component.generateRepositoryId()%>";

    /** CORBA reference to a remote component */
    private <%=component.generateAbsoluteIdlName()%> remoteInterface;

    /** Java references to local facet adapters */
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>    
<%=provides.generateFacetAdapterDeclaration()%>
<%
}
%>

    /** Java references to local receptacle adapters */
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>    
<%=uses.generateReceptacleReferenceAdapterToCorba()%>
<%
}
%>

    /** CORBA references */
    private ORB orb;
    private POA componentPoa;
    
    
    public <%=component.getIdentifier()%>AdapterToCorba(<%=component.generateAbsoluteIdlName()%> remoteComponent)
        throws ccm.local.Components.CCMException
    {    
        logger.fine("remoteComponent = " + remoteComponent);
        this.remoteInterface = remoteComponent;
        orb = ccm.local.ServiceLocator.instance().getCorbaOrb();
        try
        {
            // Create a POA instance to handle CORBA requests for local receptacles
            POA rootPoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
            rootPoa.the_POAManager().activate();
            Policy[] policies = new Policy[1];
            policies[0] = rootPoa.create_implicit_activation_policy(
                              ImplicitActivationPolicyValue.IMPLICIT_ACTIVATION);
            componentPoa = rootPoa.create_POA("TestAdapterPOA", rootPoa.the_POAManager(),policies );
            componentPoa.the_POAManager().activate();
        }
        catch (org.omg.CORBA.ORBPackage.InvalidName e)
        {
            throw new ccm.local.Components.CCMException(e.getMessage());
        }
        catch (AdapterInactive e)
        {
            throw new ccm.local.Components.CCMException(e.getMessage());
        }
        catch (AdapterAlreadyExists e)
        {
            throw new ccm.local.Components.CCMException(e.getMessage());
        }
        catch (InvalidPolicy e)
        {
            throw new ccm.local.Components.CCMException(e.getMessage());
        }
    }
    
    
    /** 
     * Supported interface methods 
     */
    
<%
for(Iterator i=component.getSupports().iterator(); i.hasNext();)
{
	SupportsDef supports = (SupportsDef)i.next();
	InterfaceDef iface = supports.getInterface();
	for(Iterator j=iface.getAttributes().iterator(); j.hasNext(); )
	{
        AttributeDef attr = (AttributeDef)j.next();
%>    
<%=attr.generateAdapterToCorba()%>
<%
    }
}
%>    
    
<%
for(Iterator i=component.getSupports().iterator(); i.hasNext();)
{
	SupportsDef supports = (SupportsDef)i.next();
	InterfaceDef iface = supports.getInterface();
	for(Iterator j=iface.getOperation().iterator(); j.hasNext(); )
	{
        OperationDef op = (OperationDef)j.next();
%>    
<%=op.generateAdapterToCorba()%>
<%
    }
} 
%>

    
    /** 
     * Equivalent interface methods 
     */

<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateAdapterToCorba()%>
<%
}
%>    
            
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateEquivalentMethodAdapterToCorba()%>
<%
}
%>

<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();)
{
    UsesDef uses = (UsesDef)i.next();
%>
<%=uses.generateEquivalentMethodAdapterToCorba()%>
<%
}
%>

    
    /** CCMObject interface methods */
    
    public void configuration_complete()
    {
        logger.fine("");
        if(remoteInterface != null)
        {
            remoteInterface.configuration_complete();
        }
    }
    
    public void remove()
    {
        logger.fine("");
        if(remoteInterface != null)
        {
            remoteInterface.remove();
        }
    }
    
    public ccm.local.Components.HomeExecutorBase get_ccm_home()
    {
        logger.fine("");
        // TODO
        throw new RuntimeException("Not implemented!");
    }
    
    
    /** Navigation interface methods */
    
    public Object provide_facet(String name)
        throws ccm.local.Components.InvalidName
    {
        logger.fine("name = " + name);
        if(name == null)
        {
            throw new ccm.local.Components.InvalidName();
        }
<%		
for(Iterator i = component.getFacet().iterator(); i.hasNext();) 
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>        
<%=provides.generateNavigationMethodAdapterToCorba()%>
<%
}
%>
        else
        {
            throw new ccm.local.Components.InvalidName();
        }
    }
    
    
    /** Receptacle methods */
    
    public ccm.local.Components.Cookie connect(String name, Object localObject)
        throws ccm.local.Components.InvalidName, ccm.local.Components.InvalidConnection,
               ccm.local.Components.AlreadyConnected, ccm.local.Components.ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + localObject);
        if(name == null)
        {
            throw new ccm.local.Components.InvalidName();
        }
       <%		
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>     
<%=uses.generateReceptacleConnectMethodAdapterToCorba()%>
<%
}
%>
        else
        {
            throw new ccm.local.Components.InvalidName();
        }
    }
    
    public void disconnect(String name, ccm.local.Components.Cookie ck)
        throws ccm.local.Components.InvalidName, ccm.local.Components.InvalidConnection,
               ccm.local.Components.CookieRequired, ccm.local.Components.NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck);
        if(name == null)
        {
            throw new ccm.local.Components.InvalidName();
        }
<%
for(Iterator i = component.getReceptacle().iterator(); i.hasNext();) 
{
    UsesDef uses = (UsesDef)i.next();
%>     
<%=uses.generateReceptacleDisconnectMethodAdapterToCorba()%>
<%
}
%>
        else
        {
            throw new ccm.local.Components.InvalidName();
        }
    }
}