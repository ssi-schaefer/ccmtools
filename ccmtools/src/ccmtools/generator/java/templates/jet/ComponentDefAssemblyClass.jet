<%@ jet package="ccmtools.generator.java.templates" 
	    class="ComponentDefAssemblyClassTemplate" 
		imports="java.util.Iterator ccmtools.generator.java.metamodel.* "	    
%>
<% ComponentDef component = (ComponentDef) argument; %>
/**
 * This file was automatically generated by <%=component.generateCcmtoolsVersion()%>
 * <http://ccmtools.sourceforge.net>
 * 
 * <%=component.generateCcmIdentifier()%> component business logic.
 *
 */

package <%=component.generateJavaNamespace()%>;
   
<%=component.generateJavaImportStatements()%>  
   
/**
 * This class implements component equivalent and supported interfaces
 * as well as component attributes.
 */   
public class <%=component.getIdentifier()%>Impl 
    implements <%=component.generateCcmIdentifier()%>
{
    /** Supported interface attribute variables */

<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateApplicationDeclaration()%>
<%
	}
}
%>    
    

    /** Component attribute variables */
    
<%
for(Iterator i=component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateApplicationDeclaration()%>
<%
}
%> 
    
<%
for(Iterator i=component.getAssemblyAttributeDeclarations(); i.hasNext();)
{
%>
<%=i.next().toString()%>
<%
}
%> 

    public <%=component.generateCcmIdentifier()%>_Context ctx;
    
    private boolean ccm_activate_ok;

    
    public <%=component.getIdentifier()%>Impl()
        throws Components.CCMException
    {
    	try {
<%
for(Iterator i=component.getAssemblyAttributeInitialisation(); i.hasNext();)
{
%>
<%=i.next().toString()%>
<%
}
%> 
    	} catch(Exception e) {
    		throw new Components.CCMException(e.getMessage(), Components.CCMExceptionReason.CREATE_ERROR);
    	}
    }


    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */

<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllAttributes().iterator(); j.hasNext();)
    {
    	AttributeDef attr = (AttributeDef)j.next();
%>
<%=attr.generateApplicationImplementation()%>
<%
	}
}
%>    
    
    
    /** Supported interface methods */
    
<%
for(Iterator i = component.getSupports().iterator(); i.hasNext();)
{
    SupportsDef supports = (SupportsDef)i.next();
    for(Iterator j = supports.getInterface().getAllOperations().iterator(); j.hasNext();)
    {
    	OperationDef op = (OperationDef)j.next();
%>
<%=op.generateApplicationImplementation()%>
<%
	}
}
%>    


    /** Component attribute accessor methods */

<%
for(Iterator i = component.getAttributes().iterator(); i.hasNext();)
{
    AttributeDef attr = (AttributeDef)i.next();
%>
<%=attr.generateAssemblyImplementation(component.getAssemblyAttributeTarget(attr.getIdentifier()))%>
<%
}
%>    


    /** Facet implementation factory methods */
    
<%
for(Iterator i = component.getFacet().iterator(); i.hasNext();)
{
    ProvidesDef provides = (ProvidesDef)i.next();
%>
<%=provides.generateGetMethodAssemblyImplementation()%>
<%
}
%>    

    /** Component callback methods */
    
    public void set_session_context(Components.SessionContext ctx) 
        throws Components.CCMException
    {
        this.ctx = (<%=component.generateCcmIdentifier()%>_Context)ctx; 
    }

    public void ccm_activate() 
        throws Components.CCMException
    {
    	try {
			// setup inner components    	
<%
for(Iterator i=component.getAssemblyAttributeSetup(); i.hasNext();)
{
%>
<%=i.next().toString()%>
<%
}
%> 

			// finish configuration    	
<%
for (String key : component.getAssemblyLocalComponents().keySet())
{
%>
			<%=key%>_.configuration_complete();
<%
}
%>

			ccm_activate_ok = true; 
    	} catch(Exception e) {
    		throw new Components.CCMException(e.getMessage(), Components.CCMExceptionReason.CREATE_ERROR);
    	}
    }

    public void ccm_passivate() 
        throws Components.CCMException
    {
        // Who calls this method?
    }

    public void ccm_remove() 
        throws Components.CCMException
    {
    	try {
<%
for (String key : component.getAssemblyLocalComponents().keySet())
{
%>
			<%=key%>_.remove();
<%
}
%>
		} catch(Exception e) {
    		throw new Components.CCMException(e.getMessage(), Components.CCMExceptionReason.REMOVE_ERROR);
		} 
    }
}
