package ccmtools.generator.java.templates;

import ccmtools.generator.java.metamodel.*;

public class HomeDefDeploymentLocalTemplate
{
  protected static String nl;
  public static synchronized HomeDefDeploymentLocalTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    HomeDefDeploymentLocalTemplate result = new HomeDefDeploymentLocalTemplate();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * This file was automatically generated by ";
  protected final String TEXT_2 = NL + " * <http://ccmtools.sourceforge.net>" + NL + " * DO NOT EDIT!" + NL + " */" + NL + "" + NL + "package ";
  protected final String TEXT_3 = ";" + NL + "" + NL + "public class ";
  protected final String TEXT_4 = "Deployment " + NL + "{" + NL + "    /** Default logger instance */" + NL + "    private static java.util.logging.Logger logger = ccmtools.local.ServiceLocator.instance().getLogger();" + NL + "    " + NL + "    " + NL + "    public static Components.CCMHome create()" + NL + "        throws Components.CCMException" + NL + "    {" + NL + "        logger.fine(\"\");" + NL + "        return new ";
  protected final String TEXT_5 = "Adapter((";
  protected final String TEXT_6 = ")";
  protected final String TEXT_7 = "Factory.create());    " + NL + "    }" + NL + "" + NL + "    public static Components.CCMHome create(Components.AssemblyFactory factory)" + NL + "        throws Components.CCMException" + NL + "    {" + NL + "        logger.fine(\"assemblyFactory = \" + factory);    " + NL + "        return new ";
  protected final String TEXT_8 = "Adapter((";
  protected final String TEXT_9 = ")";
  protected final String TEXT_10 = "Factory.create(), factory);    " + NL + "    }" + NL + "" + NL + "" + NL + "    public static void deploy(String name)" + NL + "        throws Components.CCMException" + NL + "    {" + NL + "        logger.fine(\"name = \" + name);" + NL + "        Components.HomeFinder.instance().register_home(create(), name);    " + NL + "    }" + NL + "    " + NL + "    public static void deploy(String name, Components.AssemblyFactory factory)" + NL + "        throws Components.CCMException" + NL + "    {" + NL + "        logger.fine(\"name = \" + name + \", assemblyFactory = \" + factory);" + NL + "        Components.HomeFinder.instance().register_home(create(factory), name);    " + NL + "    }" + NL + "    " + NL + "    " + NL + "    public static void undeploy(String name)" + NL + "    {" + NL + "        logger.fine(\"name = \" + name);" + NL + "        Components.HomeFinder.instance().unregister_home(name);    " + NL + "    }" + NL + "}";
  protected final String TEXT_11 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     HomeDef home = (HomeDef) argument; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append(home.generateCcmtoolsVersion());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(home.generateJavaNamespace());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(home.getIdentifier());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(home.getIdentifier());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(home.generateCcmIdentifier());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(home.getIdentifier());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(home.getIdentifier());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(home.generateCcmIdentifier());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(home.getIdentifier());
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    return stringBuffer.toString();
  }
}
