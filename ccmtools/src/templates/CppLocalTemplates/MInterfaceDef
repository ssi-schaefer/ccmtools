/*
 * This file was automatically generated by %(CcmToolsVersion)s 
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

#ifndef __IFACE_%(PreprocIdentifier)s__H__
#define __IFACE_%(PreprocIdentifier)s__H__

#include <Components/ccmtools.h>

%(InterfaceIncludes)s

%(OpenNamespace)s

//==============================================================================
// %(Identifier)s interface definition
//==============================================================================

// External view of interface %(Identifier)s
class %(Identifier)s
  : virtual public ::Components::Object%(BaseType)s
{
  public:
    typedef wamas::platform::utils::SmartPtr<%(Identifier)s> SmartPtr;

    virtual ~%(Identifier)s() {}

%(MConstantDefDeclaration)s 
      
%(MAttributeDefPrototypeVV)s

%(MOperationDefPrototypeVV)s 
};


// Internal view of interface %(Identifier)s
class CCM_%(Identifier)s
  : virtual public %(Identifier)s
{
  public:
    typedef wamas::platform::utils::SmartPtr<CCM_%(Identifier)s> SmartPtr;
      
    virtual ~CCM_%(Identifier)s() {}
};

%(CloseNamespace)s

#endif // __IFACE_%(PreprocIdentifier)s__H__


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */
 
#ifndef __INTERFACE_ADAPTER_%(PreprocIdentifier)s__H__
#define __INTERFACE_ADAPTER_%(PreprocIdentifier)s__H__

#include <%(InterfaceInclude)s.h> 

%(OpenGenNamespace)s

//==============================================================================
// %(Identifier)s adapter (header file)
//==============================================================================

class %(Identifier)sAdapter
  : virtual public %(InterfaceName)s
{
 public:
    %(Identifier)sAdapter();
    %(Identifier)sAdapter(%(InterfaceCCMName)s* f);
    virtual ~%(Identifier)sAdapter();

    void validConnection(const bool value) 
    {
        validConnection_ = value;
    }
    
    const bool validConnection() const 
    {
        return validConnection_;
    }
   
%(BaseInterfaceAdapterAttributeHeader)s

%(MAttributeDefAdapterHeader)s


%(BaseInterfaceAdapterOperationHeader)s

%(MOperationDefAdapterHeader)s

  protected:
    %(InterfaceCCMName)s* facet_;
    bool validConnection_;

  private:
    %(Identifier)sAdapter(const %(Identifier)sAdapter&);
    void operator=(const %(Identifier)sAdapter&);
};
 
%(CloseGenNamespace)s
 
#endif // __INTERFACE_ADAPTER_%(PreprocIdentifier)s__H__
 
<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

#include "%(Identifier)sAdapter.h"
 
%(OpenNamespace)s

//==============================================================================
// %(Identifier)s interface constants (implementation)
//==============================================================================

%(CloseNamespace)s


%(OpenGenNamespace)s

using namespace std;

//==============================================================================
// %(Identifier)s facet adapter (implementation)
//==============================================================================

%(Identifier)sAdapter::%(Identifier)sAdapter()
{
    validConnection_ = false;
    facet_ = NULL;
}

%(Identifier)sAdapter::%(Identifier)sAdapter(%(InterfaceCCMName)s* f)
    : facet_(f)
{
    validConnection_ = true;
}

%(Identifier)sAdapter::~%(Identifier)sAdapter()
{
}

%(BaseInterfaceAdapterAttributeImpl)s

%(MAttributeDefAdapterImpl)s

%(BaseInterfaceAdapterOperationImpl)s

%(MOperationDefAdapterImpl)s
 
%(CloseGenNamespace)s 
 

