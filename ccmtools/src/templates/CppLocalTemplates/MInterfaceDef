/*
 * This file was automatically generated by %(CcmToolsVersion)s 
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

#ifndef __IFACE_%(PreprocIdentifier)s__H__
#define __IFACE_%(PreprocIdentifier)s__H__

#include <ccm/local/Components/CCM.h>

%(DebugInclude)s

%(MAttributeDefInclude)s
%(MOperationDefInclude)s
%(BaseInclude)s

%(OpenNamespace)s

//==============================================================================
// %(Identifier)s interface definition
//==============================================================================

// External view of interface %(Identifier)s
class %(Identifier)s
  : virtual public ::ccm::local::Components::Object%(BaseType)s
{
  public:
    virtual ~%(Identifier)s() {}

%(MConstantDefDeclaration)s 
      
%(MAttributeDefPrototypeVV)s

%(MOperationDefPrototypeVV)s 

};


// Internal view of interface %(Identifier)s
class CCM_%(Identifier)s
  : virtual public %(Identifier)s
{};


#ifdef WXDEBUG
inline
std::string 
ccmDebug(const WX::Utils::SmartPtr<%(Identifier)s>& in, int indent = 0)
{
    std::ostringstream os;
    os << ::ccm::local::doIndent(indent) << "object %(Identifier)s" << std::endl;
    return os.str();
}
#endif // WXDEBUG

%(CloseNamespace)s

#endif // __IFACE_%(PreprocIdentifier)s__H__


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */
 
#ifndef __INTERFACE_ADAPTER_%(PreprocIdentifier)s__H__
#define __INTERFACE_ADAPTER_%(PreprocIdentifier)s__H__

#include <WX/Utils/smartptr.h>
#include <ccm/local/Components/CCM.h>

#include <%(InterfaceInclude)s.h> 

%(OpenNamespace)s

//==============================================================================
// %(Identifier)s adapter (header file)
//==============================================================================

class %(Identifier)sAdapter
  : public CCM_%(Identifier)s
{
 public:
    %(Identifier)sAdapter();
    %(Identifier)sAdapter(
        ::ccm::local::Components::Object* c, CCM_%(Identifier)s* f);
    virtual ~%(Identifier)sAdapter();

    inline 
    void validConnection(const bool value) 
    {
        validConnection_ = value;
    }
    
    inline 
    const bool validConnection() const 
    {
        return validConnection_;
    }
   
%(BaseInterfaceAdapterAttributeHeader)s

%(MAttributeDefAdapterHeader)s


%(BaseInterfaceAdapterOperationHeader)s

%(MOperationDefAdapterHeader)s

 protected:
    ::ccm::local::Components::Object* component_;
    CCM_%(Identifier)s* facet_;
    bool validConnection_;

};
 
%(CloseNamespace)s
 
#endif // __INTERFACE_ADAPTER_%(PreprocIdentifier)s__H__
 
<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

#include <WX/Utils/debug.h>

%(DebugInclude)s

#include "%(Identifier)sAdapter.h"
 
%(OpenNamespace)s

using namespace std;
using namespace WX::Utils;

//==============================================================================
// %(Identifier)s interface constants (implementation)
//==============================================================================

%(MConstantDefImpl)s 
 
//==============================================================================
// %(Identifier)s facet adapter (implementation)
//==============================================================================

%(Identifier)sAdapter::%(Identifier)sAdapter()
{
    LDEBUGNL(CCM_CONTAINER,"+%(Identifier)sAdapter::%(Identifier)sAdapter()");
    component_ = NULL;
    validConnection_ = false;
    facet_ = NULL;
}

%(Identifier)sAdapter::%(Identifier)sAdapter(
    ::ccm::local::Components::Object* c, CCM_%(Identifier)s* f)
    : component_(c), facet_(f)
{
    LDEBUGNL(CCM_CONTAINER,"+%(ComponentType)sAdapter%(Identifier)s::%(ComponentType)s%(Identifier)sAdapter()" );
    validConnection_ = true;
}

%(Identifier)sAdapter::~%(Identifier)sAdapter()
{
    LDEBUGNL(CCM_CONTAINER,"-%(Identifier)sAdapter::~%(Identifier)sAdapter()" );
    //delete facet_;
}


%(BaseInterfaceAdapterAttributeImpl)s

%(MAttributeDefAdapterImpl)s


%(BaseInterfaceAdapterOperationImpl)s

%(MOperationDefAdapterImpl)s

/*
SmartPtr< ::ccm::local::Components::Object>
%(Identifier)sAdapter::get_component()
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)sAdapter::get_component()");
    return SmartPtr< ::ccm::local::Components::Object>
        (dynamic_cast< ::ccm::local::Components::Object*> (component_));
};
*/ 
 
%(CloseNamespace)s 
 

