/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

//==============================================================================
// %(Identifier)s - component home logic (header)
//==============================================================================

#ifndef __HOME_%(PreprocIdentifier)s_GEN__H__
#define __HOME_%(PreprocIdentifier)s_GEN__H__

#include <string>
#include <map>

#include <Components/ccmtools.h>

%(MFactoryDefInclude)s
%(MFinderDefInclude)s
%(MSupportsDefInclude)s
%(BaseInclude)s

#include "%(ComponentType)s_gen.h"

%(OpenNamespace)s

//==============================================================================
// explicit support classes
//==============================================================================

class %(Identifier)sExplicit
    : virtual public ::Components::CCMHome
{
  public:
    typedef wamas::platform::utils::SmartPtr<%(Identifier)sExplicit> SmartPtr;
      
    virtual ~%(Identifier)sExplicit() {}
    
%(MFactoryDefAdapterPrototypeVV)s
};

//==============================================================================
// implicit support classes
//==============================================================================

class %(Identifier)sImplicit
    : virtual public ::Components::KeylessCCMHome
{
  public:
    typedef wamas::platform::utils::SmartPtr<%(Identifier)sImplicit> SmartPtr;
      
    virtual ~%(Identifier)sImplicit() {}
    
    virtual %(ComponentType)s::SmartPtr create()
        throw(::Components::CCMException, ::Components::CreateFailure) = 0;
};




//==============================================================================
// home and home adapter classes
//==============================================================================

class %(Identifier)s
    : virtual public %(Identifier)sExplicit, 
      virtual public %(Identifier)sImplicit%(BaseType)s
{
  public:
    typedef wamas::platform::utils::SmartPtr<%(Identifier)s> SmartPtr;
      
    %(Identifier)s();
    %(Identifier)s(::Components::AssemblyFactory::SmartPtr assembly_factory);	
    virtual ~%(Identifier)s();
    
    /// calling the home finder
    static SmartPtr find_by_name(const std::string& name)
    	throw(::Components::HomeNotFound);

%(MFactoryDefAdapterPrototypeV)s

    // CCMHome functions
    virtual %(ComponentType)s::SmartPtr create()
        throw(::Components::CCMException, ::Components::CreateFailure);

    virtual void remove_component(::Components::CCMObject::SmartPtr component)
        throw(::Components::CCMException, ::Components::RemoveFailure);

    // KeylessCCMHome functions
    virtual ::Components::CCMObject::SmartPtr create_component()
        throw(::Components::CCMException, ::Components::CreateFailure);

  protected:
    %(LocalNamespace)sCCM_%(Identifier)s* local_home;
    ::Components::AssemblyFactory::SmartPtr assembly_factory;
    
  private:
    %(Identifier)s(const %(Identifier)s&);
    void operator=(const %(Identifier)s&);
};

%(CloseNamespace)s

//==============================================================================
// entry point
//==============================================================================

::Components::CCMHome::SmartPtr
create_%(AbsoluteLocalHomeName)sAdapter();

int 
deploy_%(AbsoluteLocalHomeName)s(char* name);

int 
deploy_with_assembly_%(AbsoluteLocalHomeName)s(char* name,	
    ::Components::AssemblyFactory::SmartPtr assembly_factory);

int undeploy_%(AbsoluteLocalHomeName)s(char* name);

#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

//==============================================================================
// %(Identifier)s - component home logic (implementation)
//==============================================================================

#include <cassert>
#include <iostream>

#include "%(Identifier)s_gen.h"
#include <%(AbsoluteLocalHomeName)s_entry.h>

%(OpenNamespace)s

using namespace std;

//==============================================================================
// home adapter implementation
//==============================================================================

%(Identifier)s::%(Identifier)s()
{
    local_home = dynamic_cast< %(LocalNamespace)sCCM_%(Identifier)s*>(
        create_%(AbsoluteLocalHomeName)s());
    assembly_factory = ::Components::AssemblyFactory::SmartPtr();
}

%(Identifier)s::%(Identifier)s(::Components::AssemblyFactory::SmartPtr f)
    : assembly_factory(f)
{
    local_home = dynamic_cast< %(LocalNamespace)sCCM_%(Identifier)s*>(
        create_%(AbsoluteLocalHomeName)s());
}

%(Identifier)s::~%(Identifier)s()
{
    delete local_home;
}

%(Identifier)s::SmartPtr %(Identifier)s::find_by_name(const std::string& name)
    	throw(::Components::HomeNotFound)
{
	::Components::HomeFinder* finder = ::Components::HomeFinder::Instance();
	assert(finder);
	::Components::CCMHome::SmartPtr sp = finder->find_home_by_name(name);
	%(Identifier)s* hp = dynamic_cast< %(Identifier)s*>(sp.ptr());
	if(!hp)
	{
		std::string msg("home \"");
		msg += name;
		msg += "\" is not of type %(Identifier)s";
		throw ::Components::HomeNotFound(msg);
	}
	return SmartPtr(hp);
}

%(MFactoryDefAdapterDefinition)s

// CCMHome functions

%(ComponentType)s::SmartPtr
%(Identifier)s::create()
    throw(::Components::CCMException, ::Components::CreateFailure)
{
    ::Components::Assembly::SmartPtr assembly;
    if(assembly_factory != ::Components::AssemblyFactory::SmartPtr()) 
    {
        assembly = assembly_factory->create(); 
    }

    ::Components::EnterpriseComponent* enterprise_component = 
        local_home->create();
    %(LocalComponent)sCCM_%(ComponentType)s* local_component = 
        dynamic_cast< %(LocalComponent)sCCM_%(ComponentType)s*>(enterprise_component);
    %(ComponentType)s* local_component_adapter = 
        new %(ComponentType)s(this, local_component, assembly);
    %(ComponentType)s::SmartPtr ret(local_component_adapter);

    if(assembly_factory != ::Components::AssemblyFactory::SmartPtr()) 
    {
        assembly->build(ret);
    }
    return ret;
}

void
%(Identifier)s::remove_component(::Components::CCMObject::SmartPtr component)
    throw(::Components::CCMException, ::Components::RemoveFailure)
{
    component->remove();
}

::Components::CCMObject::SmartPtr
%(Identifier)s::create_component()
    throw(::Components::CCMException, ::Components::CreateFailure)
{
    return create();
}

%(CloseNamespace)s


//==============================================================================
// entry point
//==============================================================================

::Components::CCMHome::SmartPtr
create_%(AbsoluteLocalHomeName)sAdapter()
{
    ::Components::CCMHome::SmartPtr
        ret(new %(LocalNamespace)s%(Identifier)s());
    return ret;
}

int 
deploy_%(AbsoluteLocalHomeName)s(char* name)
{
    return deploy_with_assembly_%(AbsoluteLocalHomeName)s(
        name, ::Components::AssemblyFactory::SmartPtr());	
}	

int 
deploy_with_assembly_%(AbsoluteLocalHomeName)s(char* name,
    ::Components::AssemblyFactory::SmartPtr assembly_factory)
{
    try 
    {
        ::Components::CCMHome::SmartPtr 
            ret(new %(LocalNamespace)s%(Identifier)s(assembly_factory));
        ::Components::HomeFinder::Instance()->register_home(ret, name);
    }
    catch(...) 
    {
        return -1;
    }
    return 0; 
}	

int 
undeploy_%(AbsoluteLocalHomeName)s(char* name)
{
    try 
    {
        ::Components::HomeFinder::Instance()->unregister_home(name);	
    } 
    catch(...) 
    {
        return -1;
    }
    return 0;
}



<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

//==============================================================================
// %(Identifier)s - shared class definitions
//==============================================================================

#ifndef __HOME_%(PreprocIdentifier)s_SHARE__H__
#define __HOME_%(PreprocIdentifier)s_SHARE__H__

#include <Components/ccmtools.h>

%(MFactoryDefInclude)s
%(MFinderDefInclude)s
%(MSupportsDefInclude)s
%(BaseInclude)s

%(OpenNamespace)s

//==============================================================================
// home classes
//==============================================================================

class CCM_%(Identifier)sExplicit
    : virtual public ::Components::HomeExecutorBase
{
  public:
    typedef wamas::platform::utils::SmartPtr<CCM_%(Identifier)sExplicit> SmartPtr;
      
    virtual ~CCM_%(Identifier)sExplicit() {}
    
%(MFactoryDefPrototypeVV)s
};


class CCM_%(Identifier)sImplicit
{
  public:
    typedef wamas::platform::utils::SmartPtr<CCM_%(Identifier)sImplicit> SmartPtr;
      
    virtual ~CCM_%(Identifier)sImplicit() {}
  
    virtual ::Components::EnterpriseComponent* create()
        throw(::Components::CCMException) = 0;
};


class CCM_%(Identifier)s
    : virtual public CCM_%(Identifier)sExplicit, 
      virtual public CCM_%(Identifier)sImplicit%(BaseType)s%(MSupportsDefBase)s
{
  public:
    typedef wamas::platform::utils::SmartPtr<CCM_%(Identifier)s> SmartPtr;
      
    virtual ~CCM_%(Identifier)s() {}
};

%(CloseNamespace)s

#endif // __HOME_%(PreprocIdentifier)s_SHARE__H__


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

//==============================================================================
// %(Identifier)s - entry point
//==============================================================================

#ifndef __HOME_%(PreprocIdentifier)s_ENTRY__H__
#define __HOME_%(PreprocIdentifier)s_ENTRY__H__

::Components::HomeExecutorBase* 
create_%(AbsoluteLocalHomeName)s();

#endif // __HOME_%(PreprocIdentifier)s_ENTRY__H__


<<<<<<<SPLIT>>>>>>>
/***
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 *
 * %(Identifier)s home business logic definition.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#ifndef __HOME_%(PreprocIdentifier)s_IMPL__H__
#define __HOME_%(PreprocIdentifier)s_IMPL__H__

#include <%(HomeInclude)s_share.h>

%(OpenNamespace)s

/**
 * This class implements a component home's attributes and factory methods.
 * CCM_%(Identifier)s home class 
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 **/
class %(Identifier)s_impl
    : virtual public %(LocalNamespace)sCCM_%(Identifier)s%(BaseType)s
{
  public:
    %(Identifier)s_impl();
    virtual ~%(Identifier)s_impl();

    virtual Components::EnterpriseComponent* create()
        throw(Components::CCMException);

%(MFactoryDefPrototypeV)s
};

%(CloseNamespace)s

#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 *
 * %(Identifier)s home business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>

#include "%(ComponentType)s_impl.h"
#include "%(Identifier)s_impl.h"
#include "%(AbsoluteLocalHomeName)s_entry.h"

%(OpenNamespace)s

using namespace std;

//==============================================================================
// %(Identifier)s_impl - home implementation 
//==============================================================================

%(Identifier)s_impl::%(Identifier)s_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

%(Identifier)s_impl::~%(Identifier)s_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

::Components::EnterpriseComponent*
%(Identifier)s_impl::create()
    throw(Components::CCMException)
{
    return dynamic_cast<Components::EnterpriseComponent*>(
        new %(ComponentType)s_impl());
}

%(MFactoryDefImplDefinition)s

%(CloseNamespace)s


//==============================================================================
// CCM_%(Identifier)s - home entry point
//==============================================================================

Components::HomeExecutorBase*
create_%(AbsoluteLocalHomeName)s()
{
    return dynamic_cast<Components::HomeExecutorBase*>(
        new %(LocalNamespace)s%(Identifier)s_impl());
}

