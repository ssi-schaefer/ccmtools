LocalComponents::Cookie
%(ComponentType)s::connect_%(Identifier)s(SmartPtr<%(UsesType)s> f )
  throw(LocalComponents::ExceededConnectionLimit, LocalComponents::InvalidConnection)
{
  DEBUGNL(" %(ComponentType)s->connect_%(Identifier)s()");
  if (!ValidConnection) throw LocalComponents::InvalidConnection();
  stringstream s;
  s << "CCM_%(Identifier)s:" << %(Identifier)s_receptacle_counter++;
  LocalComponents::Cookie ck ( s.str (  ) );
  SmartPtr<%(CCMUsesType)s> ccmf(dynamic_cast<%(CCMUsesType)s*>(f.ptr()));
  %(Identifier)s_receptacles.insert(make_pair(ck, ccmf));
  return ck;
}

SmartPtr<%(UsesType)s>
%(ComponentType)s::disconnect_%(Identifier)s(LocalComponents::Cookie ck)
  throw(LocalComponents::InvalidConnection)
{
  DEBUGNL(" %(ComponentType)s->disconnect_%(Identifier)s()");
  if(!ValidConnection) throw LocalComponents::InvalidConnection();
  if(%(Identifier)s_receptacles.find(ck) != %(Identifier)s_receptacles.end()) {
    SmartPtr<%(CCMUsesType)s> f(%(Identifier)s_receptacles[ck]);
    %(Identifier)s_receptacles.erase(ck);
    return f;
  } else throw LocalComponents::InvalidConnection();
}

%(Identifier)sConnections&
%(ComponentType)s::get_connections_%(Identifier)s (  )
{
  DEBUGNL(" %(ComponentType)s->get_connections_%(Identifier)s()" );
  if (!ValidConnection) throw LocalComponents::InvalidConnection();
  return %(Identifier)s_receptacles;
}


