::ccm::local::Components::Cookie
%(ComponentType)s::connect_%(Identifier)s(SmartPtr<%(UsesType)s> f)
    throw(::ccm::local::Components::ExceededConnectionLimit, 
          ::ccm::local::Components::InvalidConnection)
{
    LDEBUGNL(CCM_CONTAINER," %(ComponentType)s::connect_%(Identifier)s()");
    if(!ValidConnection) 
        throw ::ccm::local::Components::InvalidConnection();
    stringstream s;
    s << "CCM_%(Identifier)s:" << %(Identifier)s_receptacle_counter++;
    ::ccm::local::Components::Cookie ck(s.str());
    SmartPtr<%(CCMUsesType)s> ccmf(dynamic_cast<%(CCMUsesType)s*>(f.ptr()));
    %(Identifier)s_receptacles.insert(make_pair(ck, ccmf));
    return ck;
}

SmartPtr<%(UsesType)s>
%(ComponentType)s::disconnect_%(Identifier)s(::ccm::local::Components::Cookie ck)
    throw(::ccm::local::Components::InvalidConnection)
{
    LDEBUGNL(CCM_CONTAINER," %(ComponentType)s::disconnect_%(Identifier)s()");
    if(!ValidConnection) 
        throw ::ccm::local::Components::InvalidConnection();
    if(%(Identifier)s_receptacles.find(ck) != %(Identifier)s_receptacles.end()) {
        SmartPtr<%(CCMUsesType)s> f(%(Identifier)s_receptacles[ck]);
        %(Identifier)s_receptacles.erase(ck);
        return f;
    } 
    else 
        throw ::ccm::local::Components::InvalidConnection();
}

%(Identifier)sConnections&
%(ComponentType)s::get_connections_%(Identifier)s (  )
{
    LDEBUGNL(CCM_CONTAINER," %(ComponentType)s::get_connections_%(Identifier)s()" );
    if(!ValidConnection) 
        throw ::ccm::local::Components::InvalidConnection();
    return %(Identifier)s_receptacles;
}


