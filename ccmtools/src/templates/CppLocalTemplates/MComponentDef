/*
 * This file was automatically generated by %(CcmToolsVersion)s 
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT! 
 */

//==============================================================================
// %(Identifier)s - component logic
//==============================================================================

#ifndef __COMPONENT_%(PreprocIdentifier)s_GEN__H__
#define __COMPONENT_%(PreprocIdentifier)s_GEN__H__

#include <string>
#include <map>
#include <WX/Utils/smartptr.h>
#include <ccm/local/Components/CCM.h>

#include <%(SelfInclude)s_share.h>
#include <%(HomeInclude)s_share.h>

%(MAttributeDefInclude)s
%(MConstantDefInclude)s
%(MSupportsDefInclude)s
%(MProvidesDefInclude)s
%(MConsumesDefInclude)s
%(MEmitsDefInclude)s
%(MPublishesDefInclude)s
%(MUsesDefInclude)s
%(BaseInclude)s

%(OpenNamespace)s

class %(HomeType)s;

//==============================================================================
// %(Identifier)s local component adapter class
//==============================================================================

class %(Identifier)s
    : virtual public ccm::local::Components::CCMObject 
      %(MSupportsDefBase)s
      %(BaseType)s 	
{
  protected:
    %(HomeType)s* home_local_adapter;
    CCM_%(Identifier)s* local_component;
    CCM_%(Identifier)s_Context* context;
    WX::Utils::SmartPtr<ccm::local::Components::Assembly> assembly;
    bool ValidConnection;

%(MProvidesDefAdapterVariable)s
%(MUsesDefAdapterVariable)s

  public:
    %(Identifier)s();
    %(Identifier)s(%(HomeType)s* h, 
                   CCM_%(Identifier)s* lc,  
                   WX::Utils::SmartPtr<ccm::local::Components::Assembly> a);
    virtual ~%(Identifier)s();

%(MAttributeDefPrototype)s
%(MProvidesDefProvidePrototype)s
%(MUsesDefConnectPrototype)s
%(MUsesDefGetConnectionPrototype)s
%(MSupportsDefAdapterPrototype)s

    // Navigation functions
    WX::Utils::SmartPtr<ccm::local::Components::Object> 
    provide_facet(const std::string& name)
        throw(ccm::local::Components::InvalidName);

    // Receptacle functions
    ccm::local::Components::Cookie 
    connect(const ccm::local::Components::FeatureName& name, 
        WX::Utils::SmartPtr<ccm::local::Components::Object> connection)
        throw(ccm::local::Components::InvalidName, 
              ccm::local::Components::InvalidConnection,
              ccm::local::Components::AlreadyConnected, 
              ccm::local::Components::ExceededConnectionLimit);

    void 
    disconnect(const ccm::local::Components::FeatureName& name, 
        const ccm::local::Components::Cookie& ck)
        throw(ccm::local::Components::InvalidName, 
              ccm::local::Components::InvalidConnection,
              ccm::local::Components::CookieRequired, 
              ccm::local::Components::NoConnection );

    // CCMObject functions
    ccm::local::Components::HomeExecutorBase* get_ccm_home();

    void configuration_complete()
        throw(ccm::local::Components::InvalidConfiguration);

    void configuration_complete(CCM_%(Identifier)s_Context* ctx)
        throw(ccm::local::Components::InvalidConfiguration);

    void remove()
        throw(ccm::local::Components::RemoveFailure);
};


//==============================================================================
// context adapter class
//==============================================================================

class CCM_%(Identifier)s_Context_impl
    : public CCM_%(Identifier)s_Context
{
  private:
    %(Identifier)s* component_local_adapter;

  public:
    CCM_%(Identifier)s_Context_impl(%(Identifier)s* c);
    virtual ~CCM_%(Identifier)s_Context_impl();

%(MUsesDefGetCtxConnectionPrototype)s

    // CCMContext function
    ccm::local::Components::HomeExecutorBase* get_CCM_home();

    // SessionContext function	
    ccm::local::Components::Object* get_CCM_object()
        throw(ccm::local::Components::IllegalState);
};

/*
%(MProvidesDefAdapterClass)s
*/

%(CloseNamespace)s

#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

//==============================================================================
// %(Identifier)s - component logic implementation
//==============================================================================

#include <cassert>
#include <iostream>
#include <sstream>
#include <WX/Utils/debug.h>

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#ifdef WXDEBUG
#include <ccm/local/Debug.h>
#endif /* WXDEBUG */

// #include<Adapter.h>
%(MProvidesDefAdapterInclude)s

#include "%(Identifier)s_gen.h"

%(OpenNamespace)s

using namespace std;
using namespace WX::Utils;

/*
%(MProvidesDefAdapterClassImpl)s
*/

//==============================================================================
// context adapter class implementation
//==============================================================================

CCM_%(Identifier)s_Context_impl::CCM_%(Identifier)s_Context_impl(%(Identifier)s* c)
    : component_local_adapter(c)
{
    LDEBUGNL(CCM_CONTAINER,"+CCM_%(Identifier)s_Context_impl::CCM_%(Identifier)s_Context_impl()");
}

CCM_%(Identifier)s_Context_impl::~CCM_%(Identifier)s_Context_impl()
{
    LDEBUGNL(CCM_CONTAINER,"-CCM_%(Identifier)s_Context_impl::~CCM_%(Identifier)s_Context_impl()");
}

%(MUsesDefGetConnectionCtxImplDefinition)s

Components::HomeExecutorBase*
CCM_%(Identifier)s_Context_impl::get_CCM_home()
{
    LDEBUGNL(CCM_CONTAINER," CCM_%(Identifier)s_Context_impl::get_CCM_home()");
    throw Components::NotImplemented();
}

Components::Object*
CCM_%(Identifier)s_Context_impl::get_CCM_object()
    throw(Components::IllegalState)
{
    LDEBUGNL(CCM_CONTAINER," CCM_%(Identifier)s_Context_impl::get_CCM_object()");
    throw Components::NotImplemented();
}


//==============================================================================
// local component adapter implementation
//==============================================================================

%(Identifier)s::%(Identifier)s()
{
    LDEBUGNL(CCM_CONTAINER,"+%(Identifier)s::%(Identifier)s()");
    home_local_adapter = NULL;
    local_component = NULL;
    context = NULL;
    assembly = SmartPtr<Components::Assembly>();	
    ValidConnection = false;
%(MProvidesDefAdapterVariableInitDefault)s
%(MUsesDefAdapterVariableInitDefault)s
}

%(Identifier)s::%(Identifier)s(%(HomeType)s* h, 
    CCM_%(Identifier)s* lc,
    SmartPtr<Components::Assembly> a)
    : home_local_adapter(h), local_component(lc), assembly(a)
{
    LDEBUGNL(CCM_CONTAINER,"+%(Identifier)s::%(Identifier)s()");
    context = NULL; 
    ValidConnection = true;
%(MProvidesDefAdapterVariableInit)s
%(MUsesDefAdapterVariableInit)s
}

%(Identifier)s::~%(Identifier)s()
{
    LDEBUGNL(CCM_CONTAINER,"-%(Identifier)s::~%(Identifier)s()");
    delete context;
    delete local_component;
}

%(MAttributeDefAdapterDefinition)s
%(MProvidesDefAdapterDefinition)s
%(MUsesDefAdapterDefinition)s
%(MSupportsDefAdapterImplDefinition)s

// Navigation functions

WX::Utils::SmartPtr<Components::Object>
%(Identifier)s::provide_facet(const std::string& name)
    throw(Components::InvalidName)
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)s::provide_facet(" << name << " )");
%(MProvidesDefProvideFacet)s
    throw Components::InvalidName();
}


// Receptacle functions

Components::Cookie
%(Identifier)s::connect(const Components::FeatureName& name, 
                        SmartPtr<Components::Object> connection)
    throw(Components::InvalidName, 
          Components::InvalidConnection,
          Components::AlreadyConnected, 
          Components::ExceededConnectionLimit)
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)s::connect ( " << name << " )");
%(MUsesDefConnectFacet)s
    throw Components::InvalidName();
}

void
%(Identifier)s::disconnect(const Components::FeatureName& name, 
                           const Components::Cookie& ck)
    throw(Components::InvalidName, 
          Components::InvalidConnection,
          Components::CookieRequired, 
          Components::NoConnection )
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)s::disconnect ( " << name << " )");
    if(!ValidConnection) 
        throw Components::InvalidConnection();

%(MUsesDefDisconnectFacet)s
    throw Components::InvalidName();
}


// CCMObject functions

Components::HomeExecutorBase*
%(Identifier)s::get_ccm_home (  )
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)s::get_ccm_home()");
    throw Components::NotImplemented();
}


void
%(Identifier)s::configuration_complete()
    throw(Components::InvalidConfiguration)
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)s::configuration_complete()");
    configuration_complete(new CCM_%(Identifier)s_Context_impl(this));
}


void
%(Identifier)s::configuration_complete(CCM_%(Identifier)s_Context* ctx)
    throw(Components::InvalidConfiguration)
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)s::configuration_complete()");
    if(!ValidConnection) 
        throw Components::InvalidConnection();
    if(!context)
      context = ctx;
    if(assembly != SmartPtr<Components::Assembly>()) { 
        assembly->configuration_complete(); 
    }
    local_component->set_session_context(context);
    local_component->ccm_activate();
}


void
%(Identifier)s::remove()
    throw(Components::RemoveFailure)
{
    LDEBUGNL(CCM_CONTAINER," %(Identifier)s::remove()");
    if(!ValidConnection) 
        throw Components::InvalidConnection();
    local_component->ccm_remove();
%(MProvidesDefImplRemove)s

    if(assembly != SmartPtr<Components::Assembly>()) { 
        assembly->tear_down(); 
        // To resolve a cyclic smart pointer reference between a component
        // and an assembly object, the assembly smart pointer must be cleaned.
        assembly = SmartPtr<Components::Assembly>();
    }
    ValidConnection = false;
}

%(CloseNamespace)s


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 * DO NOT EDIT !
 */

//==============================================================================
// %(Identifier)s - shared class definitions
//==============================================================================

#ifndef __COMPONENT_%(PreprocIdentifier)s_SHARE__H__
#define __COMPONENT_%(PreprocIdentifier)s_SHARE__H__

#include <map>
#include <WX/Utils/smartptr.h>
#include <ccm/local/Components/CCM.h>

%(MAttributeDefInclude)s
%(MConstantDefInclude)s
%(MSupportsDefInclude)s
%(MProvidesDefInclude)s
%(MConsumesDefInclude)s
%(MEmitsDefInclude)s
%(MPublishesDefInclude)s
%(BaseInclude)s
%(MUsesDefInclude)s

%(OpenNamespace)s

//==============================================================================
// Component class
//==============================================================================

class CCM_%(Identifier)s
    : public ccm::local::Components::SessionComponent%(BaseType)s%(MSupportsDefBase)s
{
  public:
%(MAttributeDefPrototypeVV)s
%(MProvidesDefGetFacetPrototypeVV)s
%(MSupportsDefImplPrototypeVV)s
};


//==============================================================================
// Context class
//==============================================================================

%(MUsesDefConnectionMap)s

class CCM_%(Identifier)s_Context
    : public ccm::local::Components::SessionContext
{
  public:
%(MUsesDefGetConnectionPrototypeVV)s
};

%(CloseNamespace)s

#endif // __COMPONENT_%(PreprocIdentifier)s_SHARE__H__


<<<<<<<SPLIT>>>>>>>
/***
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 *
 * %(Identifier)s component business logic definition.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#ifndef __COMPONENT_%(PreprocIdentifier)s_IMPL__H__
#define __COMPONENT_%(PreprocIdentifier)s_IMPL__H__

#include <%(SelfInclude)s_share.h>

%(OpenNamespace)s

/**
 * This class implements a component's equivalent and supported interfaces
 * as well as component attributes. Additionally, session component callback 
 * methods must be implemented.  
 *
 * %(Identifier)s component class 
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 **/
class CCM_%(Identifier)s_impl
    : virtual public CCM_%(Identifier)s%(BaseType)s
{
  private:
%(MAttributeDefVariable)s
%(MSupportsDefVariable)s

  public:
    CCM_%(Identifier)s_Context* ctx;

    CCM_%(Identifier)s_impl();
    virtual ~CCM_%(Identifier)s_impl();

%(MAttributeDefPrototype)s
%(MProvidesDefGetFacetPrototype)s
%(MSupportsDefImplPrototype)s

    // CCM callback methods
    virtual void set_session_context(ccm::local::Components::SessionContext* ctx)
        throw(ccm::local::Components::CCMException);
    virtual void ccm_activate()
        throw(ccm::local::Components::CCMException);
    virtual void ccm_passivate()
        throw(ccm::local::Components::CCMException);
    virtual void ccm_remove()
        throw(ccm::local::Components::CCMException);
};

%(CloseNamespace)s

#endif


<<<<<<<SPLIT>>>>>>>
/***
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net/>
 *
 * %(Identifier)s component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "%(Identifier)s_impl.h"
%(MProvidesDefImplInclude)s

using namespace std;
using namespace WX::Utils;
using namespace ccm::local;

%(OpenNamespace)s

//==============================================================================
// CCM_%(Identifier)s - component implementation
//==============================================================================

CCM_%(Identifier)s_impl::CCM_%(Identifier)s_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

CCM_%(Identifier)s_impl::~CCM_%(Identifier)s_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

%(MAttributeDefImplDefinition)s
%(MSupportsDefImplDefinition)s

void
CCM_%(Identifier)s_impl::set_session_context(
    Components::SessionContext* context)
    throw(Components::CCMException)
{
    ctx = dynamic_cast<CCM_%(Identifier)s_Context*>(context);
}

void
CCM_%(Identifier)s_impl::ccm_activate()
    throw(Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_%(Identifier)s_impl::ccm_passivate()
    throw(Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_%(Identifier)s_impl::ccm_remove()
    throw(Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

%(MProvidesDefGetFacetDefinition)s

%(CloseNamespace)s



