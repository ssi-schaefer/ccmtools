/*
 * This file was automatically generated by %(CcmToolsVersion)s 
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT! 
 *
 * CORBA converter for enum %(Identifier)s (header file)
 */

#ifndef __ENUM_CONVERTER_%(PreprocIdentifier)s__H__
#define __ENUM_CONVERTER_%(PreprocIdentifier)s__H__

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

#include <iostream>
#include <sstream>

#include <%(StubsIncludeNamespace)s%(Identifier)s.h>
#include <%(LocalIncludeNamespace)s%(Identifier)s.h>

namespace CCM_Remote {

void 
convertFromCorba(const %(CorbaStubName)s& in, %(LocalName)s& out);

void 
convertToCorba(const %(LocalName)s& in, %(CorbaStubName)s& out);

std::ostream& 
operator<<(std::ostream& o, const %(CorbaStubName)s& value);

} // /namespace CCM_Remote

#endif // HAVE_MICO
#endif // __ENUM_CONVERTER_%(PreprocIdentifier)s__H__

<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s 
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT! 
 *
 * CORBA converter for enum %(Identifier)s (implementation file)
 */
 
#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

#include <WX/Utils/debug.h>

#include <CCM_Remote/PrimitiveConverter.h>
#include "%(Identifier)s_remote.h"

using namespace std;

namespace CCM_Remote {

void 
convertFromCorba(const %(CorbaStubName)s& in, %(LocalName)s& out)
{
    LDEBUGNL(CCM_REMOTE," convertFromCorba(%(CorbaStubName)s)");
    LDEBUGNL(CCM_REMOTE, in);

    switch(in) {
%(MembersFromCorba)s
    }
} 


void 
convertToCorba(const %(LocalName)s& in, %(CorbaStubName)s& out)
{
    LDEBUGNL(CCM_REMOTE," convertToCorba(%(CorbaStubName)s)");

    switch(in) {
%(MembersToCorba)s
    }
    
    LDEBUGNL(CCM_REMOTE, out);
} 


std::ostream& 
operator<<(std::ostream& o, const %(CorbaStubName)s& value)
{
    o << endl;
    o << "enum %(CorbaStubName)s = ";
    switch(value) {    
%(EnumCorbaOutput)s
    }   
    return o;
}

} // /namespace CCM_Remote

#endif // HAVE_MICO


