/*
 * This file was automatically generated by %(CcmToolsVersion)s 
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT! 
 */

#ifndef __HOME__%(Identifier)s__REMOTE__H__
#define __HOME__%(Identifier)s__REMOTE__H__

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

#include "%(ComponentType)s_remote.h"
#include <%(StubsIncludeNamespace)s%(Identifier)s.h> 
#include <%(LocalIncludeNamespace)s/%(Identifier)s_gen.h>

%(OpenNamespace)s

//==========================================================================
// %(Identifier)s adapter
//==========================================================================

class %(Identifier)s_impl :
    virtual public POA_%(CorbaStubName)s,
    virtual public PortableServer::RefCountServantBase
{
  protected:
    WX::Utils::SmartPtr<%(LocalNamespace)s::%(Identifier)s> local_home;
    WX::Utils::SmartPtr<CCM::SessionContainer> ccm_container;
      
  public:
    %(Identifier)s_impl(WX::Utils::SmartPtr<CCM::SessionContainer> c);
    virtual ~%(Identifier)s_impl();

    // Implicit operations
    ::%(StubsNamespace)s%(ComponentType)s_ptr create ();

    // Explicit operations
%(MFactoryDefHeader)s

    // Inherited CCMHome interface
    void remove_component(Components::CCMObject_ptr comp);

    // Inherited KeylessCCMHome interface
    Components::CCMObject_ptr create_component ();
};
 
%(CloseNamespace)s


//==============================================================================
// Remote entry point
//==============================================================================
extern "C" {
    int deploy_%(AbsoluteRemoteHomeName)s(CORBA::ORB_ptr orb, char* registration_name);
    int deploy_with_ior_%(AbsoluteRemoteHomeName)s(CORBA::ORB_ptr orb, char*& ior);

    int undeploy_%(AbsoluteRemoteHomeName)s(CORBA::ORB_ptr orb, char* registration_name);
}

#endif // HAVE_MICO
#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

// Mico includes
#include <CORBA.h>
#include <coss/CosNaming.h>

#include "%(Identifier)s_remote.h"
#include <%(AbsoluteLocalHomeName)s_entry.h>

using namespace WX::Utils;

%(OpenNamespace)s

using namespace std;

//============================================================================
// Component home adapter
//============================================================================

%(Identifier)s_impl::%(Identifier)s_impl (SmartPtr<CCM::SessionContainer> c)
    : ccm_container (c)
{
    LDEBUGNL(CCM_CONTAINER, "+%(Identifier)s_impl::%(Identifier)s_impl()");
    ccm::local::Components::HomeFinder* homeFinder = 
        ccm::local::HomeFinder::Instance();
    local_home = SmartPtr<%(LocalNamespace)s::%(Identifier)s>(
        dynamic_cast<%(LocalNamespace)s::%(Identifier)s*>
	(homeFinder->find_home_by_name("%(Identifier)s").ptr()));
}

%(Identifier)s_impl::~%(Identifier)s_impl ()
{
    LDEBUGNL(CCM_CONTAINER, "-%(Identifier)s_impl::~%(Identifier)s_impl()");
    // Smart pointer local_home goes out of scope
}


/*
 * Implicit operations
 */

::%(StubsNamespace)s%(ComponentType)s_ptr
%(Identifier)s_impl::create ()
{
    LDEBUGNL(CCM_CONTAINER, " %(Identifier)s_impl::create()");
    // create the local_component
    SmartPtr<%(LocalNamespace)s::%(ComponentType)s> local_component = 
        local_home->create();
    // create component remote adapter
    PortableServer::ServantBase_var component_adapter =
        new %(ComponentType)s_impl(local_component, ccm_container);
    Components::CCMObject_var co = 
        ccm_container->activate_component(component_adapter.in()); 
    return ::%(StubsNamespace)s%(ComponentType)s::_narrow(co);
}


/*
 * Explicit operations
 */

%(MFactoryDefImpl)s


/*
 * Inherited CCMHome interface
 */

void
%(Identifier)s_impl::remove_component(Components::CCMObject_ptr _co)
{
    LDEBUGNL(CCM_CONTAINER, " %(Identifier)s_impl::remove_component()");
    PortableServer::ServantBase_var _cs = ccm_container->get_skeleton_for_reference(_co);
    // TODO
    ccm_container->deactivate_component(_cs);
}


/*
 * Inherited KeylessCCMHome interface
 */

Components::CCMObject_ptr
%(Identifier)s_impl::create_component ()
{
    LDEBUGNL(CCM_CONTAINER, " %(Identifier)s_impl::create_component()");
    return create ();
}

%(CloseNamespace)s


//==============================================================================
// Remote entry point
//==============================================================================

extern "C" {
    
    int deploy_%(AbsoluteRemoteHomeName)s(CORBA::ORB_ptr orb, char* registration_name)
    {
        LDEBUGNL(CCM_CONTAINER, " deploy_%(AbsoluteRemoteHomeName)s(" 
            << registration_name << ")");

        CosNaming::NamingContextExt_var ns;
        CORBA::Object_var nsobj;
        int error = 0;
        try {
            nsobj = orb->resolve_initial_references ("NameService");
            ns = CosNaming::NamingContextExt::_narrow (nsobj);
            CORBA::String_var ior;
            error = deploy_with_ior_%(AbsoluteRemoteHomeName)s(orb, ior.out());
            if(error) 
                return error;
            CORBA::Object_var obj = orb->string_to_object(ior);
            if(CORBA::is_nil(obj))
	            return -2; // Can't create CORBA object from IOR
            Components::CCMHome_var home = Components::CCMHome::_narrow(obj);
            if(CORBA::is_nil(home))
	            return -3; // Can't create Components::CCMHome object
            CosNaming::Name_var n = ns->to_name(registration_name);
            ns->rebind(n, home);
            return 0;
        }
        catch (...) {
            ns = CosNaming::NamingContextExt::_nil ();
            return -1; // Can't connect to NameService
        }
    }
    
  
    int deploy_with_ior_%(AbsoluteRemoteHomeName)s(CORBA::ORB_ptr orb, char*& ior)
    {
        LDEBUGNL(CCM_CONTAINER, " deploy_with_ior_%(Identifier)s()");
 
        // Startup component home
        SmartPtr<CCM::SessionContainer> 
            container(new CCM::SessionContainer(orb));
        CCM::SessionContainer::ComponentInfo info;
        info.home_short_name = "%(Identifier)s";
        info.home_absolute_name = "::%(Identifier)s";
        info.home_id = "IDL::%(Identifier)s:1.0";
        info.component_short_name = "%(ComponentType)s";
        info.component_absolute_name = "::%(ComponentType)s";
        info.component_id = "IDL:%(ComponentType)s:1.0";
        info.home_glue = 
            new %(RemoteNamespace)s::%(Identifier)s_impl(container); 
        container->load(info);
        Components::CCMHome_var home = container->get_CCM_home(); 
        ior = orb->object_to_string(home); 
        container->activate();
        return 0; // OK
    }
 
 
    int undeploy_%(AbsoluteRemoteHomeName)s(CORBA::ORB_ptr orb, char* registration_name)
    {
        LDEBUGNL(CCM_CONTAINER, " undeploy_%(AbsoluteRemoteHomeName)s(" 
            << registration_name << ")");

        CosNaming::NamingContextExt_var ns;
        CORBA::Object_var nsobj;
        try {
            nsobj = orb->resolve_initial_references ("NameService");
            ns = CosNaming::NamingContextExt::_narrow (nsobj);
            CosNaming::Name_var n = ns->to_name(registration_name);
            ns->unbind(n);
            return 0;
        }
        catch (...) {
            ns = CosNaming::NamingContextExt::_nil ();
            return -1; // Can't connect to NameService
        }
    }
  
}

#endif // HAVE_MICO

