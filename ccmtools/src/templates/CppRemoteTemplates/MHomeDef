/*
 * This file was automatically generated by the CCM Tools - DO NOT EDIT !
 * <http://ccmtools.sourceforge.net>
 */

#ifndef __HOME__%(Identifier)s__REMOTE__H__
#define __HOME__%(Identifier)s__REMOTE__H__

#include "%(ComponentType)s_remote.h"
#include <%(StubsIncludeNamespace)s%(Identifier)s.h> 

#include <%(LocalIncludeNamespace)s%(Identifier)s_gen.h>



%(OpenNamespace)s

//==========================================================================
// %(Identifier)s adapter
//==========================================================================

class %(Identifier)s_impl :
    virtual public POA_%(StubsNamespace)s%(Identifier)s,
    virtual public PortableServer::RefCountServantBase
{
  protected:
    WX::Utils::SmartPtr<CCM_Local%(Namespace)s::%(Identifier)s> local_home;
    WX::Utils::SmartPtr<CCM::SessionContainer> ccm_container;
      
  public:
    %(Identifier)s_impl(WX::Utils::SmartPtr<CCM::SessionContainer> c);
    virtual ~%(Identifier)s_impl();

    // Implicit operations
    ::%(StubsNamespace)s%(ComponentType)s_ptr create ();

    // Explicit operations
%(MFactoryDefHeader)s

    // Inherited CCMHome interface
    void remove_component(Components::CCMObject_ptr comp);

    // Inherited KeylessCCMHome interface
    Components::CCMObject_ptr create_component ();
};
 
%(CloseNamespace)s


//==============================================================================
// Remote entry point
//==============================================================================
extern "C" {
    int deploy_%(Identifier)s(CORBA::ORB_ptr orb, char* registration_name);
}

#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

// Mico includes
#include <CORBA.h>
#include <coss/CosNaming.h>

#include "%(Identifier)s_remote.h"
#include <%(Identifier)s_entry.h> 

using namespace std;
using namespace WX::Utils;

%(OpenNamespace)s

//============================================================================
// Component home adapter
//============================================================================

%(Identifier)s_impl::%(Identifier)s_impl (SmartPtr<CCM::SessionContainer> c)
    : ccm_container (c)
{
    LDEBUGNL(CCM_REMOTE, "+%(Identifier)s_impl::%(Identifier)s_impl()");
    LocalComponents::HomeFinder* homeFinder = CCM_Local::HomeFinder::Instance();
    local_home = SmartPtr<CCM_Local%(Namespace)s::%(Identifier)s>(
        dynamic_cast<CCM_Local%(Namespace)s::%(Identifier)s*>
	(homeFinder->find_home_by_name("%(Identifier)s").ptr()));
}

%(Identifier)s_impl::~%(Identifier)s_impl ()
{
    LDEBUGNL(CCM_REMOTE, "-%(Identifier)s_impl::~%(Identifier)s_impl()");
    // Smart pointer local_home goes out of scope
}


/*
 * Implicit operations
 */

::%(StubsNamespace)s%(ComponentType)s_ptr
%(Identifier)s_impl::create ()
{
    LDEBUGNL(CCM_REMOTE, " %(Identifier)s_impl::create()");
    // create the local_component
    SmartPtr<CCM_Local%(Namespace)s::%(ComponentType)s> local_component = 
        local_home->create();
    // create component remote adapter
    PortableServer::ServantBase_var component_adapter =
        new %(ComponentType)s_impl(local_component, ccm_container);
    Components::CCMObject_var co = 
        ccm_container->activate_component(component_adapter.in()); 
    return ::%(StubsNamespace)s%(ComponentType)s::_narrow(co);
}


/*
 * Explicit operations
 */

%(MFactoryDefImpl)s


/*
 * Inherited CCMHome interface
 */

void
%(Identifier)s_impl::remove_component(Components::CCMObject_ptr _co)
{
    LDEBUGNL(CCM_REMOTE, " %(Identifier)s_impl::remove_component()");
    PortableServer::ServantBase_var _cs = ccm_container->get_skeleton_for_reference(_co);
    // TODO
    ccm_container->deactivate_component(_cs);
}


/*
 * Inherited KeylessCCMHome interface
 */

Components::CCMObject_ptr
%(Identifier)s_impl::create_component ()
{
    LDEBUGNL(CCM_REMOTE, " %(Identifier)s_impl::create_component()");
    return create ();
}

%(CloseNamespace)s


//==============================================================================
// Remote entry point
//==============================================================================
extern "C" {
    
int deploy_%(Identifier)s(CORBA::ORB_ptr orb, char* registration_name)
{
    LDEBUGNL(CCM_REMOTE, " deploy_%(Identifier)s(" << registration_name << ")");

    CosNaming::NamingContextExt_var ns;
    CORBA::Object_var nsobj;
    try {
      nsobj = orb->resolve_initial_references ("NameService");
      ns = CosNaming::NamingContextExt::_narrow (nsobj);
    }
    catch (...) {
      ns = CosNaming::NamingContextExt::_nil ();
      return -1; // Can't connect to NameService
    }

    LocalComponents::HomeFinder* homeFinder;
    homeFinder = CCM_Local::HomeFinder::Instance();
    int error = local_deploy_%(Identifier)s("%(Identifier)s");
    if(error)
      return -2; // Can't deploy local component

    // Startup component home
    SmartPtr<CCM::SessionContainer> container(new CCM::SessionContainer(orb));
    CCM::SessionContainer::ComponentInfo info;
    info.home_short_name = "%(Identifier)s";
    info.home_absolute_name = "::%(Identifier)s";
    info.home_id = "IDL::%(Identifier)s:1.0";
    info.component_short_name = "%(ComponentType)s";
    info.component_absolute_name = "::%(ComponentType)s";
    info.component_id = "IDL:%(ComponentType)s:1.0";
    info.home_instance = NULL; // TODO
    info.home_glue = new CCM_Remote%(Namespace)s::%(Identifier)s_impl(container); 
    container->load(info);
    Components::CCMHome_var hp = container->get_CCM_home(); 
    CosNaming::Name_var n  = ns->to_name (registration_name);
    ns->rebind (n.in(), hp.in());
    container->activate();
    return 0; // OK
  }
}

