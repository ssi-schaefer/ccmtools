/***
 * CORBA converter for struct %(Identifier)s (header file)
 *
 ***/

#ifndef __STRUCT_CONVERTER_%(PreprocIdentifier)s__H__
#define __STRUCT_CONVERTER_%(PreprocIdentifier)s__H__

#include <%(IdlFileNamespace)s%(Identifier)s.h>
#include <CCM_Local%(IncludeNamespace)s/%(Identifier)s.h>

%(MFieldDefInclude)s

%(OpenNamespace)s

void 
convertFromCorba(const %(ShortNamespace)s%(Identifier)s& in, CCM_Local::%(Identifier)s& out);

void 
convertToCorba(const CCM_Local::%(Identifier)s& in, %(ShortNamespace)s%(Identifier)s& out);

%(CloseNamespace)s

#endif // __STRUCT_CONVERTER_%(PreprocIdentifier)s__H__



<<<<<<<SPLIT>>>>>>>
/***
 * CORBA converter for struct %(Identifier)s (implementation file)
 *
 ***/

#include <CCM_Remote/PrimitiveConverter.h>
#include "%(Identifier)s_remote.h"

using namespace std;

%(OpenNamespace)s

void 
convertFromCorba(const %(ShortNamespace)s%(Identifier)s& in, CCM_Local::%(Identifier)s& out)
{
    cout << " convertFromCorba(%(ShortNamespace)s%(Identifier)s)" << endl;
%(MFieldDefFromCorba)s
} 


void 
convertToCorba(const CCM_Local::%(Identifier)s& in, %(ShortNamespace)s%(Identifier)s& out)
{
    cout << " convertToCorba(%(ShortNamespace)s%(Identifier)s)" << endl;
%(MFieldDefToCorba)s
} 

%(CloseNamespace)s
