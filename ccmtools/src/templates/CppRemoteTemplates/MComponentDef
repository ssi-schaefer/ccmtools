/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

#ifndef __%(Identifier)s__CCM__H__
#define __%(Identifier)s__CCM__H__

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

#include <ccmtools/remote/CCMContainer.h>

#include <%(StubsIncludeNamespace)s%(Identifier)s.h>

%(MSupportsDefInclude)s
%(MProvidesDefInclude)s
%(MUsesDefInclude)s

#include <%(LocalIncludeNamespace)s%(Identifier)s_gen.h> 
#include <%(LocalIncludeNamespace)s%(Identifier)s_share.h> 

%(OpenNamespace)s

//============================================================================
// Component remote adapter 
//============================================================================
class %(Identifier)s_impl :
    virtual public %(POAStubIdentifier)s,
    virtual public PortableServer::RefCountServantBase
{
    friend class CCM_%(Identifier)s_Context_impl;

  protected:
    %(LocalNamespace)s%(Identifier)s::SmartPtr local_adapter;
    ::ccmtools::remote::SessionContainer::SmartPtr ccm_container;

%(MProvidesDefAdapterVariable)s
%(MUsesDefAdapterVariable)s

  public:
    %(Identifier)s_impl(%(LocalNamespace)s%(Identifier)s::SmartPtr, 
        ::ccmtools::remote::SessionContainer::SmartPtr);
    virtual ~%(Identifier)s_impl ();

    // Component Attributes
%(MAttributeDefEqInterfaceHeader)s

    // Supported Interfaces
%(MSupportsDefEqInterfaceHeader)s

    // Equivalent interface methods handling facets
%(MProvidesDefEqInterfaceHeader)s

    // Equivalent interface methods handling receptacles
%(MUsesDefEqInterfaceHeader)s
%(MUsesDefGetAdapterHeader)s

    // Inherited Navigation interface
    CORBA::Object_ptr provide_facet(const char *);

    // Inherited Receptacles interface
    ::ccmtools::corba::Components::Cookie* connect(const char*, CORBA::Object_ptr);
    void disconnect(const char* name, ::ccmtools::corba::Components::Cookie*);

    // Inherited CCMObject interface
    ::ccmtools::corba::Components::CCMHome_ptr get_ccm_home();
    void configuration_complete();
    void remove();

    // Overload default implementation
    CORBA::Object_ptr _get_component();
};

%(CloseNamespace)s

#endif // HAVE_MICO
#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by %(CcmToolsVersion)s
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO  

#include <ccmtools/remote/PrimitiveConverter.h>
#include "%(Identifier)s_remote.h"

%(OpenNamespace)s

using namespace std;
using namespace wamas::platform::utils;

//============================================================================
// Component remote adapter 
//============================================================================

%(Identifier)s_impl::%(Identifier)s_impl(%(LocalNamespace)s%(Identifier)s::SmartPtr la, 
    ::ccmtools::remote::SessionContainer::SmartPtr c)
    : local_adapter(la), ccm_container (c)
{
%(MProvidesDefAdapterVariableInit)s
}

%(Identifier)s_impl::~%(Identifier)s_impl ()
{
}


/*
 * Component Attributes
 */

%(MAttributeDefEqInterfaceImpl)s


/*
 * Supported Interfaces
 */

%(MSupportsDefEqInterfaceImpl)s


/*
 * Equivalent interface methods handling facets
 */

%(MProvidesDefEqInterfaceImpl)s


/*
 * Equivalent interface methods handling receptacles
 */

%(MUsesDefEqInterfaceImpl)s


/*
 * Inherited Navigation interface
 */

CORBA::Object_ptr
%(Identifier)s_impl::provide_facet(const char* name)
{
%(MProvidesDefNavigationFacet)s
    throw ::ccmtools::corba::Components::InvalidName();
    return CORBA::Object::_nil();
}


/*
 * Inherited Receptacles interface
 */

::ccmtools::corba::Components::Cookie*
%(Identifier)s_impl::connect(const char* name, CORBA::Object_ptr ref)
{
%(MUsesDefReceptacleConnect)s
    throw ::ccmtools::corba::Components::InvalidName();
    return new ::ccmtools::remote::Cookie_impl();
}

void
%(Identifier)s_impl::disconnect(const char* name, ::ccmtools::corba::Components::Cookie* _ck)
{
%(MUsesDefReceptacleDisconnect)s
    throw ::ccmtools::corba::Components::InvalidName();
}


/*
 * Inherited CCMObject interface
 */

::ccmtools::corba::Components::CCMHome_ptr
%(Identifier)s_impl::get_ccm_home()
{
    return ccm_container->get_reference_for_home();
}

void
%(Identifier)s_impl::configuration_complete()
{
    ccm_container->configuration_complete (this); 
    local_adapter->configuration_complete();
}

void
%(Identifier)s_impl::remove()
{
    local_adapter->remove();
    ::ccmtools::corba::Components::CCMHome_var myhome = get_ccm_home ();
    ::ccmtools::corba::Components::CCMObject_var myself = 
        ccm_container->get_reference_for_component (this);
    myhome->remove_component (myself);
}


/*
 * Overload default implementation
 */

CORBA::Object_ptr
%(Identifier)s_impl::_get_component()
{
    return ccm_container->get_reference_for_component (this);
}

%(CloseNamespace)s

#endif // HAVE_MICO


