/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

#ifndef __%(Identifier)s__CCM__H__
#define __%(Identifier)s__CCM__H__

#include <WX/Utils/smartptr.h>
#include <WX/Utils/debug.h> 
#include <CCM/CCMContainer.h>

#include <%(IdlFileNamespace)s%(Identifier)s.h>

%(MSupportsDefInclude)s
%(MProvidesDefInclude)s
%(MUsesDefInclude)s

#include <CCM_Local/%(IncludeNamespace)s/%(Identifier)s_gen.h> 
#include <CCM_Local/%(IncludeNamespace)s/%(Identifier)s_share.h> 

%(OpenNamespace)s

//============================================================================
// Component remote adapter 
//============================================================================
class %(Identifier)s_impl :
    virtual public POA_%(ShortNamespace)s%(Identifier)s,
    virtual public PortableServer::RefCountServantBase
{
    friend class CCM_%(Identifier)s_Context_impl;

  private:
    CCM_Local%(Namespace)s::CCM_%(Identifier)s* local_adapter;
    CCM_Local%(Namespace)s::CCM_%(Identifier)s_Context* local_context;
    CCM::SessionContainer* ccm_container;

%(MProvidesDefAdapterVariable)s
%(MUsesDefAdapterVariable)s

  public:
    %(Identifier)s_impl(CCM_Local%(Namespace)s::CCM_%(Identifier)s*, 
        CCM::SessionContainer *);
    virtual ~%(Identifier)s_impl ();

    // Component Attributes
%(MAttributeDefEqInterfaceHeader)s

    // Supported Interfaces
%(MSupportsDefEqInterfaceHeader)s

    // Equivalent interface methods handling facets
%(MProvidesDefEqInterfaceHeader)s

    // Equivalent interface methods handling receptacles
%(MUsesDefEqInterfaceHeader)s
%(MUsesDefGetAdapterHeader)s

    // Inherited Navigation interface
    CORBA::Object_ptr provide_facet(const char *);

    // Inherited Receptacles interface
    Components::Cookie* connect(const char*, CORBA::Object_ptr);
    void disconnect(const char* name, Components::Cookie*);

    // Inherited CCMObject interface
    Components::CCMHome_ptr get_ccm_home();
    void configuration_complete();
    void remove();

    // Overload default implementation
    CORBA::Object_ptr _get_component();
};


//==========================================================================
// Context adapter class
//==========================================================================
class CCM_%(Identifier)s_Context_impl
    : public CCM_Local%(Namespace)s::CCM_%(Identifier)s_Context
{
  private:
    %(Identifier)s_impl* component_adapter;
    CCM::SessionContainer* ccm_container;

%(MUsesDefLocalAdapterHeader)s	
      
  public:
    CCM_%(Identifier)s_Context_impl(%(Identifier)s_impl* g, CCM::SessionContainer* co);
    virtual ~CCM_%(Identifier)s_Context_impl();
      
%(MUsesDefGetLocalAdapterHeader)s
      
    // Methods from CCMContext interface
    LocalComponents::HomeExecutorBase* get_CCM_home();
      
    // Methods from SessionContext interface
    LocalComponents::Object* get_CCM_object()
        throw (LocalComponents::IllegalState);
};


%(MProvidesDefAdapterHeader)s

%(MUsesDefAdapterHeader)s

%(CloseNamespace)s

#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

#include "%(Identifier)s_remote.h"

using namespace std;
using namespace WX::Utils;

%(OpenNamespace)s

//============================================================================
// Component remote adapter 
//============================================================================

%(Identifier)s_impl::%(Identifier)s_impl(CCM_Local%(Namespace)s::CCM_%(Identifier)s* i, 
    CCM::SessionContainer * c)
    : local_adapter(i), ccm_container (c)
{
    DEBUGNL("+%(Identifier)s_impl::%(Identifier)s_impl()");
    local_context = new CCM_%(Identifier)s_Context_impl(this,ccm_container); 
%(MProvidesDefAdapterVariableInit)s
}

%(Identifier)s_impl::~%(Identifier)s_impl ()
{
    DEBUGNL("-%(Identifier)s_impl::~%(Identifier)s_impl()");
    delete local_adapter; 
    delete local_context;
}


/*
 * Component Attributes
 */

%(MAttributeDefEqInterfaceImpl)s


/*
 * Supported Interfaces
 */

%(MSupportsDefEqInterfaceImpl)s


/*
 * Equivalent interface methods handling facets
 */

%(MProvidesDefEqInterfaceImpl)s


/*
 * Equivalent interface methods handling receptacles
 */

%(MUsesDefEqInterfaceImpl)s


/*
 * Inherited Navigation interface
 */

CORBA::Object_ptr
%(Identifier)s_impl::provide_facet(const char* name)
{
    DEBUGNL(" %(Identifier)s_impl::provide_facet()");

%(MProvidesDefNavigationFacet)s
    throw Components::InvalidName();
    return CORBA::Object::_nil ();
}


/*
 * Inherited Receptacles interface
 */

Components::Cookie *
%(Identifier)s_impl::connect(const char* name, CORBA::Object_ptr ref)
{
    DEBUGNL(" %(Identifier)s_impl::connect()");
%(MUsesDefReceptacleConnect)s
    throw Components::InvalidName();
    return new CCM::Cookie_impl;
}

void
%(Identifier)s_impl::disconnect(const char* name, Components::Cookie* _ck)
{
    DEBUGNL(" %(Identifier)s_impl::disconnect()");
%(MUsesDefReceptacleDisconnect)s
    throw Components::InvalidName();
}


/*
 * Inherited CCMObject interface
 */

Components::CCMHome_ptr
%(Identifier)s_impl::get_ccm_home()
{
    DEBUGNL(" %(Identifier)s_impl::get_ccm_home()");
    return ccm_container->get_reference_for_home();
}

void
%(Identifier)s_impl::configuration_complete()
{
    DEBUGNL(" %(Identifier)s_impl::configuration_complete()");
    ccm_container->configuration_complete (this); 
    local_adapter->set_session_context(local_context);
    local_adapter->ccm_activate ();
}

void
%(Identifier)s_impl::remove()
{
    DEBUGNL(" %(Identifier)s_impl::remove()");
    local_adapter->ccm_passivate();
    local_adapter->ccm_remove();
    Components::CCMHome_var myhome = get_ccm_home ();
    Components::CCMObject_var myself = ccm_container->get_reference_for_component (this);
    myhome->remove_component (myself);
}


/*
 * Overload default implementation
 */

CORBA::Object_ptr
%(Identifier)s_impl::_get_component()
{
    DEBUGNL(" %(Identifier)s_impl::_get_component()");
    return ccm_container->get_reference_for_component (this);
}


//============================================================================
// Component Context 
//============================================================================

CCM_%(Identifier)s_Context_impl::
CCM_%(Identifier)s_Context_impl(%(Identifier)s_impl* c, CCM::SessionContainer* co)
    : component_adapter(c), ccm_container(co)
{
    DEBUGNL("+CCM_%(Identifier)s_Context_impl->CCM_%(Identifier)s_Context_impl()");

%(MUsesDefContextInit)s	
}

CCM_%(Identifier)s_Context_impl::~CCM_%(Identifier)s_Context_impl()
{
    DEBUGNL("-CCM_%(Identifier)s_Context_impl->~CCM_%(Identifier)s_Context_impl()");
}

%(MUsesDefContextGetConnection)s

LocalComponents::HomeExecutorBase* 
CCM_%(Identifier)s_Context_impl::get_CCM_home()
{
    DEBUGNL(" CCM_%(Identifier)s_Context_impl->get_CCM_home()");
    // TODO
    return NULL;
}

LocalComponents::Object*
CCM_%(Identifier)s_Context_impl::get_CCM_object()
    throw(LocalComponents::IllegalState)
{
    DEBUGNL(" CCM_%(Identifier)s_Context_impl->get_CCM_object()");
    // TODO
    return NULL;
}


%(MProvidesDefAdapterImpl)s


%(MUsesDefAdapterImpl)s


%(CloseNamespace)s



