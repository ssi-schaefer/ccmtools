/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by %(CcmToolsVersion)s.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated. 
 * All component ports will be connected to the mirror component's ports. 
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 ***/

#include <cassert>
#include <iostream>

#include <Components/ccmtools.h>

// entry points for '%(AbsoluteLocalHomeName)s'
#include <%(AbsoluteLocalHomeName)s_entry.h>
#include <%(AbsoluteLocalHomeName)sMirror_entry.h>

// local adapters
#include <%(HomeInclude)s_gen.h>
#include <%(HomeInclude)sMirror_gen.h>

using namespace std;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;

    %(LocalNamespace)s%(Identifier)s::SmartPtr my%(Identifier)s;
    %(LocalNamespace)s%(Identifier)sMirror::SmartPtr my%(Identifier)sMirror;
%(MProvidesDefVariable)s
%(MProvidesDefCookie)s
%(MUsesDefVariable)s
%(MUsesDefCookie)s


    int error = 0;
    Components::HomeFinder* homeFinder = Components::HomeFinder::Instance();
    error  = deploy_%(AbsoluteLocalHomeName)s("%(HomeType)s");
    error += deploy_%(AbsoluteLocalHomeName)sMirror("%(HomeType)sMirror");	             
    if(error) 
    {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }


    try 
    {
        %(LocalNamespace)s%(HomeType)s::SmartPtr my%(HomeType)s(
            dynamic_cast< %(LocalNamespace)s%(HomeType)s*>(
                homeFinder->find_home_by_name("%(HomeType)s").ptr()));

        %(LocalNamespace)s%(HomeType)sMirror::SmartPtr my%(HomeType)sMirror(
            dynamic_cast< %(LocalNamespace)s%(HomeType)sMirror*>(
                homeFinder->find_home_by_name("%(HomeType)sMirror").ptr()));

        my%(Identifier)s = my%(HomeType)s->create();
        my%(Identifier)sMirror = my%(HomeType)sMirror->create();

%(MProvidesDefCreate)s
%(MUsesDefCreate)s
%(MProvidesDefConnect)s
%(MUsesDefConnect)s

        my%(Identifier)s->configuration_complete();
        my%(Identifier)sMirror->configuration_complete();

        // OPTIONAL : IMPLEMENT TEST CASES HERE !

%(MProvidesDefDisconnect)s
%(MUsesDefDisconnect)s
        my%(Identifier)s->remove();
        my%(Identifier)sMirror->remove();
    } 
    catch(Components::HomeNotFound) 
    {
        cout << "DEPLOYMENT ERROR: can't find a home!" << endl;
        return -1;
    } 
    catch(Components::NotImplemented& e) 
    {
        cout << "DEPLOYMENT ERROR: function not implemented: " << e.what() << endl;
        return -1;
    }  
    catch(Components::InvalidName& e) 
    {
        cout << "DEPLOYMENT ERROR: invalid name during connection: " << e.what() << endl;
        return -1;
    }
    catch(...)  
    {
        cout << "DEPLOYMENT ERROR: there is something wrong!" << endl;
        return -1;
    }
  
    error  = undeploy_%(AbsoluteLocalHomeName)s("%(HomeType)s");
    error += undeploy_%(AbsoluteLocalHomeName)sMirror("%(HomeType)sMirror");
    if(error) 
    {
        cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
        return error;
    }
    else
    {    
        Components::HomeFinder::destroy(); // Clean up HomeFinder singleton
    }
    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}

