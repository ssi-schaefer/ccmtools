/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by %(CcmToolsVersion)s.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated. 
 * All component ports will be connected to the mirror component's ports. 
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 ***/

#include <cassert>
#include <iostream>

#include <wamas/platform/utils/debug.h>
#include <wamas/platform/utils/smartptr.h>

#include <Components/ccm/local/CCM.h>
#include <ccm/local/HomeFinder.h>

#include <%(ComponentInclude)s/%(Identifier)sMirror_gen.h>
#include <%(ComponentInclude)s/%(HomeType)sMirror_gen.h>

#include <%(ComponentInclude)s/%(Identifier)s_gen.h>
#include <%(ComponentInclude)s/%(HomeType)s_gen.h>

using namespace std;
using namespace wamas::platform::utils;
using namespace ccm::local;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;

    SmartPtr< %(LocalNamespace)s::%(Identifier)s> my%(Identifier)s;
    SmartPtr< %(LocalNamespace)s::%(Identifier)sMirror> my%(Identifier)sMirror;
%(MProvidesDefVariable)s
%(MProvidesDefCookie)s
%(MUsesDefVariable)s
%(MUsesDefCookie)s


    // Component bootstrap:
    // We get an instance of the local HomeFinder and register the deployed
    // component- and mirror component home.
    // Here we can also decide to use a Design by Contract component.  	
    int error = 0;
    ::Components::ccm::local::HomeFinder* homeFinder = HomeFinder::Instance();
    error  = deploy_%(LocalNamespaceMangled)s_%(HomeType)s("%(HomeType)s");
    error += deploy_%(LocalNamespaceMangled)s_%(HomeType)sMirror("%(HomeType)sMirror");	
             
    if(error) {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }


    // Component deployment:
    // We use the HomeFinder method find_home_by_name() to get a smart pointer 
    // to a component home. From a component home, we get a smart pointer to a 
    // component instance using the create() method.
    // Component and mirror component are connected via provide_facet() and 
    // connect() methods.
    // The last step of deployment is to call configuration_complete() that 
    // forces components to run the ccm_set_session_context() and ccm_activate() 
    // callback methods.
    try {
        SmartPtr< %(LocalNamespace)s::%(HomeType)s> my%(HomeType)s(
            dynamic_cast< %(LocalNamespace)s::%(HomeType)s*>
            (homeFinder->find_home_by_name("%(HomeType)s").ptr()));

        SmartPtr< %(LocalNamespace)s::%(HomeType)sMirror> 
            my%(HomeType)sMirror(dynamic_cast< %(LocalNamespace)s::%(HomeType)sMirror*>
            (homeFinder->find_home_by_name("%(HomeType)sMirror").ptr()));

        my%(Identifier)s = my%(HomeType)s->create();
        my%(Identifier)sMirror = my%(HomeType)sMirror->create();

%(MProvidesDefCreate)s
%(MUsesDefCreate)s
%(MProvidesDefConnect)s
%(MUsesDefConnect)s

        my%(Identifier)s->configuration_complete();
        my%(Identifier)sMirror->configuration_complete();
    } 
    catch(::Components::ccm::local::HomeNotFound ) {
        cout << "DEPLOYMENT ERROR: can't find a home!" << endl;
        error = -1;
    } 
    catch(::Components::ccm::local::NotImplemented& e ) {
        cout << "DEPLOYMENT ERROR: function not implemented: " 
	     << e.what (  ) << endl;
        error = -1;
    }  
    catch(::Components::ccm::local::InvalidName& e ) {
        cout << "DEPLOYMENT ERROR: invalid name during connection: " 
             << e.what (  ) << endl;
        error = -1;
    }
    catch ( ... )  {
        cout << "DEPLOYMENT ERROR: there is something wrong!" << endl;
        error = -1;
    }
    if (error < 0) {
        return error;
    }


    // Component test:
    // After component deployment, we can access components and their facets.
    // Usually, the test cases for facets and receptacles are implemened in the
    // mirror component. But for supported interfaces and component attributes, 
    // we can realize test cases in the following section.
    try {

        // OPTIONAL : IMPLEMENT TEST CASES HERE !

    } 
    catch(::Components::ccm::local::NotImplemented& e ) {
        cout << "TEST: function not implemented: " << e.what (  ) << endl;
        error = -1;
    }
    catch(...) {
        cout << "TEST: there is something wrong!" << endl;
        error = -1;
    }
    if(error < 0) {
        return error;
    }
  

    // Component tear down:
    // Finally, the component and mirror component instances are disconnected 
    // and removed. Thus component homes can be undeployed.
    try {
%(MProvidesDefDisconnect)s
%(MUsesDefDisconnect)s
        my%(Identifier)s->remove();
        my%(Identifier)sMirror->remove();
    } 
    catch(::Components::ccm::local::HomeNotFound ) {
        cout << "TEARDOWN ERROR: can't find a home!" << endl;
        error = -1;
    } 
    catch(::Components::ccm::local::NotImplemented& e ) {
        cout << "TEARDOWN ERROR: function not implemented: " 
	     << e.what (  ) << endl;
        error = -1;
    } 
    catch(...) {
        cout << "TEARDOWN ERROR: there is something wrong!" << endl;
        error = -1;
    }
    error += undeploy_%(LocalNamespaceMangled)s_%(HomeType)s("%(HomeType)s");
    error += undeploy_%(LocalNamespaceMangled)s_%(HomeType)sMirror("%(HomeType)sMirror");
    if(error) {
        cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
        return error;
    }
        
    // Clean up HomeFinder singleton
    HomeFinder::destroy();
    
    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}

