$Id$

This is a CCM Tools binary distribution tarball. It contains the essential
libraries and scripts needed to use the CCM Tools for component generation,
deployment, and management.

INSTALLATION
============

1. Unpack the tarball where you want it installed.

   ~ $ tar zxvf ccmtools-A.B.X.bin.tar.gz
   ccmtools-A.B.X/
   ccmtools-A.B.X/share/
   ccmtools-A.B.X/share/ccmtools-A.B/
   ccmtools-A.B.X/share/ccmtools-A.B/IDL3Generator/
   ccmtools-A.B.X/share/ccmtools-A.B/IDL3Generator/MAliasDef
   :
   :
   ccmtools-A.B.X/doc/api/serialized-form.html
   ccmtools-A.B.X/doc/api/package-list
   ccmtools-A.B.X/doc/api/help-doc.html
   ccmtools-A.B.X/doc/api/stylesheet.css
   ccmtools-A.B.X/README.binary

   It is *extremely* important not to play with the relative paths that are
   unpacked! Don't go and move the "bin" subdirectory to someplace other than
   where you move the "share" subdirectory. The CCM Tools will not work
   otherwise. In fact, it's best to not move anything at all after you unpack
   the tarball.

2. Update your CCMTOOLS_HOME, CLASSPATH, and PATH environment variables to
   include the CCM Tools Jar files and scripts. Using bash this might look
   something like the following :

   ~ $ cd ccmtools-A.B.X
   ccmtools-A.B.X $ export CCMTOOLS_HOME=`pwd`
   ccmtools-A.B.X $ export CLASSPATH=${CLASSPATH}:`pwd`/share/antlr.jar
   ccmtools-A.B.X $ export CLASSPATH=${CLASSPATH}:`pwd`/share/ccmtools.jar
   ccmtools-A.B.X $ export PATH=${PATH}:`pwd`/bin

   CCMTOOLS_HOME needs to point to the base directory that gets unzipped when
   you unpack the tarball. The CLASSPATH needs to include the CCM Tools and
   Antlr Jar files. The PATH needs to include the binary directory, where the
   CCM Tools scripts reside.

RUNNING
=======

The CCM Tools currently concentrate on C++ component development. Use the
"ccmtools-c++-{generate|make|install|uninstall}" scripts to drive the Java
classes. All scripts require Python (http://python.org/) to run. Deploying
components requires Confix (http://confix.sourceforge.net/).

The basic development process is thought of as follows :

1. Change directories to your component development directory.

2. Edit/create all source IDL files required for your components.

3. Set the CCMTOOLS_PACKAGE environment variable to the name of your component
   set.

4. Run "ccmtools-c++-generate [options] *.idl" to generate component code and
   skeleton application logic files. Use "ccmtools-c++-generate --help" to get a
   list of available options. (All three "ccmtools-c++-*" scripts support the
   GNU standard options of "--help" and "--version", along with other
   script-specific options.)

5. Edit the *_app.cc and *_user_types.h files.

6. Run "ccmtools-c++-make" to compile and test the components.

7. Run "ccmtools-c++-install" to install the components.

8. If you need to later, run "ccmtools-c++-uninstall" to uninstall the
   components.

If you want to use the CCM Tools for another code generation purpose, use the
more generic "ccmtools-generate" script.

DOCUMENTATION
=============

All CCM Tools documents are included in the "doc" subdirectory of the
distribution. These currently include developer documentation and Javadoc API
documentation. A User Guid is planned for the near future.

LIMITATIONS
===========

The CCM Tools are in an alpha stage of development. There are most certainly
bugs, but only by testing them in real development scenarios can we find them
all.

Known limitations of the CCM Tools include (but are not limited to) the
following :

o Source IDL files must all reside within one directory.

o Unions and events are not implemented in any code generators yet.

o Altering the IDL files requires component regeneration. This is a very tricky
  process, especially if an interface change happens after there are multiple
  implemented components. Regenerating a component with an altered interface
  will likely require rewriting all of that component's implementation code
  (located in the *_app.cc files after you generate the component code).

  For this reason, be warned that altering your source IDL files is highly
  discouraged! IDL interfaces need to be defined once and altered only when
  absolutely necessary. This must simply be part of the development process.

o Most IDL categories (components, homes, interfaces, etc.) do not allow
  repeated identifiers. That is, there can only be one component named
  'Calculator', even if the two components are in different namespaces.
