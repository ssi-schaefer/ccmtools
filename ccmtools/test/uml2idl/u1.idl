/*

This file was automatically generated by 'uml2idl'.
'uml2idl' is part of the "CCM tools" project (http://ccmtools.sourceforge.net).

DO NOT EDIT!

*/


/*
XMI.documentation
  XMI.exporter
    MagicDraw UML
  XMI.exporterVersion
    5.5i
*/


/* begin model 'Data' */

module Parent {
}; /* module Parent */

module Package2 {
    struct Struct3 {
        short value;
    };

}; /* module Package2 */

module Package1 {
    module Child1 {
        struct Struct1 {
            double myValue;
            Package2::Struct3 extra;
        };

        interface Interface1 {
            attribute string myStringAttr;
            attribute Struct1 myStructAttr;
            string Operation1(in int index);
        };

    }; /* module Child1 */

    local interface LocalInterface {
        struct Struct2 {
            int value;
        };

    };

}; /* module Package1 */

/* begin model 'Documentation' */

module docModule {
    module Parent {
        module Child {
        }; /* module Child */

    }; /* module Parent */

}; /* module docModule */

module docInterface {
    local interface I1 {
    };

    abstract interface I2 {
    };

    interface I4 {
    };

    interface I3 : I2, I4 {
        struct S1 {
            long value;
        };

        attribute string myAttr;
        attribute S1 myStruct;
        long myOp(in double param);
    };

}; /* module docInterface */

module docStruct {
    struct A {
        struct B {
            short k;
            long j;
        };

        string q;
        B p;
    };

}; /* module docStruct */

module docConst {
    const short S = 3;

    interface A {
        const long L = S+20;
    };

}; /* module docConst */

module docEnum {
    enum Type {
        TYPE_INTEGER,
        TYPE_FLOAT,
        TYPE_COMPLEX
    };

    struct Value {
        string name;
        Type type;
    };

}; /* module docEnum */

module docTypedef {
    interface Interface1 {
    };

    typedef Interface1 MyInterface1;

    typedef string MyString;

}; /* module docTypedef */

module docSequence {
    typedef sequence< short > ShortSequence;

    typedef sequence< float > Anonymous1;

    typedef sequence< Anonymous1 > FloatMatrix;

    struct Struct1 {
        double value;
    };

    typedef sequence< Struct1 , 5 > Struct1Seq;  /* range: 0..4 */

}; /* module docSequence */

module docArray {
    struct MyStruct {
        long value;
    };

    typedef MyStruct MyArray[5][10];  /* range: [0..4][0..9] */

    typedef MyStruct Anonymous2[4];  /* range: [0..3] */

    struct Data1 {
        Anonymous2 field;
    };

}; /* module docArray */

module docException {
    interface Tex {
        exception Badness2000 {
            string err_msg;
        };

        void process_token(in string tok) raises (Badness2000);
    };

}; /* module docException */

module docValuetype {
    struct Date {
        string value;
    };

    interface PrettyPrint {
        string print();
    };

    valuetype Time {
        public short hour;
        public short minute;
    };

    valuetype DateAndTime : Time supports PrettyPrint {
        private Date the_date;
        factory init(in short hr, in short min);
        Date getDate();
    };

    valuetype BoxedDate Date;

}; /* module docValuetype */

module docEvent {
    abstract eventtype MyEvent {
    };

    eventtype Event1 : MyEvent {
    };

    eventtype Event2 : MyEvent {
    };

}; /* module docEvent */

module docAttribute {
    struct MyStruct {
        string value;
    };

    interface MyInterface {
        attribute long number;
        readonly attribute float myReadonlyValue;
        readonly attribute MyStruct value2;
        attribute MyStruct value1;
    };

    interface UglyInterface {
        readonly attribute long readonlyValue raises(MyException);
        attribute long value1 getraises(MyGetException) setraises(MySetException);
    };

}; /* module docAttribute */

module docComponent {
    interface I1 {
    };

    interface I2 {
    };

    interface Facet1 {
    };

    component Comp1 supports I2, I1 {
        attribute long value1;
        uses Facet1 hook;
    };

    interface Facet2 {
    };

    eventtype MyEvent {
    };

    interface Facet3 {
    };

    interface I3 {
    };

    component Comp2 : Comp1 supports I3 {
        uses Facet2 receptacle1;
        provides Facet1 facet1;
        consumes MyEvent event3;
        uses multiple Facet3 receptacle2;
        publishes MyEvent event2;
        emits MyEvent event1;
    };

}; /* module docComponent */

module docHome {
    interface I1 {
    };

    component Comp1 {
        uses I1 hook;
    };

    home Home1 manages Comp1 primarykey Key {
        attribute long value;
        string print();
        finder findByName(in string name);
        factory create(in string name);
    };

    interface I2 {
    };

    home Home2 : Home1 supports I2 {
    };

}; /* module docHome */

module docUnion {
    enum Contents {
        INTEGER_CL,
        FLOAT_CL,
        COMPLEX_CL,
        STRUCTURED_CL,
        DOUBLE_CL
    };

    union Reading switch(Contents) {
        case INTEGER_CL: long a_long;
        case FLOAT_CL: case DOUBLE_CL: double a_double;
        default: any an_any;
    };

    struct PropertyValue {
        string value;
    };

    union ValOpt switch(boolean) {
        case TRUE: docUnion::PropertyValue pv;
    };

}; /* module docUnion */

/* end model 'Documentation' */

module Example1 {
    interface Printer {
        string print();
    };

    struct Vertex {
        double x;
        double y;
    };

    interface Line : Printer {
        attribute Vertex startPoint;
        attribute Vertex endPoint;
    };

}; /* module Example1 */

module ITI {
    interface Math {
        attribute long value1;
        attribute double value2;
        double sqrt(in double x);
        void dummy(in long x, in long y);
    };

}; /* module ITI */

/* end model 'Data' */

