/***
 * CCM Tools Test Client
 *
 * This file was automatically generated by the CCM Tools.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated.
 * All component ports will be connected to the mirror component's ports.
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 ***/

#include <cassert>
#include <iostream>

#include <Components/ccmtools.h>

#include <TestHome_entry.h>
#include <TestHome_gen.h>

using namespace std;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;

    Test::SmartPtr myTest;

    int error = 0;
    Components::HomeFinder* homeFinder = Components::HomeFinder::Instance();
    error = deploy_TestHome("TestHome");
    if(error)
    {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }

    try
    {
        TestHome::SmartPtr myTestHome(dynamic_cast<TestHome*>(
            homeFinder->find_home_by_name("TestHome").ptr()));

        myTest = myTestHome->create();
        myTest->configuration_complete();

		{
	  		const long maxSize = 10;
	  		myTest->max_size(maxSize);
	  		assert(myTest->max_size() == maxSize);
      	}

        myTest->remove();
    }
    catch ( Components::HomeNotFound )
    {
        cout << "DEPLOYMENT ERROR: can't find a home!" << endl;
        return -1;
    }
    catch ( Components::NotImplemented& e )
    {
        cout << "DEPLOYMENT ERROR: function not implemented: "
	     << e.what (  ) << endl;
        return -1;
    }
    catch ( Components::InvalidName& e )
    {
        cout << "DEPLOYMENT ERROR: invalid name during connection: "
             << e.what (  ) << endl;
        return -1;
    }
    catch ( ... )
    {
        cout << "DEPLOYMENT ERROR: there is something wrong!" << endl;
        return -1;
    }
    if (error < 0)
    {
        return error;
    }

    error += undeploy_TestHome("TestHome");
    if(error)
    {
        cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
        return error;
    }

    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}
