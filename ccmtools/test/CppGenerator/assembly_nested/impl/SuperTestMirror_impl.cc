
/***
 * This file was automatically generated by 
 * <http://ccmtools.sourceforge.net/>
 *
 * SuperTest_mirror component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>

#include "SuperTestMirror_impl.h"
#include "SuperTestMirror_innerBasicType_impl.h"
#include "SuperTestMirror_innerUserType_impl.h"


namespace ccm {
namespace local {

using namespace std;
using namespace wamas::platform::utils;

//==============================================================================
// CCM_SuperTestMirror - component implementation
//==============================================================================

SuperTestMirror_impl::SuperTestMirror_impl()
{
}

SuperTestMirror_impl::~SuperTestMirror_impl()
{
}

void
SuperTestMirror_impl::set_session_context(
    Components::ccm::local::SessionContext* context)
    throw(Components::ccm::local::CCMException)
{
    ctx = dynamic_cast<CCM_SuperTestMirror_Context*>(context);
}

void
SuperTestMirror_impl::ccm_activate()
    throw(Components::ccm::local::CCMException)
{
    {
      // basic types test cases
      SmartPtr<CCM_BasicTypeInterface> basicType = ctx->get_connection_basicType();

      {
	short short_2=3, short_3, short_r;
	short_r = basicType->f1(7,short_2, short_3);
	assert(short_2 == 7);
	assert(short_3 == 3);
	assert(short_r == 3+7);
	cout << "BasicTypeInterface::f1() passed" << endl;
      }

      {
	long long_2=3, long_3, long_r;
	long_r = basicType->f2(7,long_2, long_3);
	assert(long_2 == 7);
	assert(long_3 == 3);
	assert(long_r == 3+7);
	cout << "BasicTypeInterface::f2() passed" << endl;
      }

      {
	unsigned short ushort_2=3, ushort_3, ushort_r;
	ushort_r = basicType->f3(7,ushort_2, ushort_3);
	assert(ushort_2 == 7);
	assert(ushort_3 == 3);
	assert(ushort_r == 3+7);
	cout << "BasicTypeInterface::f3() passed" << endl;      
      }

      {
	unsigned long ulong_2=3, ulong_3, ulong_r;
	ulong_r = basicType->f4(7,ulong_2, ulong_3);
	assert(ulong_2 == 7);
	assert(ulong_3 == 3);
	assert(ulong_r == 3+7);
	cout << "BasicTypeInterface::f4() passed" << endl;
      }

      {
	float float_2=3.0, float_3, float_r;
	float_r = basicType->f5(7.0,float_2, float_3);
	assert(float_2 == 7.0);
	assert(float_3 == 3.0);
	assert(float_r == 3.0+7.0);
	cout << "BasicTypeInterface::f5() passed" << endl;
      }

      {
	double double_2=3.0, double_3, double_r;
	double_r = basicType->f6(7.0,double_2, double_3);
	assert(double_2 == 7.0);
	assert(double_3 == 3.0);
	assert(double_r == 3.0+7.0);
	cout << "BasicTypeInterface::f6() passed" << endl;
      }

      {	
	char char_2=3, char_3, char_r;
	char_r = basicType->f7(7,char_2, char_3);
	assert(char_2 == 7);
	assert(char_3 == 3);
	assert(char_r == 3+7);
	cout << "BasicTypeInterface::f7() passed" << endl;
      }

      {
	string string_2="drei", string_3, string_r;
	string_r = basicType->f8("sieben",string_2, string_3);
	assert(string_2 == "sieben");
	assert(string_3 == "drei");
	assert(string_r == "dreisieben");
	cout << "BasicTypeInterface::f8() passed" << endl;
      }

      {	
	bool bool_2=false, bool_3, bool_r;
	bool_r = basicType->f9(true, bool_2, bool_3);
	assert(bool_2 == true);
	assert(bool_3 == false);
	assert(bool_r == false && true);
	cout << "BasicTypeInterface::f9() passed" << endl;
      }

      {
	unsigned char uchar_2=3, uchar_3, uchar_r;
	uchar_r = basicType->f10(7,uchar_2, uchar_3);
	assert(uchar_2 == 7);
	assert(uchar_3 == 3);
	assert(uchar_r == 3+7);
	cout << "BasicTypeInterface::f10() passed" << endl;
      }
    }


    {
      // user types test cases
      SmartPtr<CCM_UserTypeInterface> userType = ctx->get_connection_userType();
      {
	// Test case: enum Color {red, green, blue, black, orange}; 
	Color Color_2,Color_3, Color_r;
	Color_2 = Color(blue);
	Color_r = userType->f1(Color(red),Color_2, Color_3);
	assert(Color_2 == Color(red));
	assert(Color_3 == Color(blue));
	assert(Color_r == Color(red));
	cout << "UserTypeInterface::f1() passed" << endl;
      }

      {
	// test case: struct Person { long id; string name; };
	Person p1, p2, p3, result;
	p1.name = "Egon"; 
	p1.id = 3;
	p2.name = "Andrea"; 
	p2.id = 23;
	result = userType->f2(p1,p2,p3);
	assert(p3.name == "Andrea");
	assert(p3.id == 23); 
	assert(p2.name == "Egon");
	assert(p2.id == 3); 
	assert(result.name  == "EgonAndrea");
	assert(result.id == 26);
	cout << "UserTypeInterface::f2() passed" << endl;
      }

      {
	// test case: struct Address{ long id; string name; Person resident };
	Address p1, p2, p3, result;
	Person person;
	
	p1.street = "Waltendorf";   
	p1.number = 7;
	person.name = "Egon";   
	person.id   = 3;
	p1.resident = person;
	
	p2.street   = "Petersgasse"; 
	p2.number   =17;
	person.name = "Andrea";   
	person.id   = 23;
	p2.resident = person;
	
	result = userType->f3(p1,p2,p3);
	
	assert(p3.street == "Petersgasse");
	assert(p3.number == 17);
	assert(p3.resident.name == "Andrea");
	assert(p3.resident.id == 23);
	
	assert(p2.street == "Waltendorf");
	assert(p2.number == 7);
	assert(p2.resident.name == "Egon");
	assert(p2.resident.id == 3);
	
	assert(result.street == "WaltendorfPetersgasse");
	assert(result.number == 24);
	assert(result.resident.name == "EgonAndrea");
	assert(result.resident.id == 26);
	cout << "UserTypeInterface::f3() passed" << endl;
      }

      {
	// Test case: typedef sequence<list> LongList;
	LongList p1, p2, p3, result;
	const unsigned int size = 11;
	for(int i=0;i<(int)size;i++) {
	  p1.push_back(i);
	  p2.push_back(i+i);
	}
	
	result = userType->f4(p1, p2, p3);
	
	assert(result.size() == size);
	for(unsigned int i=0;i<result.size();i++) {
	  long p = result.at(i);
	  assert(p == (long)i);
	}
	
	assert(p2.size() == size);
	for(unsigned int i=0;i<p2.size();i++) {
	  long p = p2.at(i);
	  assert(p == (long)i);
	}
	
	assert(p3.size() == size);
	for(unsigned int i=0;i<p3.size();i++) {
	  long p = p3.at(i);
	  assert(p == (long)(i+i));
	}
	cout << "UserTypeInterface::f4() passed" << endl;
      }
      
      {
	// Test case: typedef sequence<string> StringList;
	StringList p1, p2, p3, result;
	const unsigned int size = 7;
	for(int i=0;i<(int)size;i++) {
	  p1.push_back("one");
	  p2.push_back("two");
	}
	
	result = userType->f5(p1, p2, p3);
	
	assert(result.size() == size);
	for(unsigned int i=0;i<result.size();i++) {
	  string p = result.at(i);
	  assert(p == "Test");
	}
	
	assert(p2.size() == size);
	for(unsigned int i=0;i<p2.size();i++) {
	  string p = p2.at(i);
	  assert(p == "one");
	}
	
	assert(p3.size() == size);
	for(unsigned int i=0;i<p3.size();i++) {
	  string p = p3.at(i);
	  assert(p == "two");
	}
	cout << "UserTypeInterface::f5() passed" << endl;
      }

      {
	// Test case: typedef sequence<Person> PersonList;
	PersonList pl1, pl2, pl3, result;
	const unsigned int size = 8;
	for(int i=0;i<(int)size;i++) {
	  Person p1, p2;
	  p1.name = "Egon";
	  p1.id = i;
	  pl1.push_back(p1);
	  p2.name = "Andrea";
	  p2.id = i+i;
	  pl2.push_back(p2);
	}

	result = userType->f6(pl1, pl2, pl3);

	assert(result.size() == size);
	for(unsigned int i=0;i<result.size();i++) {
	  Person p = result.at(i);
	  assert(p.id == (long)i);
	  assert(p.name == "Test");
	}
	assert(pl2.size() == size);
	for(unsigned int i=0;i<pl2.size();i++) {
	  Person p = pl2.at(i);
	  assert(p.id == (long)i);
	  assert(p.name == "Egon");
	}
	assert(pl3.size() == size);
	for(unsigned int i=0;i<pl3.size();i++) {
	  Person p = pl3.at(i);
	  assert(p.id == (long)(i+i));
	  assert(p.name == "Andrea");
	}
	cout << "UserTypeInterface::f6() passed" << endl;
      }
      
      {
	// test case: typedef long time_t;
	const ccm::local::time_t p1 = 7;
	ccm::local::time_t p2 = 3, p3, result;
	result = userType->f7(p1, p2, p3);
	assert(p2 == 7);
	assert(p3 == 3);
	assert(result == 3+7);
	cout << "UserTypeInterface::f7() passed" << endl;
      }
    }
}

void
SuperTestMirror_impl::ccm_passivate()
    throw(Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
SuperTestMirror_impl::ccm_remove()
    throw(Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

//==============================================================================
// CCM_BasicTypeInterface facet implementation
//==============================================================================

CCM_BasicTypeInterface*
SuperTestMirror_impl::get_innerBasicType()
{
    SuperTestMirror_innerBasicType_impl* facet = new SuperTestMirror_innerBasicType_impl(this);
    return dynamic_cast<CCM_BasicTypeInterface*>(facet);
}

//==============================================================================
// CCM_UserTypeInterface facet implementation
//==============================================================================

CCM_UserTypeInterface*
SuperTestMirror_impl::get_innerUserType()
{
    SuperTestMirror_innerUserType_impl* facet = new SuperTestMirror_innerUserType_impl(this);
    return dynamic_cast<CCM_UserTypeInterface*>(facet);
}

} // /namespace local
} // /namespace ccm

