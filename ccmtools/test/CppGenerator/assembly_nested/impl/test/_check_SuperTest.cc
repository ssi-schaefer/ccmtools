/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by .
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated. 
 * All component ports will be connected to the mirror component's ports. 
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 ***/

#include <cassert>
#include <iostream>

#include <wamas/platform/utils/smartptr.h>

#include <Components/ccm/local/CCM.h>
#include <ccm/local/HomeFinder.h>
#include <ccm/local/AssemblyFactory.h>

#include <SuperTestHomeMirror_gen.h>
#include <SuperTestHome_gen.h>
#include <BasicTestHome_gen.h>
#include <UserTestHome_gen.h>

#include <assembly.h>

using namespace std;
using namespace wamas::platform::utils;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;

    SmartPtr<SuperTest> mySuperTest;
    SmartPtr<SuperTestMirror> mySuperTestMirror;
    SmartPtr<Components::ccm::local::Object> SuperTest_provides_basicType;
    SmartPtr<Components::ccm::local::Object> SuperTest_provides_userType;

    Components::ccm::local::Cookie SuperTest_ck_basicType;
    Components::ccm::local::Cookie SuperTest_ck_userType;

    SmartPtr<Components::ccm::local::Object> SuperTest_uses_innerBasicType;
    SmartPtr<Components::ccm::local::Object> SuperTest_uses_innerUserType;

    Components::ccm::local::Cookie SuperTest_ck_innerBasicType;
    Components::ccm::local::Cookie SuperTest_ck_innerUserType;

    int error = 0;
    

    error  += deploy_BasicTestHome("BasicTestHome");
    error  += deploy_UserTestHome("UserTestHome");

    SmartPtr<Components::ccm::local::AssemblyFactory> assembly_factory(new ccm::local::AssemblyFactory<Assembly>());
    error += deploy_with_assembly_SuperTestHome("SuperTestHome", assembly_factory);

    error += deploy_SuperTestHomeMirror("SuperTestHomeMirror");	
    if(error) 
    {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }

    try 
    {
    		Components::ccm::local::HomeFinder* homeFinder = ccm::local::HomeFinder::Instance();
        SmartPtr<SuperTestHome> mySuperTestHome(dynamic_cast<SuperTestHome*>
            (homeFinder->find_home_by_name("SuperTestHome").ptr()));

        SmartPtr<SuperTestHomeMirror> mySuperTestHomeMirror(dynamic_cast<SuperTestHomeMirror*>
            (homeFinder->find_home_by_name("SuperTestHomeMirror").ptr()));

        mySuperTest = mySuperTestHome->create();
        mySuperTestMirror = mySuperTestHomeMirror->create();

        SuperTest_provides_basicType = mySuperTest->provide_facet("basicType");
        SuperTest_provides_userType = mySuperTest->provide_facet("userType");

		mySuperTestMirror->connect("basicType", SuperTest_provides_basicType);
        mySuperTestMirror->connect("userType", SuperTest_provides_userType);

        mySuperTest->configuration_complete();
        mySuperTestMirror->configuration_complete();


      	mySuperTestMirror->disconnect("basicType", SuperTest_ck_basicType);
      	mySuperTestMirror->disconnect("userType", SuperTest_ck_userType);

      	mySuperTest->remove();
      	mySuperTestMirror->remove();
    } 
    catch (Components::ccm::local::HomeNotFound ) 
    {
        cout << "DEPLOYMENT ERROR: can't find a home!" << endl;
        return -1;
    } 
    catch (Components::ccm::local::NotImplemented& e ) 
    {
        cout << "DEPLOYMENT ERROR: function not implemented: " 
	     << e.what (  ) << endl;
        return -1;
    }  
    catch (Components::ccm::local::InvalidName& e ) 
    {
        cout << "DEPLOYMENT ERROR: invalid name during connection: " 
             << e.what (  ) << endl;
        return -1;
    }
    catch ( ... )  
    {
        cout << "DEPLOYMENT ERROR: there is something wrong!" << endl;
        return -1;
    }

    error =  undeploy_BasicTestHome("BasicTestHome");
    error += undeploy_UserTestHome("UserTestHome");
    error += undeploy_SuperTestHome("SuperTestHome");
    error += undeploy_SuperTestHomeMirror("SuperTestHomeMirror");
    if(error) 
    {
        cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
        return error;
    }
    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}
