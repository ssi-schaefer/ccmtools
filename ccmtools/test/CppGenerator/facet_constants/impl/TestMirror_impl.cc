
/***
 * This file was automatically generated by CCM Tools version 0.5.4
 * <http://ccmtools.sourceforge.net/>
 *
 * TestMirror component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>
#include <cmath>

#include "TestMirror_impl.h"

using namespace std;
using namespace wamas::platform::utils;

//==============================================================================
// CCM_TestMirror - component implementation
//==============================================================================

TestMirror_impl::TestMirror_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

TestMirror_impl::~TestMirror_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
TestMirror_impl::set_session_context(
    ::Components::SessionContext* context)
    throw(::Components::CCMException)
{
    ctx = dynamic_cast<ccm::local::CCM_TestMirror_Context*>(context);
}

void
TestMirror_impl::ccm_activate()
    throw(::Components::CCMException)
{
   SmartPtr<CCM_Constants> constants = ctx->get_connection_iface();
   {
     //  const boolean BOOLEAN_CONST = TRUE;
     bool initial = true;
     bool result = constants->getBooleanValue();
     assert(initial == result);
   }

   {
     //  const octet OCTET_CONST = 255;
     unsigned char initial = 255; 
     unsigned char result = constants->getOctetValue();
     assert(initial == result);
   }

   {
     //  const short SHORT_CONST = -10;
     short initial = -10;
     short result = constants->getShortValue();
     assert(initial == result);
   }

   {
     //  const unsigned short USHORT_CONST = 7;
     unsigned short initial = 7;
     unsigned short result = constants->getUnsignedShortValue();
     assert(initial == result);
   }

   {
     //  const long LONG_CONST = -7777;
     long initial = -7777;
     long result = constants->getLongValue();
     assert(initial == result);
   }

   {
     //  const unsigned long ULONG_CONST = 7777;
     unsigned long initial = 7777;
     unsigned long result = constants->getUnsignedLongValue();
     assert(initial == result);
   }

   {
     //  const char CHAR_CONST = 'c';
     char initial = 'c';
     char result = constants->getCharValue();
     assert(initial == result);
   }

   {
     //  const string STRING_CONST = "1234567890";  
     string initial = "1234567890";
     string result = constants->getStringValue();
     assert(initial == result);
   }

   {
     //  const float FLOAT_CONST = 3.14;
     float initial = 3.14;
     float result = constants->getFloatValue();
     assert(abs(initial - result) < 0.001);
   }

   {
     //  const double DOUBLE_CONST = 3.1415926;
     double initial =  3.1415926;
     double result = constants->getDoubleValue();
     assert(abs(initial - result) < 0.0001);
   }
}

void
TestMirror_impl::ccm_passivate()
    throw(::Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
TestMirror_impl::ccm_remove()
    throw(::Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

