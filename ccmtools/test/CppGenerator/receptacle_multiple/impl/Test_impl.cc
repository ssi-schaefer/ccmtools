
/***
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 *
 * This file structure was automatically generated by CCM Tools
 * <http://ccmtools.sourceforge.net/> and contains a component's
 * implementation classes. 
 ***/

#include <cassert>
#include <iostream>
#include <wx/utils/debug.h>

#include "Test_impl.h"

namespace ccm {
namespace local {

using namespace std;
using namespace wx::utils;

//==============================================================================
// CCM_Test - component implementation
//==============================================================================

Test_impl::Test_impl (  )
{
}

Test_impl::~Test_impl (  )
{
}

void
Test_impl::set_session_context ( Components::ccm::local::SessionContext* context )
  throw ( Components::ccm::local::CCMException )
{
  ctx = dynamic_cast<CCM_Test_Context*> ( context );
}

void
Test_impl::ccm_activate (  )
  throw ( Components::ccm::local::CCMException )
{
  cout << "=== Begin test case =======================================" << endl;

  consoleConnections multiCon = ctx->get_connections_console();
  consoleConnections::const_iterator it;
  long size;
  for(it=multiCon.begin();it != multiCon.end(); ++it) {
    cout << "       ";
    size = it->second.ptr()->println("String from component");
    cout << "Number of printed characters = " << size << endl;
  }

  cout << "=== End test case =========================================" << endl;
}

void
Test_impl::ccm_passivate (  )
  throw ( ::Components::ccm::local::CCMException )
{
}

void
Test_impl::ccm_remove (  )
  throw ( ::Components::ccm::local::CCMException )
{
}

} // /namespace local
} // /namespace ccm

