
/***
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 *
 * This file structure was automatically generated by CCM Tools
 * <http://ccmtools.sourceforge.net/> and contains a component's
 * implementation classes. 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "Test_impl.h"

namespace ccm {
namespace local {
namespace component {
namespace Test {

using namespace std;
using namespace WX::Utils;

//==============================================================================
// CCM_Test - component implementation
//==============================================================================

CCM_Test_impl::CCM_Test_impl (  )
{
}

CCM_Test_impl::~CCM_Test_impl (  )
{
}

void
CCM_Test_impl::set_session_context ( Components::SessionContext* context )
  throw ( Components::CCMException )
{
  ctx = dynamic_cast<CCM_Test_Context*> ( context );
}

void
CCM_Test_impl::ccm_activate (  )
  throw ( Components::CCMException )
{
  cout << "=== Begin test case =======================================" << endl;

  consoleConnections multiCon = ctx->get_connections_console();
  consoleConnections::const_iterator it;
  long size;
  for(it=multiCon.begin();it != multiCon.end(); ++it) {
    cout << "       ";
    size = it->second.ptr()->println("String from component");
    cout << "Number of printed characters = " << size << endl;
  }

  cout << "=== End test case =========================================" << endl;
}

void
CCM_Test_impl::ccm_passivate (  )
  throw ( Components::CCMException )
{
}

void
CCM_Test_impl::ccm_remove (  )
  throw ( Components::CCMException )
{
}

} // /namespace Test
} // /namespace componet
} // /namespace local
} // /namespace ccm

