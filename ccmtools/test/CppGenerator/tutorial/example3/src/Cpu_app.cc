
/***
 * Cpu component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 *
 * This file structure was automatically generated by CCM Tools
 * <http://ccmtools.sourceforge.net/> and contains a component's
 * implementation classes. 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "Cpu_app.h"

using namespace std;
using namespace WX::Utils;
using namespace CCM_Local;

namespace CCM_Local {
namespace SimpleComputer {
namespace CCM_Session_Cpu {

//==============================================================================
// CCM_Cpu - component implementation
//==============================================================================

CCM_Cpu_impl::CCM_Cpu_impl (  )
{
  DEBUGNL ( "+CCM_Cpu_impl->CCM_Cpu_impl (  )" );
}

CCM_Cpu_impl::~CCM_Cpu_impl (  )
{
  DEBUGNL ( "-CCM_Cpu_impl->~CCM_Cpu_impl (  )" );
}

void
CCM_Cpu_impl::boot()
  throw (LocalComponents::CCMException)
{
  DEBUGNL(" CCM_Cpu_impl->boot()");

  cout << "Starting SimpleOS..." << endl;
}

void
CCM_Cpu_impl::shutdown()
  throw (LocalComponents::CCMException)
{
  DEBUGNL(" CCM_Cpu_impl->shutdown()");

  cout << "Shutdown SimpleOS..." << endl;
}

void
CCM_Cpu_impl::set_session_context ( LocalComponents::SessionContext* context )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Cpu_impl->set_session_context (  )" );
  ctx = dynamic_cast<CCM_Cpu_Context*> ( context );
}

void
CCM_Cpu_impl::ccm_activate (  )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Cpu_impl->ccm_activate (  )" );
  boot();
}

void
CCM_Cpu_impl::ccm_passivate (  )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Cpu_impl->ccm_passivate (  )" );
}

void
CCM_Cpu_impl::ccm_remove (  )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Cpu_impl->ccm_remove (  )" );
}

//==============================================================================
// CCM_ProgrammingInterface facet implementation
//==============================================================================

CCM_ProgrammingInterface*
CCM_Cpu_impl::get_prg (  )
{
  DEBUGNL ( " CCM_Cpu_impl->get_prg (  )" );
  prg_impl* facet = new prg_impl(this);
  return dynamic_cast<CCM_ProgrammingInterface*> ( facet );
}

prg_impl::prg_impl ( CCM_Cpu_impl* component_impl )
  : component ( component_impl )
{
  DEBUGNL ( "+prg_impl->prg_impl (  )" );
  line_="";
}

prg_impl::~prg_impl (  )
{
  DEBUGNL ( "-prg_impl->~prg_impl (  )" );
}

long
prg_impl::execute_cmd ( const std::string& cmd )
  throw (LocalComponents::CCMException)
{
  DEBUGNL ( " prg_impl->execute_cmd ( cmd )" );
  out_portConnections out_connections = component->ctx->get_connections_out_port();
  out_portConnections::iterator pos;

  if(cmd == "shutdown") {
    component->shutdown();
  }
  else if(cmd == "read") {
    line_ = component->ctx->get_connection_in_port()->read();
  }
  else if(cmd == "write") {
    for(pos= out_connections.begin();pos != out_connections.end(); ++pos) {
      pos->second->write(line_);
    }
  }
}

} // /namespace CCM_Session_Cpu
} // /namespace SimpleComputer
} // /namespace CCM_Local

