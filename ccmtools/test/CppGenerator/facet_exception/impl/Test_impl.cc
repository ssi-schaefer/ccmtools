
/***
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 *
 * This file structure was automatically generated by CCM Tools
 * <http://ccmtools.sourceforge.net/> and contains a component's
 * implementation classes. 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "Test_impl.h"

using namespace std;
using namespace WX::Utils;
using namespace CCM_Local;

namespace CCM_Local {
namespace CCM_Session_Test {

//==============================================================================
// CCM_Test - component implementation
//==============================================================================

CCM_Test_impl::CCM_Test_impl (  )
{
  DEBUGNL ( "+CCM_Test_impl->CCM_Test_impl (  )" );
}

CCM_Test_impl::~CCM_Test_impl (  )
{
  DEBUGNL ( "-CCM_Test_impl->~CCM_Test_impl (  )" );
}

void
CCM_Test_impl::set_session_context ( LocalComponents::SessionContext* context )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Test_impl->set_session_context (  )" );
  ctx = dynamic_cast<CCM_Test_Context*> ( context );
}

void
CCM_Test_impl::ccm_activate (  )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Test_impl->ccm_activate (  )" );
}

void
CCM_Test_impl::ccm_passivate (  )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Test_impl->ccm_passivate (  )" );
}

void
CCM_Test_impl::ccm_remove (  )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_Test_impl->ccm_remove (  )" );
}

//==============================================================================
// CCM_Console facet implementation
//==============================================================================

CCM_Console*
CCM_Test_impl::get_console (  )
{
  DEBUGNL ( " CCM_Test_impl->get_console (  )" );
  console_impl* facet = new console_impl(this);
  return dynamic_cast<CCM_Console*> ( facet );
}

console_impl::console_impl ( CCM_Test_impl* component_impl )
  : component ( component_impl )
{
  DEBUGNL ( "+console_impl->console_impl (  )" );
}

console_impl::~console_impl (  )
{
  DEBUGNL ( "-console_impl->~console_impl (  )" );
}

long
console_impl::println ( const std::string& msg )
  throw (LocalComponents::CCMException, Error, SuperError, FatalError )
{
  DEBUGNL ( " console_impl->println ( msg )" );

  cout << ">> " << msg << endl;

  if(msg == "Error") {
    Error error;
    ErrorInfoList error_info_list;
    ErrorInfo error_info;
    error_info.code = 7;
    error_info.message = "A simple error!";
    error_info_list.push_back(error_info);
    error.info = error_info_list;
    throw error;
  }
  if(msg == "SuperError")
    throw SuperError();
  if(msg == "FatalError")
    throw FatalError();

  return msg.length();
}

} // /namespace CCM_Session_Test
} // /namespace CCM_Local

