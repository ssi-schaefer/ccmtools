/***
 * Test_mirror component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 *
 * This file structure was automatically generated by CCM Tools
 * <http://ccmtools.sourceforge.net/> and contains a component's
 * implementation classes. 
 ***/

#include <cassert>
#include <iostream>

#include "TestMirror_impl.h"

namespace ccm {
namespace local {

using namespace std;
using namespace wamas::platform::utils;

//==============================================================================
// CCM_TestMirror - component implementation
//==============================================================================

TestMirror_impl::TestMirror_impl()
{
}

TestMirror_impl::~TestMirror_impl()
{
}

void
TestMirror_impl::set_session_context(
    Components::ccm::local::SessionContext* context)
    throw(::Components::ccm::local::CCMException)
{
    ctx = dynamic_cast<CCM_TestMirror_Context*>(context);
}

void
TestMirror_impl::ccm_activate()
    throw(::Components::ccm::local::CCMException)
{
    string s = "Salomon.Automation";
    long len =  ctx->get_connection_console()->println(s);
    assert(len == (long)s.length());
  
    try {
        string s = "Error";
        ctx->get_connection_console()->println(s);
        assert(0);
    }
    catch(Error& e) {
        cout << "OK: error exception catched! ";
        cout << "(" 
	     << e.info[0].code << ", " 
	     << e.info[0].message << ")" 
	     << endl;
    }
    
    try {
        string s = "SuperError";
        ctx->get_connection_console()->println(s);
        assert(0);
    }
    catch(SuperError& e) {
      cout << "OK: super_error exception catched!" << endl;
    }
  
    try {
        string s = "FatalError";
        ctx->get_connection_console()->println(s);
        assert(0);
    }
    catch(::Components::ccm::local::Exception& e) {
      // catch base class exception 
      cout << e.what() << endl;
    }
    catch(FatalError& e) {
      cout << "OK: fatal_error exception catched!" << endl;
    }
}

void
TestMirror_impl::ccm_passivate()
    throw(::Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
TestMirror_impl::ccm_remove()
    throw(::Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

} // /namespace local
} // /namespace ccm

