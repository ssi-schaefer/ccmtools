/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by CCM Tools 
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated. 
 * All component ports will be connected to the mirror component's ports. 
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 ***/

#include <cassert>
#include <iostream>

#include <wamas/platform/utils/debug.h>
#include <wamas/platform/utils/smartptr.h>

#include <Components/ccm/local/CCM.h>
#include <ccm/local/HomeFinder.h>

#include <world/europe/TestHome_gen.h>

using namespace std;
using namespace wamas::platform::utils;
using namespace ccm::local;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;


    int error = 0;    
    error  = deploy_world_europe_TestHome("TestHome");             
    if(error) 
    {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }

    try 
    {
    		Components::ccm::local::HomeFinder* homeFinder = ccm::local::HomeFinder::Instance();	
	    SmartPtr<world::europe::Test> myTest;
    		SmartPtr<world::europe::IFace> facet;
    
        SmartPtr< world::europe::TestHome> myTestHome(dynamic_cast< world::europe::TestHome*>
            (homeFinder->find_home_by_name("TestHome").ptr()));

        myTest = myTestHome->create();
        facet = myTest->provide_facet();
        myTest->configuration_complete();
        
      	::Person person1;
		person1.id = 277;
		person1.firstName = "Egon";
		person1.lastName = "Teiniker";

		::Person person2;
		person2.id = 290;
        person2.firstName = "JÃ¶rg";
        person2.lastName = "Faschingbauer";

		::DTO dto1;
		dto1.id = 111;
		dto1.person = person1;

		::DTO dto2;
		dto2.id = 222;
		dto2.person = person2;
	
      	{
			// Note: we use the global structures (not the ccm::local
			// structures generated by the ccmtools).

			::Person p1;
			p1.id = person1.id;
			p1.firstName = person1.firstName;
			p1.lastName = person1.lastName;

			// Note: we mix global and ccm::local structures and use them
			// as parameter for a facet method call.
			world::PDL_Person p2;
			p2.id = person2.id;
        		p2.firstName = person2.firstName;
        		p2.lastName = person2.lastName;

			::Person p3,result;

			result = facet->op1(p1,p2,p3);

			assert(p2.id == person1.id);
			assert(p2.firstName == person1.firstName);
			assert(p2.lastName == person1.lastName);
	
			assert(p3.id == person2.id);
			assert(p3.firstName == person2.firstName);
			assert(p3.lastName == person2.lastName);

			assert(result.id == person1.id);
			assert(result.firstName == person1.firstName);
			assert(result.lastName == person1.lastName);
      	}

      	{
			::DTO p1;
			p1.id = dto1.id;
			p1.person = dto1.person;

			::DTO p2;
			p2.id = dto2.id;
			p2.person = dto2.person;
	
			::DTO p3, result;

			result = facet->op2(p1,p2,p3);

			assert(p2.id == dto1.id);
			assert(p2.person.id == dto1.person.id);
			assert(p2.person.firstName == dto1.person.firstName);
			assert(p2.person.lastName == dto1.person.lastName);

			assert(p3.id == dto2.id);
			assert(p3.person.id == dto2.person.id);
			assert(p3.person.firstName == dto2.person.firstName);
			assert(p3.person.lastName == dto2.person.lastName);

			assert(result.id == dto1.id);
			assert(result.person.id == dto1.person.id);
			assert(result.person.firstName == dto1.person.firstName);
			assert(result.person.lastName == dto1.person.lastName);
      	}
        
        myTest->remove();               
    } 
    catch(Components::ccm::local::HomeNotFound ) 
    {
        cout << "DEPLOYMENT ERROR: can't find a home!" << endl;
        return -1;
    } 
    catch(Components::ccm::local::NotImplemented& e ) 
    {
        cout << "DEPLOYMENT ERROR: function not implemented: " 
	     << e.what (  ) << endl;
        return -1;
    }  
    catch(Components::ccm::local::InvalidName& e ) 
    {
        cout << "DEPLOYMENT ERROR: invalid name during connection: " 
             << e.what (  ) << endl;
        return -1;
    }
    catch ( ... )  
    {
        cout << "DEPLOYMENT ERROR: there is something wrong!" << endl;
        return -1;
    }

    error = undeploy_world_europe_TestHome("TestHome");
    if(error) 
    {
        cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
        return error;
    }
    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}
