/***
 * CCM Tools Test Client
 *
 * This file was automatically generated by the CCM Tools.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated.
 * All component ports will be connected to the mirror component's ports.
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 ***/

#include <cassert>
#include <iostream>
#include <cmath>

#include <Components/ccmtools.h>

#include <TestHome_entry.h>
#include <TestHome_gen.h>

using namespace std;

int main(int argc, char *argv[])
{
  	cout << ">>>> Start Test Client: " << __FILE__ << endl;

  	int error = 0;
  	error = deploy_TestHome("TestHome");
  	if(error)
  	{
    		cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
    		return(error);
  	}

  	try
  	{
  		Components::HomeFinder* homeFinder = Components::HomeFinder::Instance();

    		Test::SmartPtr myTest;
    		TestHome::SmartPtr myTestHome(dynamic_cast<TestHome*> (
    			homeFinder->find_home_by_name("TestHome").ptr()));

    		myTest = myTestHome->create();
    		myTest->configuration_complete();

	    cout << "== Begin Test Case =============================================" << endl;

    		{
      		short short_value = -7;
      		myTest->short_value(short_value);
      		short short_result = myTest->short_value();
      		assert(short_result == short_value);

		    long long_value = -7777;
		    myTest->long_value(long_value);
		    long long_result = myTest->long_value();
		    assert(long_result == long_value);

			unsigned short ushort_value = 7;
			myTest->ushort_value(ushort_value);
			unsigned short ushort_result = myTest->ushort_value();
			assert(ushort_result == ushort_value);

			unsigned long ulong_value = 7777;
			myTest->ulong_value(ulong_value);
			unsigned long ulong_result = myTest->ulong_value();
			assert(ulong_result == ulong_value);

			float float_value = -77.77;
			myTest->float_value(float_value);
			float float_result = myTest->float_value();
			assert(abs(float_result - float_value) < 0.001);

			double double_value = -77.7777;
			myTest->double_value(double_value);
			double double_result = myTest->double_value();
			assert(abs(double_result - double_value) < 0.001);

			char char_value = 'x';
			myTest->char_value(char_value);
			char char_result = myTest->char_value();
			assert(char_result == char_value);

			string string_value = "0123456789";
			myTest->string_value(string_value);
			string string_result = myTest->string_value();
			assert(string_result == string_value);

			bool boolean_value = true;
			myTest->boolean_value(boolean_value);
			bool boolean_result = myTest->boolean_value();
			assert(boolean_result == boolean_value);

			unsigned char octet_value = 0xff;
			myTest->octet_value(octet_value);
			unsigned char octet_result = myTest->octet_value();
			assert(octet_result == octet_value);

			wchar_t wchar_value = 'x';
			myTest->wchar_value(wchar_value);
			wchar_t wchar_result = myTest->char_value();
			assert(wchar_result == wchar_value);

			wstring wstring_value = L"0123456789";
			myTest->wstring_value(wstring_value);
			wstring wstring_result = myTest->wstring_value();
			assert(wstring_result == wstring_value);
		}


    		{
			//Test Case for: typedef long time_t;
			time_t time_value = 3;
			myTest->typedef_value(time_value);
			time_t time_result = myTest->typedef_value();
			assert(time_result == time_value);


			// Test Case for: enum Color {red, green, blue, black, orange};
			Color Color_value;
			Color_value = Color(blue);
			myTest->enum_value(Color_value);
			Color Color_result = myTest->enum_value();
			assert(Color_result == Color_value);


			// Test Case for: struct Pair { string key; double value; };
			Pair struct_value;
			struct_value.key = "a";
			struct_value.value = 1.0;
			myTest->struct_value(struct_value);
			Pair struct_result = myTest->struct_value();
			assert(struct_result.key == struct_value.key);
			assert(struct_result.value == struct_value.value);

      		// Test Case for: typedef sequence<Value> map;
      		Map map_value;
      		for(int i=0;i<5;i++)
      		{
        			Pair p1;
        			p1.key = "1";
        			p1.value = (double)i;
        			map_value.push_back(p1);
      		}
      		myTest->sequence_value(map_value);
      		Map map_result = myTest->sequence_value();
      		for(int i=0;i<(int)map_result.size();i++)
      		{
        			Pair p = map_result.at(i);
        			assert((int)p.value == i);
    			}
	    }
    		cout << "== End Test Case ===============================================" << endl;

	    myTest->remove();
  	}
  	catch (Components::HomeNotFound)
  	{
    		cout << "DEPLOYMENT ERROR: can't find a home!" << endl;
    		return -1;
  	}
  	catch (Components::NotImplemented& e)
  	{
    		cout << "DEPLOYMENT ERROR: function not implemented: " << e.what() << endl;
    		return -1;
  	}
  	catch (Components::InvalidName& e)
  	{
    		cout << "DEPLOYMENT ERROR: invalid name during connection: " << e.what() << endl;
    		return -1;
  	}
  	catch (...)
  	{
    		cout << "DEPLOYMENT ERROR: there is something wrong!" << endl;
    		return -1;
  	}

	error = undeploy_TestHome("TestHome");
  	if(error)
  	{
    		cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
    		return error;
  	}
  	cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}
