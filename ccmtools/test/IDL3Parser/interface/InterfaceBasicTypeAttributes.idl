#ifndef __INTERFACE_BASIC_TYPE_ATTRIBUTE__IDL__
#define __INTERFACE_BASIC_TYPE_ATTRIBUTE__IDL__

interface InterfaceBasicTypeAttributes
{
	// Here we define interface attributes which causes the
	// generation of a pair of getter und setter methods for
	// each attribute.
	
	attribute short 				shortValue;
	attribute long 				longValue;
	attribute long long			lLongValue;
	attribute unsigned short 	uShortValue;
	attribute unsigned long 		uLongValue;
//	attribute unsigned long long uLLongValue;
	
	attribute float 				floatValue;
	attribute double 			doubleValue;
	attribute long double		lDoubleValue;
	
	attribute char 				charValue;
	attribute wchar				wcharValue;
	attribute string 			stringValue;
	attribute string<5> 			bStringValue;
	attribute wstring 			wstringValue;
	attribute wstring<5>			bWstringValue;
	
	attribute boolean 			booleanValue;
	attribute octet 				octetValue;
	attribute any				anyValue;
	attribute Object				objectValue;
	
//	attribute fixed<9,2>			fixedValue; !!!


	// Here we define a readonly attribute which causes only a getter 
	// access method.

	readonly attribute short 			roShortValue;
	readonly attribute long 				roLongValue;
	readonly attribute long long			roLLongValue;
	readonly attribute unsigned short 	roUShortValue;
	readonly attribute unsigned long 	roULongValue;
//	readonly attribute unsigned long long roULLongValue;
	
	readonly attribute float 			roFloatValue;
	readonly attribute double 			roDoubleValue;
	readonly attribute long double		roLDoubleValue;
	
	readonly attribute char 				roCharValue;
	readonly attribute wchar				roWcharValue;
	readonly attribute string 			roStringValue;
	readonly attribute string<5> 		roBStringValue;
	readonly attribute wstring 			roWstringValue;
	readonly attribute wstring<5>		roBWstringValue;
	
	readonly attribute boolean 			roBooleanValue;
	readonly attribute octet 			roOctetValue;
	readonly attribute any				roAnyValue;
	readonly attribute Object			roObjectValue;
};

#endif // __INTERFACE_BASIC_TYPE_ATTRIBUTE__IDL__
