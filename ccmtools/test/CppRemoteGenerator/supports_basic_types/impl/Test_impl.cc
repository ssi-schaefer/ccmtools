
/***
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 *
 * This file structure was automatically generated by CCM Tools
 * <http://ccmtools.sourceforge.net/> and contains a component's
 * implementation classes. 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "Test_impl.h"

using namespace std;
using namespace WX::Utils;
using namespace CCM_Local;

namespace CCM_Local {
namespace CCM_Session_Test {

//==============================================================================
// CCM_Test - component implementation
//==============================================================================

CCM_Test_impl::CCM_Test_impl()
{
    DEBUGNL("+CCM_Test_impl->CCM_Test_impl()");
}

CCM_Test_impl::~CCM_Test_impl()
{
    DEBUGNL("-CCM_Test_impl->~CCM_Test_impl()");
}

short
CCM_Test_impl::op1(const short p1, short& p2, short& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op1(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1;
}

long
CCM_Test_impl::op2(const long p1, long& p2, long& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op2(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1; 
}

unsigned short
CCM_Test_impl::op3(const unsigned short p1, unsigned short& p2, unsigned short& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op3(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1; 
}

unsigned long
CCM_Test_impl::op4(const unsigned long p1, unsigned long& p2, unsigned long& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op4(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1;
}

float
CCM_Test_impl::op5(const float p1, float& p2, float& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op5(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1; 
}

double
CCM_Test_impl::op6(const double p1, double& p2, double& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op6(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1; 
}

char
CCM_Test_impl::op7(const char p1, char& p2, char& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op7(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1; 
}

std::string
CCM_Test_impl::op8(const std::string& p1, std::string& p2, std::string& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op8(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1;
}

bool
CCM_Test_impl::op9(const bool p1, bool& p2, bool& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op9(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3 && p1;
}

unsigned char
CCM_Test_impl::op10(const unsigned char p1, unsigned char& p2, unsigned char& p3)
    throw (LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->op10(p1, p2, p3)");
    p3=p2;
    p2=p1;
    return p3+p1;
}

void
CCM_Test_impl::set_session_context(
    LocalComponents::SessionContext* context)
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->set_session_context()");
    ctx = dynamic_cast<CCM_Test_Context*>(context);
}

void
CCM_Test_impl::ccm_activate()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_activate()");

    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_Test_impl::ccm_passivate()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_passivate()");

    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_Test_impl::ccm_remove()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_remove()");

    // OPTIONAL : IMPLEMENT ME HERE !
}

} // /namespace CCM_Session_Test
} // /namespace CCM_Local

