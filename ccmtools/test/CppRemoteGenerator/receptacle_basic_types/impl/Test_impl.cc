
/***
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 *
 * This file structure was automatically generated by CCM Tools
 * <http://ccmtools.sourceforge.net/> and contains a component's
 * implementation classes. 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "Test_impl.h"
#include "Test_inPort_impl.h"

using namespace std;
using namespace WX::Utils;
using namespace CCM_Local;

namespace CCM_Local {
namespace CCM_Session_Test {

//==============================================================================
// CCM_Test - component implementation
//==============================================================================

CCM_Test_impl::CCM_Test_impl()
{
    DEBUGNL("+CCM_Test_impl->CCM_Test_impl()");
}

CCM_Test_impl::~CCM_Test_impl()
{
    DEBUGNL("-CCM_Test_impl->~CCM_Test_impl()");
}

void
CCM_Test_impl::set_session_context(
    LocalComponents::SessionContext* context)
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->set_session_context()");
    ctx = dynamic_cast<CCM_Test_Context*>(context);
}

void
CCM_Test_impl::ccm_activate()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_activate()");
    SmartPtr<CCM_IFace> out = ctx->get_connection_outPort();
    
    short short_2=3, short_3, short_r;
    short_r = out->op1(7,short_2, short_3);
    assert(short_2 == 7);
    assert(short_3 == 3);
    assert(short_r == 3+7);
    
    long long_2=3, long_3, long_r;
    long_r = out->op2(7,long_2, long_3);
    assert(long_2 == 7);
    assert(long_3 == 3);
    assert(long_r == 3+7);
    
    unsigned short ushort_2=3, ushort_3, ushort_r;
    ushort_r = out->op3(7,ushort_2, ushort_3);
    assert(ushort_2 == 7);
    assert(ushort_3 == 3);
    assert(ushort_r == 3+7);

    unsigned long ulong_2=3, ulong_3, ulong_r;
    ulong_r = out->op4(7,ulong_2, ulong_3);
    assert(ulong_2 == 7);
    assert(ulong_3 == 3);
    assert(ulong_r == 3+7);
    
    float float_2=3.0, float_3, float_r;
    float_r = out->op5(7.0,float_2, float_3);
    assert(float_2 == 7.0);
    assert(float_3 == 3.0);
    assert(float_r == 3.0+7.0);
     
    double double_2=3.0, double_3, double_r;
    double_r = out->op6(7.0,double_2, double_3);
    assert(double_2 == 7.0);
    assert(double_3 == 3.0);
    assert(double_r == 3.0+7.0);

    char char_2=3, char_3, char_r;
    char_r = out->op7(7,char_2, char_3);
    assert(char_2 == 7);
    assert(char_3 == 3);
    assert(char_r == 3+7);

    string string_2 = "drei";
    string string_3;
    string string_r;
    string_r = out->op8("sieben",string_2, string_3);
    assert(string_2 == "sieben");
    assert(string_3 == "drei");
    assert(string_r == "dreisieben");

    bool bool_2=false, bool_3, bool_r;
    bool_r = out->op9(true, bool_2, bool_3);
    assert(bool_2 == true);
    assert(bool_3 == false);
    assert(bool_r == false && true);
    
    unsigned char octet_2=3, octet_3, octet_r;
    octet_r = out->op10(7,octet_2, octet_3);
    assert(octet_2 == 7);
    assert(octet_3 == 3);
    assert(octet_r == 3+7);
}

void
CCM_Test_impl::ccm_passivate()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_passivate()");

    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_Test_impl::ccm_remove()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_remove()");

    // OPTIONAL : IMPLEMENT ME HERE !
}

//==============================================================================
// CCM_IFace facet implementation
//==============================================================================

CCM_IFace*
CCM_Test_impl::get_inPort()
{
    DEBUGNL(" CCM_Test_impl->get_inPort()");
    inPort_impl* facet = new inPort_impl(this);
    return dynamic_cast<CCM_IFace*>(facet);
}

} // /namespace CCM_Session_Test
} // /namespace CCM_Local

