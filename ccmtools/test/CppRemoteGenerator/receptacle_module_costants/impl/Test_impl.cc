
/***
 * This file was automatically generated by CCM Tools version 0.6.2
 * <http://ccmtools.sourceforge.net/>
 *
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>
#include <wx/utils/debug.h>

#include "Test_impl.h"
#include "Test_ifaceIn_impl.h"

namespace world {
namespace europe {
namespace ccm {
namespace local {
namespace component {
namespace Test {

using namespace std;
using namespace wx::utils;

//==============================================================================
// CCM_Test - component implementation
//==============================================================================

CCM_Test_impl::CCM_Test_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

CCM_Test_impl::~CCM_Test_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_Test_impl::set_session_context(
    ::Components::ccm::local::SessionContext* context)
    throw(::Components::ccm::local::CCMException)
{
    ctx = dynamic_cast<CCM_Test_Context*>(context);
}

void
CCM_Test_impl::ccm_activate()
    throw(::Components::ccm::local::CCMException)
{
  SmartPtr<world::ccm::local::CCM_Constants> receptacle =
        ctx->get_connection_ifaceOut();

  {
    bool result = receptacle->getBooleanValue();
    assert(result == world::ccm::local::Constants::BOOLEAN_CONST);
  }
  
  {
    unsigned char result = receptacle->getOctetValue();
    assert(result == world::ccm::local::Constants::OCTET_CONST);
  }

  {
    short result = receptacle->getShortValue();
    assert(result == world::ccm::local::Constants::SHORT_CONST);
  }

  {
    unsigned short result = receptacle->getUnsignedShortValue();
    assert(result == world::ccm::local::Constants::USHORT_CONST);
  }
  
  {
    long result = receptacle->getLongValue();
    assert(result == world::ccm::local::Constants::LONG_CONST);
  }
  
  {
    unsigned long result = receptacle->getUnsignedLongValue();
    assert(result == world::ccm::local::Constants::ULONG_CONST);
  }

  {
    char result = receptacle->getCharValue();
    assert(result == world::ccm::local::Constants::CHAR_CONST);
  }

  {
    string result = receptacle->getStringValue();
    assert(result == world::ccm::local::Constants::STRING_CONST);
  }

  {
    float result = receptacle->getFloatValue();
    assert(abs(result - world::ccm::local::Constants::FLOAT_CONST) < 0.001);
  }
  
  {
    double result = receptacle->getDoubleValue();
    assert(abs(result - world::ccm::local::Constants::DOUBLE_CONST) < 0.000001);
  }
}

void
CCM_Test_impl::ccm_passivate()
    throw(::Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_Test_impl::ccm_remove()
    throw(::Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

//==============================================================================
// world::ccm::local::CCM_Constants facet implementation
//==============================================================================

world::ccm::local::CCM_Constants*
CCM_Test_impl::get_ifaceIn()
{
    ifaceIn_impl* facet = new ifaceIn_impl(this);
    return dynamic_cast< world::ccm::local::CCM_Constants*>(facet);
}

} // /namespace Test
} // /namespace component
} // /namespace local
} // /namespace ccm
} // /namespace europe
} // /namespace world

