
/**
 * This file was automatically generated by CCM Tools version 0.6.2
 * <http://ccmtools.sourceforge.net/>
 *
 * world::ccm::local::CCM_Constants facet class implementation. 
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 **/

#include <cassert>
#include <iostream>
#include <wamas/platform/utils/debug.h>

#include "Test_ifaceIn_impl.h"

using namespace std;
using namespace wamas::platform::utils;

namespace world {
namespace europe {
namespace ccm {
namespace local {

Test_ifaceIn_impl::Test_ifaceIn_impl(world::europe::ccm::local::Test_impl* component_impl)
  : component(component_impl)
{
  cout << "  BOOLEAN_CONST = " << Constants::BOOLEAN_CONST << endl;
  cout << "  OCTET_CONST = " << (int)Constants::OCTET_CONST << endl;
  cout << "  SHORT_CONST = " << Constants::SHORT_CONST << endl;

  cout << "  SHORT_CONST = " << Constants::SHORT_CONST << endl;
  cout << "  USHORT_CONST = " << Constants::USHORT_CONST << endl;
  cout << "  LONG_CONST = " << Constants::LONG_CONST << endl;
  cout << "  ULONG_CONST = " << Constants::ULONG_CONST << endl;

  cout << "  CHAR_CONST = " << Constants::CHAR_CONST << endl;
  cout << "  STRING_CONST = " << Constants::STRING_CONST << endl;

  cout << "  FLOAT_CONST = " << Constants::FLOAT_CONST << endl;
  cout << "  DOUBLE_CONST = " << Constants::DOUBLE_CONST << endl;
}

Test_ifaceIn_impl::~Test_ifaceIn_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

bool
Test_ifaceIn_impl::getBooleanValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::BOOLEAN_CONST;
}

unsigned char
Test_ifaceIn_impl::getOctetValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::OCTET_CONST;
}

short
Test_ifaceIn_impl::getShortValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::SHORT_CONST;
}

unsigned short
Test_ifaceIn_impl::getUnsignedShortValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::USHORT_CONST;
}

long
Test_ifaceIn_impl::getLongValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::LONG_CONST;
}

unsigned long
Test_ifaceIn_impl::getUnsignedLongValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::ULONG_CONST;
}

char
Test_ifaceIn_impl::getCharValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::CHAR_CONST;
}

std::string
Test_ifaceIn_impl::getStringValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::STRING_CONST;
}

float
Test_ifaceIn_impl::getFloatValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::FLOAT_CONST;
}

double
Test_ifaceIn_impl::getDoubleValue()
throw(::Components::ccm::local::CCMException)
{
  return Constants::DOUBLE_CONST;
}

} // /namespace local
} // /namespace ccm
} // /namespace europe
} // /namespace world
