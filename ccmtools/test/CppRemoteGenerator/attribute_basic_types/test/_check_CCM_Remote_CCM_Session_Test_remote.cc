/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by the CCM Tools.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the remote component test concept. 
 *
 * To enable debug output use -DWXDEBUG compiler flag
 ***/

#include <cstdlib> 
#include <iostream>
#include <string>
#include <WX/Utils/debug.h>
#include <CCM/CCMContainer.h>

#include <CORBA.h>
#include <coss/CosNaming.h>

#include <CCM_Remote/CCM_Session_Test/TestHome_remote.h>
#include <Test.h>

using namespace std;
using namespace WX::Utils;

//==============================================================================
// Implementation of remote client test
//==============================================================================

int 
main (int argc, char *argv[])
{
    DEBUGNL("Enter C++ remote test client");

    char* NameServiceLocation = getenv("CCM_NAME_SERVICE");
    if(NameServiceLocation == NULL) { 
        cerr << "Error: Environment variable CCM_NAME_SERVICE is not set!" << endl;
        return -1;
    }

    // Initialize ORB 
    ostringstream os;
    os << "NameService=" << NameServiceLocation;
    char* argv_[] = { "", "-ORBInitRef", (char*)os.str().c_str()}; 
    int   argc_   = 3;
    DEBUGNL(">> " << argv_[0] << " "<< argv_[1] << argv_[2]);
    CORBA::ORB_var orb = CORBA::ORB_init(argc_, argv_);

    /**
     * Server-side code
     */ 
    CCM::register_all_factories (orb);
    int error = 0;
    error += deploy_CCM_Local_TestHome("TestHome");
    error += deploy_CCM_Remote_TestHome(orb, "TestHome:1.0");
    if(!error) {
        cout << "TestHome stand-alone server is running..." << endl;
    }
    else {
        cerr << "ERROR: Can't start components!" << endl;
        return -1;
    }

    // For testing we use CORBA collocation	
    // orb->run();
	

    /**
     * Client-side code
     */
    CORBA::Object_var obj = orb->resolve_initial_references("NameService");
    CosNaming::NamingContextExt_var nc =
        CosNaming::NamingContextExt::_narrow(obj);

    // Deployment 

    // Find ComponentHomes in the Naming-Service
    obj = nc->resolve_str("TestHome:1.0");
    assert (!CORBA::is_nil (obj));
    ::TestHome_var myTestHome = 
	::TestHome::_narrow (obj);

    // Create component instances
    ::Test_var myTest = myTestHome->create();

    // Provide facets   
    ::IFace_var iface = myTest->provide_iface();
	
    myTest->configuration_complete();

    DEBUGNL("==== Begin Test Case ==========================================" );

    CORBA::Short short_value = -7;
    myTest->short_value(short_value);
    CORBA::Short short_result = myTest->short_value();
    assert(short_value == short_result);
    
    CORBA::Long long_value = -7777;
    myTest->long_value(long_value);
    CORBA::Long long_result = myTest->long_value();
    assert(long_result == long_value);
    
    CORBA::UShort ushort_value = 7;
    myTest->ushort_value(ushort_value);
    CORBA::UShort ushort_result = myTest->ushort_value();
    assert(ushort_result == ushort_value);
    
    CORBA::ULong ulong_value = 7777;
    myTest->ulong_value(ulong_value);
    CORBA::ULong ulong_result = myTest->ulong_value();
    assert(ulong_result == ulong_value);
    
    CORBA::Float float_value = -77.77;
    myTest->float_value(float_value);
    CORBA::Float float_result = myTest->float_value();
    assert(float_result == float_value);
    
    CORBA::Double double_value = -77.7777;
    myTest->double_value(double_value);
    CORBA::Double double_result = myTest->double_value();
    assert(double_result == double_value);
    
    CORBA::Char char_value = 'x';
    myTest->char_value(char_value);
    CORBA::Char char_result = myTest->char_value();
    assert(char_result == char_value);

    char* string_value = "0123456789";
    myTest->string_value(string_value);
    char* string_result = myTest->string_value();
    assert(strcmp(string_value, string_result)==0);
    
    CORBA::Boolean boolean_value = true;
    myTest->boolean_value(boolean_value);
    CORBA::Boolean boolean_result = myTest->boolean_value();
    assert(boolean_result == boolean_value);
    
    CORBA::Octet octet_value = 0xff;
    myTest->octet_value(octet_value);
    CORBA::Octet octet_result = myTest->octet_value();
    assert(octet_result == octet_value);

    {
      ::LongList_var list_1 = new ::LongList;
      list_1->length(5);
      for(int i=0;i<5;i++) {
        (*list_1)[i] = i;
      }
      iface->longList_value(list_1);
    }
    {
      ::LongList_var list_r;
      list_r = iface->longList_value();
      for(unsigned long i=0; i < list_r->length(); i++) {
        assert((*list_r)[i] == (CORBA::Long)i);
      }
    }
    
    
    DEBUGNL("==== End Test Case ============================================" );

    // Un-Deployment

    // Destroy component instances
    myTest->remove();

    DEBUGNL("Exit C++ remote test client"); 	
}
