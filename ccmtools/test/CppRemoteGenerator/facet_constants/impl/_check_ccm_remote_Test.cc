/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by CCM Tools
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the remote component test concept. 
 ***/

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

#include <cmath>
#include <cstdlib> 
#include <iostream>
#include <string>

#include <ccmtools/remote/CCMContainer.h>

#include <CORBA.h>
#include <coss/CosNaming.h>

#include <ccmtools/remote/TestHome_remote.h>
#include <ccmtools_corba_Test.h>

using namespace std;
using namespace wamas::platform::utils;

//==============================================================================
// Implementation of remote client test
//==============================================================================

int main (int argc, char *argv[])
{
    cout << "Enter C++ remote test client" << endl;

    // Initialize ORB 
    int argc_ = 3;
    char* argv_[] = { "", "-ORBInitRef", "NameService=corbaloc:iiop:1.2@localhost:5050/NameService" }; 
    CORBA::ORB_var orb = CORBA::ORB_init(argc_, argv_);

    /**
     * Server-side code
     */ 

    // Register all value type factories with the ORB  
    ::ccmtools::remote::register_all_factories(orb);

    // Deploy local and remote component homes	
    int error = 0;
    error += deploy_TestHome("TestHome");
    error += deploy_ccmtools_remote_TestHome(orb, "TestHome");
    if(!error) 
    {
        cout << "TestHome server is running..." << endl;
    }
    else 
    {
        cerr << "ERROR: Can't deploy components!" << endl;
        return -1;
    }

    // For testing we use CORBA collocation	
    // orb->run();
	

    /**
     * Client-side code
     */
    CORBA::Object_var obj = orb->resolve_initial_references("NameService");
    CosNaming::NamingContextExt_var nc = CosNaming::NamingContextExt::_narrow(obj);

    // Deployment 

    // Find ComponentHomes in the Naming-Service
    obj = nc->resolve_str("TestHome");
    ::ccmtools::corba::TestHome_var myTestHome = ::ccmtools::corba::TestHome::_narrow (obj);

    // Create component instances
    ::ccmtools::corba::Test_var myTest = myTestHome->create();

    // Provide facets   
    ::ccmtools::corba::Constants_var constants = myTest->provide_iface();

	
    myTest->configuration_complete();

    cout << "==== Begin Test Case ===================================" << endl;
    {
      //  const boolean BOOLEAN_CONST = TRUE;
      CORBA::Boolean initial = true;
      CORBA::Boolean result = constants->getBooleanValue();
      assert(initial == result);
    }

    {
      //  const octet OCTET_CONST = 255;
      CORBA::Octet initial = 255;
      CORBA::Octet result = constants->getOctetValue();
      assert(initial == result);
    }

    {
      //  const short SHORT_CONST = -10;
      CORBA::Short initial = -10;
      CORBA::Short result = constants->getShortValue();
      assert(initial == result);
    }

    {
      //  const unsigned short USHORT_CONST = 7;
      CORBA::UShort initial = 7;
      CORBA::UShort result = constants->getUnsignedShortValue();
      assert(initial == result);
    }

    {
      //  const long LONG_CONST = -7777;
      CORBA::Long initial = -7777;
      CORBA::Long result = constants->getLongValue();
      assert(initial == result);
    }

    {
      //  const unsigned long ULONG_CONST = 7777;
      CORBA::ULong initial = 7777;
      CORBA::ULong result = constants->getUnsignedLongValue();
      assert(initial == result);
    }

    {
      //  const char CHAR_CONST = 'c';
      CORBA::Char initial = 'c';
      CORBA::Char result = constants->getCharValue();
      assert(initial == result);
    }

    {
      //  const string STRING_CONST = "1234567890";  
      char* initial = CORBA::string_dup("1234567890");
      char* result = constants->getStringValue();
      assert(strcmp(initial,result) == 0);
    }

    {
      //  const float FLOAT_CONST = 3.14;
      CORBA::Float initial = 3.14;
      CORBA::Float result = constants->getFloatValue();
      assert(abs(initial - result) < 0.001);
    }

    {
      //  const double DOUBLE_CONST = 3.1415926;
      CORBA::Double initial = 3.1415926;
      CORBA::Double result = constants->getDoubleValue();
      assert(abs(initial - result) < 0.000001);
    }

    cout << "==== End Test Case =====================================" << endl; 

    // Destroy component instances
    myTest->remove();

    // Un-Deployment
    error += undeploy_TestHome("TestHome");
    error += undeploy_ccmtools_remote_TestHome(orb, "TestHome");
    if(!error) 
    {
	    cout << "Exit C++ remote test client" << endl; 	
    }
    else 
    {
        cerr << "ERROR: Can't undeploy components!" << endl;
        return -1;
    }
}

#endif // HAVE_MICO

