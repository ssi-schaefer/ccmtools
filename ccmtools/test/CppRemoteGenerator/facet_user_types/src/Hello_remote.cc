
/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

#include "Hello_remote.h"

using namespace std;
using namespace CCM_Utils;

namespace CCM_Remote {
namespace CCM_Session_Hello {


//============================================================================
// Component remote adapter 
//============================================================================

Hello_impl::Hello_impl(CCM_Local::CCM_Session_Hello::CCM_Hello_impl* i, CCM::SessionContainer * c)
  : local_adapter(i), ccm_container (c)
{
  DEBUGNL("+Hello_impl::Hello_impl()");
  local_context = new CCM_Hello_Context_impl(this,ccm_container); 
    console_facet_adapter = NULL;
}

Hello_impl::~Hello_impl ()
{
  DEBUGNL("-Hello_impl::~Hello_impl()");
  delete local_adapter; 
  delete local_context;
}


/*
 * ReleaseInformation (extensions to CCM)
 *
 * These methods provides strings that carries information about version
 * and creation date of a component. 
 */

char* Hello_impl::getComponentVersion()
{
  DEBUGNL(" Hello_impl::getComponentVersion()");
  // TODO
  return CORBA::string_dup("0.0"); 
}

char* Hello_impl::getComponentDate()
{
  DEBUGNL(" Hello_impl::getComponentDate()");
  // TODO	
  return CORBA::string_dup("0000-00-00"); 
}

char* Hello_impl::getComponentUUID()
{
  DEBUGNL(" Hello_impl::getComponentUUID()");
  // TODO
  return CORBA::string_dup("no UUID"); 
}

/*
 * Component Attributes
 */


/*
 * Supported Interfaces
 */



/*
 * Equivalent IDL methods
 */

// Facets

// console

Console_ptr Hello_impl::provide_console()
{
  DEBUGNL(" Hello_impl::provide_console()");

  if (console_facet_adapter == 0) {
    console_facet_adapter = new consoleFacetAdapter(local_adapter);
    CORBA::Object_var _facet_ref = 
      ccm_container->activate_facet(this, "console",NULL/* _instance_for_facet_calc*/,
				 console_facet_adapter);
    reference_for_facet_console = Console::_narrow(_facet_ref);
  }
  return Console::_duplicate (reference_for_facet_console);
}


// Receptacles




// Publishers not supported

// Emitters not supported

// Consumers not suppored


/*
 * Inherited Navigation interface
 */

CORBA::Object_ptr
Hello_impl::provide_facet (const char* name)
{
  DEBUGNL(" Hello_impl::provide_facet()");

   if (strcmp(name, "console") == 0) {
     return provide_console();
   }
  throw Components::InvalidName();
  return CORBA::Object::_nil ();
}

Components::FacetDescriptions *
Hello_impl::get_all_facets ()
{
  DEBUGNL(" Hello_impl::get_all_facets()");
  // TODO
  return NULL;
}

Components::FacetDescriptions *
Hello_impl::get_named_facets (const Components::NameList & _names)
{
  DEBUGNL(" Hello_impl::get_named_facets()");
  // TODO
  return NULL;
}

CORBA::Boolean
Hello_impl::same_component (CORBA::Object_ptr _ref)
{
  DEBUGNL(" Hello_impl::same_component()");
  // TODO
  return false;
}

/*
 * Inherited Receptacles interface
 */

Components::Cookie *
Hello_impl::connect (const char* name, CORBA::Object_ptr ref)
{
  DEBUGNL(" Hello_impl::connect()");

  throw Components::InvalidName();
  return new CCM::Cookie_impl;
}

void
Hello_impl::disconnect (const char* name, Components::Cookie* _ck)
{
  DEBUGNL(" Hello_impl::disconnect()");

  throw Components::InvalidName();
}

Components::ConnectionDescriptions *
Hello_impl::get_connections (const char * _name)
{
  DEBUGNL(" Hello_impl::get_connections()");
  // TODO
  return NULL;
}

Components::ReceptacleDescriptions *
Hello_impl::get_all_receptacles ()
{
  DEBUGNL(" Hello_impl::get_all_receptacles()");
  // TODO
  return NULL;
}

Components::ReceptacleDescriptions *
Hello_impl::get_named_receptacles (const Components::NameList & _names)
{
  DEBUGNL(" Hello_impl::get_named_receptacles()");
  // TODO
  return NULL;
}

/*
 * Inherited Events interface
 */

Components::EventConsumerBase_ptr
Hello_impl::get_consumer (const char * _name)
{
  DEBUGNL(" Hello_impl::get_consumer()");
  throw Components::InvalidName();
  return Components::EventConsumerBase::_nil ();
}

Components::ConsumerDescriptions *
Hello_impl::get_all_consumers ()
{
  DEBUGNL(" Hello_impl::get_all_consumers()");
  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_consumers (_allnames);
}

Components::ConsumerDescriptions *
Hello_impl::get_named_consumers (const Components::NameList & _names)
{
  DEBUGNL(" Hello_impl::get_named_consumers()");
  Components::ConsumerDescriptions_var _res = new Components::ConsumerDescriptions;
  _res->length (_names.length());
  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }
  return _res._retn();
}

Components::Cookie *
Hello_impl::subscribe (const char * _name, Components::EventConsumerBase_ptr _ref)
{
  DEBUGNL(" Hello_impl::subscribe()");
  throw Components::InvalidName();
  return new CCM::Cookie_impl;
}

void
Hello_impl::unsubscribe (const char * _name, Components::Cookie * _ck)
{
  DEBUGNL(" Hello_impl::unsubscribe()");
  throw Components::InvalidName();
}

Components::PublisherDescriptions *
Hello_impl::get_all_publishers ()
{
  DEBUGNL(" Hello_impl::get_all_publishers()");
  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_publishers (_allnames);
}

Components::PublisherDescriptions *
Hello_impl::get_named_publishers (const Components::NameList & _names)
{
  DEBUGNL(" Hello_impl::get_named_publishers()");
  Components::PublisherDescriptions_var _res = new Components::PublisherDescriptions;
  _res->length (_names.length());
  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }
  return _res._retn();
}

void
Hello_impl::connect_consumer (const char * _name, Components::EventConsumerBase_ptr _ref)
{
  DEBUGNL(" Hello_impl::connect_consumer()");
  throw Components::InvalidName();
}

Components::EventConsumerBase_ptr
Hello_impl::disconnect_consumer (const char * _name)
{
  DEBUGNL(" Hello_impl::disconnect_consumer()");
  throw Components::InvalidName();
}

Components::EmitterDescriptions *
Hello_impl::get_all_emitters ()
{
  DEBUGNL(" Hello_impl::get_all_emitters()");
  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_emitters (_allnames);
}

Components::EmitterDescriptions *
Hello_impl::get_named_emitters (const Components::NameList & _names)
{
  DEBUGNL(" Hello_impl::get_named_emitters()");
  Components::EmitterDescriptions_var _res = new Components::EmitterDescriptions;
  _res->length (_names.length());
  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }
  return _res._retn();
}


/*
 * Inherited CCMObject interface
 */

CORBA::Object_ptr
Hello_impl::get_component_def ()
{
  DEBUGNL(" Hello_impl::get_component_def()");
  // TODO
  return CORBA::Object::_nil ();
}

Components::CCMHome_ptr
Hello_impl::get_ccm_home ()
{
  DEBUGNL(" Hello_impl::get_ccm_home()");
  return ccm_container->get_reference_for_home ();
}

void
Hello_impl::configuration_complete ()
{
  DEBUGNL(" Hello_impl::configuration_complete()");
  ccm_container->configuration_complete (this); 
  local_adapter->set_session_context(local_context);
  local_adapter->ccm_activate ();
}

Components::ComponentPortDescription *
Hello_impl::get_all_ports ()
{
  DEBUGNL(" Hello_impl::get_all_ports()");
  // TODO
  return NULL;
}

void
Hello_impl::remove ()
{
  DEBUGNL(" Hello_impl::remove()");
  local_adapter->ccm_passivate();
  local_adapter->ccm_remove();
  Components::CCMHome_var myhome = get_ccm_home ();
  Components::CCMObject_var myself = ccm_container->get_reference_for_component (this);
  myhome->remove_component (myself);
}


/*
 * Overload default implementation
 */

CORBA::Object_ptr
Hello_impl::_get_component ()
{
  DEBUGNL(" Hello_impl::_get_component()");
  return ccm_container->get_reference_for_component (this);
}


//============================================================================
// Component Context 
//============================================================================

CCM_Hello_Context_impl::
CCM_Hello_Context_impl(Hello_impl* c, CCM::SessionContainer* co)
  : component_adapter(c), ccm_container(co)
{
  DEBUGNL("+CCM_Hello_Context_impl->CCM_Hello_Context_impl()");

	
}


CCM_Hello_Context_impl::~CCM_Hello_Context_impl()
{
  DEBUGNL("-CCM_Hello_Context_impl->~CCM_Hello_Context_impl()");
}



localComponents::Principal* 
CCM_Hello_Context_impl::get_caller_principal()
{
  DEBUGNL(" CCM_Hello_Context_impl->get_caller_principal()");
  // TODO
  return NULL;
}

localComponents::HomeExecutorBase* 
CCM_Hello_Context_impl::get_CCM_home()
{
  DEBUGNL(" CCM_Hello_Context_impl->get_CCM_home()");
  // TODO
  return NULL;
}

bool 
CCM_Hello_Context_impl::get_rollback_only()
  throw (localComponents::IllegalState)
{
  DEBUGNL(" CCM_Hello_Context_impl->get_rollback_only()");
  // TODO
  return false;
}

localTransaction::UserTransaction*
CCM_Hello_Context_impl::get_user_transaction()
  throw (localComponents::IllegalState)
{
  DEBUGNL(" CCM_Hello_Context_impl->get_user_transaction()");
  // TODO
  return NULL;
}

bool 
CCM_Hello_Context_impl::is_caller_in_role(const string& role)
{
  DEBUGNL(" CCM_Hello_Context_impl->is_caller_in_role()");
  // TODO
  return false;
}

void 
CCM_Hello_Context_impl::set_rollback_only()
  throw (localComponents::IllegalState)
{
  DEBUGNL(" CCM_Hello_Context_impl->set_rollback_only()");
  // TODO
}

localComponents::Object*
CCM_Hello_Context_impl::get_CCM_object()
  throw(localComponents::IllegalState)
{
  DEBUGNL(" CCM_Hello_Context_impl->get_CCM_object()");
  // TODO
  return NULL;
}


//============================================================================
// console remote facet adapter
//============================================================================

consoleFacetAdapter::consoleFacetAdapter(CCM_Local::CCM_Session_Hello::CCM_Hello_impl* lc)
  : local_component(lc)
{
  DEBUGNL("+consoleFacetAdapter::consoleFacetAdapter()");
  
  local_adapter = local_component->get_console();
}

consoleFacetAdapter::~consoleFacetAdapter()
{
  DEBUGNL("-consoleFacetAdapter::~consoleFacetAdapter()");
  delete local_adapter;
}


char* consoleFacetAdapter::foo1(const char* s1, char*& s2, CORBA::String_out s3) 
{
  DEBUGNL(" consoleFacetAdapter::foo1()");

  // %(MParameterDefConvertParameter)s
  std::string parameter_s1 = CCM::CORBAPK_STRING_to_PK_STRING(s1);  // IN
  std::string parameter_s2 = CCM::CORBAPK_STRING_to_PK_STRING(s2);  // INOUT
  std::string parameter_s3; // OUT

  // %(MParameterDefDeclareResult)s
  std::string result;

  try {
    // %(MParameterDefConvertMethod)s
   result = local_adapter->foo1( parameter_s1,  parameter_s2,  parameter_s3);
  }
  // %(MParameterDefConvertExceptions)s 
  catch(...) {
    throw CORBA::SystemException();     
  }

  // %(MParameterDefConvertResult)s
  s2= CCM::PK_STRING_to_CORBAPK_STRING(parameter_s2);
  s3= CCM::PK_STRING_to_CORBAPK_STRING(parameter_s3);

  return CCM::PK_STRING_to_CORBAPK_STRING(result);
}


Person* consoleFacetAdapter::foo3(const Person& p1, Person& p2, Person_out p3) 
{
  DEBUGNL(" consoleFacetAdapter::foo3()");

  // %(MParameterDefConvertParameter)s
  CCM_Local::Person parameter_p1; // IN
  parameter_p1.id = CCM::CORBAPK_LONG_to_PK_LONG(p1.id);
  parameter_p1.name = CCM::CORBAPK_STRING_to_PK_STRING(p1.name);

  CCM_Local::Person parameter_p2; // INOUT
  parameter_p2.id = CCM::CORBAPK_LONG_to_PK_LONG(p2.id); 
  parameter_p2.name = CCM::CORBAPK_STRING_to_PK_STRING(p2.name);

  CCM_Local::Person parameter_p3; // OUT

  // %(MParameterDefDeclareResult)s
  CCM_Local::Person result;

  try {
    // %(MParameterDefConvertMethod)s
    result = local_adapter->foo3(parameter_p1,  parameter_p2,  parameter_p3);
  }
  // %(MParameterDefConvertExceptions)s  
  catch(...) {
    throw CORBA::SystemException();     
  }

  // %(MParameterDefConvertResult)s
  p2.id = CCM::PK_LONG_to_CORBAPK_LONG(parameter_p2.id);
  p2.name = CCM::PK_STRING_to_CORBAPK_STRING(parameter_p2.name); 
  
  p3 = new Person;
  p3->id = CCM::PK_LONG_to_CORBAPK_LONG(parameter_p3.id);
  p3->name = CCM::PK_STRING_to_CORBAPK_STRING(parameter_p3.name);

  Person_var return_value = new Person;
  return_value->id = CCM::PK_LONG_to_CORBAPK_LONG(result.id);
  return_value->name = CCM::PK_STRING_to_CORBAPK_STRING(result.name);

  return return_value._retn();

}


PersonMap* consoleFacetAdapter::foo4(const PersonMap& p1, PersonMap& p2, PersonMap_out p3) 
{
  DEBUGNL(" consoleFacetAdapter::foo4()");

  // %(MParameterDefConvertParameter)s
  CCM_Local::PersonMap parameter_p1; // IN
  CCM_Local::Person parameter_p1_item;
  for(unsigned long i=0; i< p1.length(); i++) {
    parameter_p1_item.name = CCM::CORBAPK_STRING_to_PK_STRING(p1[i].name);
    parameter_p1_item.id   = CCM::CORBAPK_LONG_to_PK_LONG(p1[i].id);
    parameter_p1.push_back(parameter_p1_item);
  }

  CCM_Local::PersonMap parameter_p2; // INOUT
  CCM_Local::Person parameter_p2_item;
  for(unsigned long i=0; i< p2.length(); i++) {
    parameter_p2_item.name = CCM::CORBAPK_STRING_to_PK_STRING(p2[i].name);
    parameter_p2_item.id   = CCM::CORBAPK_LONG_to_PK_LONG(p2[i].id);
    parameter_p2.push_back(parameter_p2_item);
  }

  CCM_Local::PersonMap parameter_p3; // OUT


  // %(MParameterDefDeclareResult)s
  CCM_Local::PersonMap result;

  try {
    // %(MParameterDefConvertMethod)s
    result = local_adapter->foo4(parameter_p1, parameter_p2, parameter_p3);
  }
  // %(MParameterDefConvertExceptions)s  
  catch(...) {
    throw CORBA::SystemException();	
  }

  // %(MParameterDefConvertResult)s
  p2.length(parameter_p2.size());
  for(unsigned long i=0; i< parameter_p2.size() ;i++) {
    p2[i].id   = CCM::PK_LONG_to_CORBAPK_LONG(parameter_p2[i].id);
    p2[i].name = CCM::PK_STRING_to_CORBAPK_STRING(parameter_p2[i].name);
  }

  p3 = new PersonMap;
  p3->length(parameter_p3.size());
  for(unsigned long i=0; i< parameter_p3.size() ;i++) {
    (*p3)[i].id   = CCM::PK_LONG_to_CORBAPK_LONG(parameter_p3[i].id); 
    (*p3)[i].name = CCM::PK_STRING_to_CORBAPK_STRING(parameter_p3[i].name);
  }

  PersonMap_var return_value = new PersonMap;
  return_value->length(result.size());
  for(unsigned long i=0; i< result.size() ;i++) {
    (*return_value)[i].id   = CCM::PK_LONG_to_CORBAPK_LONG(result[i].id); 
    (*return_value)[i].name = CCM::PK_STRING_to_CORBAPK_STRING(result[i].name); 
  }

  return return_value._retn();
}


} // /namespace CCM_Session_Hello
} // /namespace CCM_Remote



