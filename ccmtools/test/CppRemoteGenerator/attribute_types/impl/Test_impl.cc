
/***
 * This file was automatically generated by 
 * <http://ccmtools.sourceforge.net/>
 *
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "Test_impl.h"
#include "Test_inBasicType_impl.h"
#include "Test_inUserType_impl.h"

using namespace std;
using namespace WX::Utils;
using namespace CCM_Local;

namespace CCM_Local {
namespace CCM_Session_Test {

//==============================================================================
// CCM_Test - component implementation
//==============================================================================

CCM_Test_impl::CCM_Test_impl()
{
    DEBUGNL("+CCM_Test_impl->CCM_Test_impl()");
}

CCM_Test_impl::~CCM_Test_impl()
{
    DEBUGNL("-CCM_Test_impl->~CCM_Test_impl()");
}

const short
CCM_Test_impl::short_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->short_value()");
    return short_value_;
}

void
CCM_Test_impl::short_value(const short value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->short_value()");
    short_value_ = value;
}

const long
CCM_Test_impl::long_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->long_value()");
    return long_value_;
}

void
CCM_Test_impl::long_value(const long value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->long_value()");
    long_value_ = value;
}

const unsigned short
CCM_Test_impl::ushort_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ushort_value()");
    return ushort_value_;
}

void
CCM_Test_impl::ushort_value(const unsigned short value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ushort_value()");
    ushort_value_ = value;
}

const unsigned long
CCM_Test_impl::ulong_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ulong_value()");
    return ulong_value_;
}

void
CCM_Test_impl::ulong_value(const unsigned long value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ulong_value()");
    ulong_value_ = value;
}

const float
CCM_Test_impl::float_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->float_value()");
    return float_value_;
}

void
CCM_Test_impl::float_value(const float value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->float_value()");
    float_value_ = value;
}

const double
CCM_Test_impl::double_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->double_value()");
    return double_value_;
}

void
CCM_Test_impl::double_value(const double value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->double_value()");
    double_value_ = value;
}

const char
CCM_Test_impl::char_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->char_value()");
    return char_value_;
}

void
CCM_Test_impl::char_value(const char value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->char_value()");
    char_value_ = value;
}

const std::string
CCM_Test_impl::string_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->string_value()");
    return string_value_;
}

void
CCM_Test_impl::string_value(const std::string value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->string_value()");
    string_value_ = value;
}

const bool
CCM_Test_impl::boolean_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->boolean_value()");
    return boolean_value_;
}

void
CCM_Test_impl::boolean_value(const bool value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->boolean_value()");
    boolean_value_ = value;
}

const unsigned char
CCM_Test_impl::octet_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->octet_value()");
    return octet_value_;
}

void
CCM_Test_impl::octet_value(const unsigned char value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->octet_value()");
    octet_value_ = value;
}

const Color
CCM_Test_impl::color_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->color_value()");
    return color_value_;
}

void
CCM_Test_impl::color_value(const Color value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->color_value()");
    color_value_ = value;
}

const Person
CCM_Test_impl::person_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->person_value()");
    return person_value_;
}

void
CCM_Test_impl::person_value(const Person value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->person_value()");
    person_value_ = value;
}

const Address
CCM_Test_impl::address_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->address_value()");
    return address_value_;
}

void
CCM_Test_impl::address_value(const Address value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->address_value()");
    address_value_ = value;
}

const LongList
CCM_Test_impl::longList_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->longList_value()");
    return longList_value_;
}

void
CCM_Test_impl::longList_value(const LongList value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->longList_value()");
    longList_value_ = value;
}

const StringList
CCM_Test_impl::stringList_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->stringList_value()");
    return stringList_value_;
}

void
CCM_Test_impl::stringList_value(const StringList value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->stringList_value()");
    stringList_value_ = value;
}

const PersonList
CCM_Test_impl::personList_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->personList_value()");
    return personList_value_;
}

void
CCM_Test_impl::personList_value(const PersonList value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->personList_value()");
    personList_value_ = value;
}

const time_t
CCM_Test_impl::time_t_value() const
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->time_t_value()");
    return time_t_value_;
}

void
CCM_Test_impl::time_t_value(const time_t value)
  throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->time_t_value()");
    time_t_value_ = value;
}

void
CCM_Test_impl::set_session_context(
    LocalComponents::SessionContext* context)
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->set_session_context()");
    ctx = dynamic_cast<CCM_Test_Context*>(context);
}

void
CCM_Test_impl::ccm_activate()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_activate()");

   cout << "==== Begin Test Case ====================================" << endl;

    // ---------------------------------------------------------------------
    // Receptacle Attribute Test Cases
    // ---------------------------------------------------------------------

    {
      cout << "Receptacle Attributes (Basic Types) Test...";
      SmartPtr<CCM_BasicTypeInterface> outBasicType =
	ctx->get_connection_outBasicType();

      {
	short value = -7;
	short result;
	outBasicType->short_value(value);
	result = outBasicType->short_value();
	assert(value == result);
      }

      {
	long value = -7777;
	long result;
	outBasicType->long_value(value);
	result = outBasicType->long_value();
	assert(result == value);
      }

      {
	unsigned short value = 7;
	unsigned short result;
	outBasicType->ushort_value(value);
	result = outBasicType->ushort_value();
	assert(result == value);
      }

      {
	unsigned long value = 7777;
	unsigned long result;
	outBasicType->ulong_value(value);
	result = outBasicType->ulong_value();
	assert(result == value);
      }

      {
	float value = -77.77;
	float result;
	outBasicType->float_value(value);
	result = outBasicType->float_value();
	assert(result == value);
      }

      {
	double value = -77.7777;
	double result;
	outBasicType->double_value(value);
	result = outBasicType->double_value();
	assert(result == value);
      }

      {
	char value = 'x';
	char result;
	outBasicType->char_value(value);
	result = outBasicType->char_value();
	assert(result == value);
      }

      {
	string value = "0123456789";
	string result;
	outBasicType->string_value(value);
	result = outBasicType->string_value();
	assert(value == result);
      }

      {
	bool value = true;
	bool result;
	outBasicType->boolean_value(value);
	result = outBasicType->boolean_value();
	assert(result == value);
      }

      {
	unsigned char value = 0xff;
	unsigned char result;
	outBasicType->octet_value(value);
	result = outBasicType->octet_value();
	assert(result == value);
      }
      cout << "OK!" << endl;
    }



    {
      cout << "Receptacle Attributes (User Types) Test...";
      SmartPtr<CCM_UserTypeInterface> outUserType =
	ctx->get_connection_outUserType();
      {
	// enum Color {red, green, blue, black, orange}
        Color value = blue;
	Color result;
	outUserType->color_value(value);	
        result = outUserType->color_value();

        assert(result == value);
      }

      {
	// struct Person { long id; string name; }
        Person value;
        Person result;
        value.name = "Egon";   
        value.id = 3;
        outUserType->person_value(value);
	result = outUserType->person_value();

	assert(result.name == value.name);
	assert(result.id == value.id);
      }

      {
	// struct Address { string street; long number; Person resident; }
        Address value;
        Address result;
        Person person;
        value.street = "Waltendorf";   
        value.number = 7;
        person.name = "Egon";   
        person.id   = 3;
        value.resident = person;
	outUserType->address_value(value);
        result = outUserType->address_value();

	assert(result.street == value.street);
	assert(result.number == value.number);
	assert(result.resident.name == value.resident.name);
	assert(result.resident.id == value.resident.id);
      }

      
      {
      	// typedef sequence<long> LongList
	const int MAX_SIZE = 100; 
	LongList value;
	LongList result;

	value.reserve(MAX_SIZE);
	for(int i=0;i<MAX_SIZE;i++) {
	  value.push_back(i);
	}
	outUserType->longList_value(value);
	result = outUserType->longList_value();

	assert((int)result.size() == MAX_SIZE);
	for(int i=0; i < (int)result.size(); i++) {
	  assert(result[i] == value[i]);
	}
      }

      {
	// typedef sequence<string> StringList
 	const int MAX_SIZE = 100; 
	StringList value;
	StringList result;
        for(int i=0; i < MAX_SIZE; i++) {
	  string s = "Egon";
          value.push_back(s);
        }
	outUserType->stringList_value(value);
	result = outUserType->stringList_value();

	assert((int)result.size() == MAX_SIZE);
	for(int i=0; i < (int)result.size(); i++) {
	  assert(result[i] == value[i]);
	}
      }

      {
	// typedef sequence<Person> PersonList
	const int MAX_SIZE = 100; 
        PersonList value;
        PersonList result;
        for(int i=0; i < MAX_SIZE; i++) {
	  Person p;
          p.name = "Andrea";
          p.id   = i;
	  value.push_back(p);
        }

	outUserType->personList_value(value);
	result = outUserType->personList_value();

	assert((int)result.size() == MAX_SIZE);
	for(int i=0; i < (int)result.size(); i++) {
	  assert(result[i].name == value[i].name);
	  assert(result[i].id == value[i].id);
	}
      }

      {
	// typedef long time_t;
	time_t value = -7777;
	time_t result;
	outUserType->time_t_value(value);
	result = outUserType->time_t_value();
	assert(result == value);
      }

      cout << "OK!" << endl;
    }

   cout << "==== End Test Case =====================================" << endl;
}


void
CCM_Test_impl::ccm_passivate()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_passivate()");

    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_Test_impl::ccm_remove()
    throw(LocalComponents::CCMException)
{
    DEBUGNL(" CCM_Test_impl->ccm_remove()");

    // OPTIONAL : IMPLEMENT ME HERE !
}

//==============================================================================
// CCM_BasicTypeInterface facet implementation
//==============================================================================

CCM_BasicTypeInterface*
CCM_Test_impl::get_inBasicType()
{
    DEBUGNL(" CCM_Test_impl->get_inBasicType()");
    inBasicType_impl* facet = new inBasicType_impl(this);
    return dynamic_cast<CCM_BasicTypeInterface*>(facet);
}

//==============================================================================
// CCM_UserTypeInterface facet implementation
//==============================================================================

CCM_UserTypeInterface*
CCM_Test_impl::get_inUserType()
{
    DEBUGNL(" CCM_Test_impl->get_inUserType()");
    inUserType_impl* facet = new inUserType_impl(this);
    return dynamic_cast<CCM_UserTypeInterface*>(facet);
}

} // /namespace CCM_Session_Test
} // /namespace CCM_Local

