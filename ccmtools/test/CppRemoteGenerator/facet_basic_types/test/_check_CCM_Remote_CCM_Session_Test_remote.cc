/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by the CCM Tools.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the remote component test concept. 
 *
 * To enable debug output use -DWXDEBUG compiler flag
 ***/

#include <cstdlib> 
#include <iostream>
#include <string>
#include <WX/Utils/debug.h>
#include <CCM/CCMContainer.h>

#include <CORBA.h>
#include <coss/CosNaming.h>

#include <CCM_Remote/CCM_Session_Test/TestHome_remote.h>
#include <Test.h>

using namespace std;
using namespace WX::Utils;

//==============================================================================
// Implementation of remote client test
//==============================================================================

int 
main (int argc, char *argv[])
{
    DEBUGNL("Enter C++ remote test client");

    char* NameServiceLocation = getenv("CCM_NAME_SERVICE");
    if(NameServiceLocation == NULL) { 
        cerr << "Error: Environment variable CCM_NAME_SERVICE is not set!" 
	     << endl;
        return -1;
    }

    // Initialize ORB 
    ostringstream os;
    os << "NameService=" << NameServiceLocation;
    char* argv_[] = { "", "-ORBInitRef", (char*)os.str().c_str()}; 
    int   argc_   = 3;
    DEBUGNL(">> " << argv_[0] << " "<< argv_[1] << argv_[2]);
    CORBA::ORB_var orb = CORBA::ORB_init(argc_, argv_);

    /**
     * Server-side code
     */ 
    CCM::register_all_factories (orb);
    int error = 0;
    error += deploy_CCM_Local_TestHome("TestHome");
    error += deploy_CCM_Remote_TestHome(orb, "TestHome:1.0");
    if(!error) {
        cout << "TestHome stand-alone server is running..." << endl;
    }
    else {
        cerr << "ERROR: Can't start components!" << endl;
        return -1;
    }

    // For testing we use CORBA collocation	
    // orb->run();
	

    /**
     * Client-side code
     */
    CORBA::Object_var obj = orb->resolve_initial_references("NameService");
    CosNaming::NamingContextExt_var nc =
        CosNaming::NamingContextExt::_narrow(obj);

    // Deployment 

    // Find ComponentHomes in the Naming-Service
    obj = nc->resolve_str("TestHome:1.0");
    assert (!CORBA::is_nil (obj));
    ::TestHome_var myTestHome = 
	::TestHome::_narrow (obj);

    // Create component instances
    ::Test_var myTest = myTestHome->create();

    // Provide facets   
    ::IFace_var IFaceiface = 
        myTest->provide_iface();


	
    myTest->configuration_complete();

    DEBUGNL("==== Begin Test Case ==========================================");

    CORBA::Short short_2=3, short_3, short_r;
    short_r = IFaceiface->op1(7,short_2, short_3);
    assert(short_2 == 7);
    assert(short_3 == 3);
    assert(short_r == 3+7);
    
    CORBA::Long long_2=3, long_3, long_r;
    long_r = IFaceiface->op2(7,long_2, long_3);
    assert(long_2 == 7);
    assert(long_3 == 3);
    assert(long_r == 3+7);
    
    CORBA::UShort ushort_2=3, ushort_3, ushort_r;
    ushort_r = IFaceiface->op3(7,ushort_2, ushort_3);
    assert(ushort_2 == 7);
    assert(ushort_3 == 3);
    assert(ushort_r == 3+7);
    
    CORBA::ULong ulong_2=3, ulong_3, ulong_r;
    ulong_r = IFaceiface->op4(7,ulong_2, ulong_3);
    assert(ulong_2 == 7);
    assert(ulong_3 == 3);
    assert(ulong_r == 3+7);
    
    CORBA::Float float_2=3.0, float_3, float_r;
    float_r = IFaceiface->op5(7.0,float_2, float_3);
    assert(float_2 == 7.0);
    assert(float_3 == 3.0);
    assert(float_r == 3.0+7.0);
    
    CORBA::Double double_2=3.0, double_3, double_r;
    double_r = IFaceiface->op6(7.0,double_2, double_3);
    assert(double_2 == 7.0);
    assert(double_3 == 3.0);
    assert(double_r == 3.0+7.0);
    
    CORBA::Char char_2=3, char_3, char_r;
    char_r = IFaceiface->op7(7,char_2, char_3);
    assert(char_2 == 7);
    assert(char_3 == 3);
    assert(char_r == 3+7);
    
    char* string_2 = CORBA::string_dup("drei");
    char* string_3;
    char* string_r;
    string_r = IFaceiface->op8("sieben",string_2, string_3);
    assert(strcmp(string_2,"sieben") == 0);
    assert(strcmp(string_3,"drei") == 0);
    assert(strcmp(string_r,"dreisieben") == 0);
    
    CORBA::Boolean bool_2=false, bool_3, bool_r;
    bool_r = IFaceiface->op9(true, bool_2, bool_3);
    assert(bool_2 == true);
    assert(bool_3 == false);
    assert(bool_r == false && true);
    
    CORBA::Octet octet_2=3, octet_3, octet_r;
    octet_r = IFaceiface->op10(7,octet_2, octet_3);
    assert(octet_2 == 7);
    assert(octet_3 == 3);
    assert(octet_r == 3+7);
    
    DEBUGNL("==== End Test Case ============================================");

    // Un-Deployment

    // Destroy component instances
    myTest->remove();

    DEBUGNL("Exit C++ remote test client"); 	
}
