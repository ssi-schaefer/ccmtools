
/***
 * This file was automatically generated by CCM Tools 
 * <http://ccmtools.sourceforge.net/>
 *
 * Test component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>

#include "Test_impl.h"
#include "Test_inPort_impl.h"

using namespace std;

//==============================================================================
// Test - component implementation
//==============================================================================

Test_impl::Test_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

Test_impl::~Test_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
Test_impl::set_session_context(Components::SessionContext* context)
    throw(Components::CCMException)
{
    ctx = dynamic_cast<CCM_Test_Context*>(context);
}

void
Test_impl::ccm_activate()
    throw(Components::CCMException)
{
    string s = "Salomon.Automation";
    long len =  ctx->get_connection_outPort()->print(s);
    assert(len == (long)s.length());
  
    try 
    {
        string s = "SimpleError";
        ctx->get_connection_outPort()->print(s);
        assert(0);
    }
    catch(SimpleError& e) 
    {
        cout << "OK: error exception catched! ";
        cout << "(" 
             << e.info[0].code << ", " 
             << e.info[0].message << ")" 
             << endl;
    }
    
    try 
    {
        string s = "SuperError";
        ctx->get_connection_outPort()->print(s);
        assert(0);
    }
    catch(SuperError& e) 
    {
      cout << "OK: super_error exception catched!" << endl;
    }
  
    try 
    {
        string s = "FatalError";
        ctx->get_connection_outPort()->print(s);
        assert(0);
    }
    catch(Components::Exception& e) 
    {
      // catch base class exception 
      cout << e.what() << endl;
    }
    catch(FatalError& e) 
    {
      cout << "OK: fatal_error exception catched!" << endl;
    }

}

void
Test_impl::ccm_passivate()
    throw(Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
Test_impl::ccm_remove()
    throw(Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

//==============================================================================
// CCM_Console facet implementation
//==============================================================================

CCM_Console*
Test_impl::get_inPort()
{
    Test_inPort_impl* facet = new Test_inPort_impl(this);
    return dynamic_cast< CCM_Console*>(facet);
}

