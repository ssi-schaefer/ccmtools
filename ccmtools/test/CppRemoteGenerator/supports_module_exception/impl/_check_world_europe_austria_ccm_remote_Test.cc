/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by CCM Tools version 0.5.3-pre3.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the remote component test concept. 
 *
 * To enable debug output use -DWXDEBUG compiler flag and set the
 * WX_DEBUG_LEVELS environment variable to "CCM_REMOTE".
 * (e.g. export WX_DEBUG_LEVELS="CCM_REMOTE")
 ***/

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

#include <cstdlib> 
#include <iostream>
#include <string>
#include <wx/utils/debug.h>
#include <CCM/CCMContainer.h>

#include <CORBA.h>
#include <coss/CosNaming.h>

#include <world/europe/austria/ccm/remote/TestHome_remote.h>
#include <world_europe_austria_Test.h>

using namespace std;
using namespace wx::utils;

//==============================================================================
// Implementation of remote client test
//==============================================================================

int main (int argc, char *argv[])
{
    cout << "Enter C++ remote test client" << endl;

    char* NameServiceLocation = getenv("CCM_NAME_SERVICE");
    if(NameServiceLocation == NULL) { 
        cerr << "Error: Environment variable CCM_NAME_SERVICE not set!" << endl;
        return -1;
    }

    // Initialize ORB 
    ostringstream os;
    os << "NameService=" << NameServiceLocation;
    char* argv_[] = { "", "-ORBInitRef", (char*)os.str().c_str()}; 
    int   argc_   = 3;
    DEBUGNL(">> " << argv_[0] << " "<< argv_[1] << argv_[2]);
    CORBA::ORB_var orb = CORBA::ORB_init(argc_, argv_);


    /**
     * Server-side code
     */ 

    // Register all value type factories with the ORB  
    CCM::register_all_factories (orb);

    // Deploy local and remote component homes	
    int error = 0;
    error += deploy_world_europe_austria_ccm_local_TestHome("TestHome");
    error += deploy_world_europe_austria_ccm_remote_TestHome(orb, "TestHome:1.0");
    if(!error) {
        cout << "TestHome server is running..." << endl;
    }
    else {
        cerr << "ERROR: Can't deploy components!" << endl;
        return -1;
    }

    // For testing we use CORBA collocation	
    // orb->run();
	

    /**
     * Client-side code
     */
    CORBA::Object_var obj = orb->resolve_initial_references("NameService");
    CosNaming::NamingContextExt_var nc =
        CosNaming::NamingContextExt::_narrow(obj);

    // Deployment 

    // Find ComponentHomes in the Naming-Service
    obj = nc->resolve_str("TestHome:1.0");
    assert (!CORBA::is_nil (obj));
    world::europe::austria::TestHome_var myTestHome = 
      world::europe::austria::TestHome::_narrow (obj);

    // Create component instances
    world::europe::austria::Test_var myTest = myTestHome->create();

    // Provide facets   

	
    myTest->configuration_complete();

    cout << "==== Begin Test Case ===================================" << endl;

    char* s = CORBA::string_dup("Salomon.Automation");
    CORBA::Long len;
    len = myTest->print(s);
    assert(strlen(s) == (unsigned long)len);
    
    try {
      char* s = CORBA::string_dup("SimpleError");
      myTest->print(s);
      assert(false);
    } 
    catch(const ::world::europe::austria::SimpleError& e) {
      ::world::europe::austria::ErrorInfoList infolist = e.info;
      for(unsigned long i = 0; i < infolist.length(); i++) {
        cout << e.info[i].code << ": " 
             << e.info[i].message << endl;
      }
      LDEBUGNL(CCM_REMOTE, ::world::europe::austria::ccm::remote::ccmDebug(e)); //!!!
    } 
    catch(const CORBA::SystemException& e) {
      cout << "CORBA::SystemException catched!" << endl;
      assert(false);
    }  
    
    try {
      char* s = CORBA::string_dup("SuperError");
      myTest->print(s);
      assert(false);
    } 
    catch(const ::world::europe::austria::SuperError& e) {
      cout << "SuperError" << endl;
      LDEBUGNL(CCM_REMOTE, ::world::europe::austria::ccm::remote::ccmDebug(e));
    }   
    catch(const CORBA::SystemException& e) {
      cout << "CORBA::SystemException catched!" << endl;
      assert(false);
    }
    
    try {
      char* s = CORBA::string_dup("FatalError");
      myTest->print(s);
      assert(false);
    } 
    catch(const ::world::europe::austria::FatalError& e) {
      LDEBUGNL(CCM_REMOTE, ::world::europe::austria::ccm::remote::ccmDebug(e));
    } 
    catch(const CORBA::SystemException& e) {
      cout << "CORBA::SystemException catched!" << endl;
      assert(false); 
    }

    cout << "==== End Test Case =====================================" << endl; 

    // Destroy component instances
    myTest->remove();

    // Un-Deployment
    cout << "Exit C++ remote test client" << endl; 	
}

#endif // HAVE_MICO

