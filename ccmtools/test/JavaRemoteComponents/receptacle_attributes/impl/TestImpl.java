/**
 * This file was automatically generated by CCM Tools 
 * <http://ccmtools.sourceforge.net>
 * 
 * CCM_Test component business logic.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */

package world.europe.austria;

import java.util.List;
import java.util.ArrayList;

import Components.SessionContext; 
import Components.CCMException;
import Components.NoConnection;

import world.*;  
import world.europe.*;  
   
/**
 * This class implements component equivalent and supported interfaces
 * as well as component attributes.
 * Additionally, session component callback methods must be implemented.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */   
public class TestImpl 
    implements CCM_Test
{
    /** Supported interface attribute variables */
    
    

    /** Component attribute variables */
     

    public CCM_Test_Context ctx;
    
    
    public TestImpl()
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }


    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */
    
    
    
    /** Supported interface methods */
        


    /** Component attribute accessor methods */
    


    /** Facet implementation factory methods */
        

    /** Component callback methods */
    
    public void set_session_context(SessionContext ctx) 
        throws CCMException
    {
        this.ctx = (CCM_Test_Context)ctx; 
    }

    public void ccm_activate() 
        throws CCMException
    {
       try
        {
            BasicTypeInterface basicType = ctx.get_connection_basicType();
            System.out.println("Receptacle attributes (Basic Types) Test...");
            {
                short value = -7;
                basicType.short_value(value);
                short result = basicType.short_value();
                assert(result == value);
            }
            {
                int value = -7777;
                basicType.long_value(value);
                int result = basicType.long_value();
                assert(result == value);
            }
            {
                short value = 7;
                basicType.ushort_value(value);
                short result = basicType.ushort_value();
                assert(result == value);
            }
            {
                int value = 7777;
                basicType.ulong_value(value);
                int result = basicType.ulong_value();
                assert(result == value);
            }
            {
                float value = (float)-77.77;
                basicType.float_value(value);
                float result = basicType.float_value();
                assert(result == value);
            }
            {
                double value = -77.7777;
                basicType.double_value(value);
                double result = basicType.double_value();
                assert(result == value);
            }
            {
                char value = 'x';
                basicType.char_value(value);
                char result = basicType.char_value();
                assert(result == value);
            }
            {
                String value = "0123456789";
                basicType.string_value(value);
                String result = basicType.string_value();
                assert(result.equals(value));
            }
            {
                boolean value = true;
                basicType.boolean_value(value);
                boolean result = basicType.boolean_value();
                assert(result == value);
            }
            {
                byte value = (byte)0xff;
                basicType.octet_value(value);
                byte result = basicType.octet_value();
                assert(result == value);
            }
            System.out.println("OK!");


            UserTypeInterface userType = ctx.get_connection_userType();
            System.out.println("Receptacle attributes (User Types) Test...");
            {
                // enum Color {red, green, blue, black, orange}
                Color value = Color.blue;
                userType.color_value(value);
                Color result = userType.color_value();
                assert(result == value);
            }

            {
                // struct Person { long id; string name; }
                Person value = new Person(3, "Egon");
                userType.person_value(value);
                Person result = userType.person_value();
                assert(result.getId() == value.getId());
                assert(result.getName().equals(value.getName()));
            }

            {
                // struct Address { string street; long number; Person resident; }
                String street = "Waltendorf";
                int number = 7;
                Person resident = new Person(3, "Egon");
                Address value = new Address(street, number, resident);
                userType.address_value(value);
                Address result = userType.address_value();
                assert(result.getStreet().equals(value.getStreet()));
                assert(result.getNumber() == value.getNumber());
                assert(result.getResident().getId() == value.getResident().getId());
                assert(result.getResident().getName().equals(value.getResident().getName()));
            }


            {
                // typedef sequence<long> LongList
                List<Integer> value = new ArrayList<Integer>(10);
                for(int i = 0; i< value.size(); i++)
                {
                    value.add(i);
                }
                userType.longList_value(value);
                List<Integer> result = userType.longList_value();
                for(int i = 0; i<result.size(); i++)
                {
                    assert(result.get(i) == value.get(i));
                }
            }

            {
                // typedef sequence<string> StringList
                List<String> value = new ArrayList<String>(10);
                for(int i = 0; i< value.size(); i++)
                {
                    value.add("Egon");
                }
                userType.stringList_value(value);
                List<String> result = userType.stringList_value();
                for(int i = 0; i<result.size(); i++)
                {
                    assert(result.get(i).equals(value.get(i)));
                }
            }
            {
                // typedef sequence<Person> PersonList
                List<Person> value = new ArrayList<Person>(10);
                for(int i = 0; i< value.size(); i++)
                {
                    value.add(new Person(i, "Andrea"));
                }
                userType.personList_value(value);
                List<Person> result = userType.personList_value();
                for(int i = 0; i<result.size(); i++)
                {
                    assert(result.get(i).getId() == value.get(i).getId());
                    assert(result.get(i).getName().equals(value.get(i).getName()));
                }
            }

            {
                // typedef long time_t;
                int value = -7777;
                userType.time_t_value(value);
                int result = userType.time_t_value();
                assert(result == value);
            }

    /*
            {
                // typedef long LongArray[10]
                int length = 10;
                int[] value = new int[length];
                for(int i = 0; i< value.length; i++)
                {
                    value[i] = i;
                }
                userType.longArray_value(value);
                int[] result = userType.longArray_value();
                for(int i = 0; i<result.length; i++)
                {
                    assert(result[i] == value[i]);
                }
            }

            {
                // typedef string StringArray[10]
                int length = 10;
                String[] value = new String[length];
                for(int i = 0; i< value.length; i++)
                {
                    value[i] = "Egon";
                }
                userType.stringArray_value(value);
                String[] result = userType.stringArray_value();
                for(int i = 0; i<result.length; i++)
                {
                    assert(result[i].equals(value[i]));
                }
            }

            {
                // typedef Person PersonArray[10]
                Person[] value = new Person[10];
                for(int i = 0; i< value.length; i++)
                {
                    value[i] = new Person(i, "Andrea");
                }
                userType.personArray_value(value);
                Person[] result = userType.personArray_value();
                for(int i = 0; i < result.length; i++)
                {
                    assert(result[i].getId() == value[i].getId());
                    assert(result[i].getName().equals(value[i].getName()));
                }
            }
    */
            System.out.println("OK!");
        }
        catch(NoConnection e)
        {
            e.printStackTrace();
            assert(false);
        }
    }

    public void ccm_passivate() 
        throws CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }

    public void ccm_remove() 
        throws CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }
}
