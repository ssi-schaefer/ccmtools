/**
 * This file was automatically generated by CCM Tools version 0.6.6
 * <http://ccmtools.sourceforge.net>
 * 
 * CCM_Test component business logic.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */

package world.europe.austria.ccm.local;
   
import Components.ccm.local.SessionContext; 
import Components.ccm.local.CCMException;

import ccm.local.Holder;
import java.util.List;
import java.util.ArrayList;
  
   
/**
 * This class implements component equivalent and supported interfaces
 * as well as component attributes.
 * Additionally, session component callback methods must be implemented.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */   
public class TestImpl 
    implements CCM_Test
{
    /** Supported interface attribute variables */
    
    

    /** Component attribute variables */
     

    public CCM_Test_Context ctx;
    

    // This attribute is accessed by explicite set and get methods
    // which are part of VoidTypeInterface.
    private int attr;

    
    public TestImpl()
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }


    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */
    
    
    
    /** Supported interface methods */
    
    public short fb1(
            short p1,
            Holder<Short> p2,
            Holder<Short> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (short)(p3.getValue() + p1);
    }    

    public int fb2(
            int p1,
            Holder<Integer> p2,
            Holder<Integer> p3)
        throws CCMException
    {
       p3.setValue(p2.getValue());
       p2.setValue(p1);
       return p3.getValue() + p1;
    }    

    public short fb3(
            short p1,
            Holder<Short> p2,
            Holder<Short> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (short)(p3.getValue() + p1);
    }    

    public int fb4(
            int p1,
            Holder<Integer> p2,
            Holder<Integer> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public float fb5(
            float p1,
            Holder<Float> p2,
            Holder<Float> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public double fb6(
            double p1,
            Holder<Double> p2,
            Holder<Double> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public char fb7(
            char p1,
            Holder<Character> p2,
            Holder<Character> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (char)(p3.getValue() + p1);
    }    

    public String fb8(
            String p1,
            Holder<String> p2,
            Holder<String> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public boolean fb9(
            boolean p1,
            Holder<Boolean> p2,
            Holder<Boolean> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() && p1;
    }    

    public byte fb10(
            byte p1,
            Holder<Byte> p2,
            Holder<Byte> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (byte)(p3.getValue() + p1);
    }    

    public Color fu1(
            Color p1,
            Holder<Color> p2,
            Holder<Color> p3)
        throws CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return Color.orange;
    }    

    public Person fu2(
            Person p1,
            Holder<Person> p2,
            Holder<Person> p3)
        throws CCMException
    {
        Person r = new Person(p1.getId() + p2.getValue().getId(),
                              p1.getName() + p2.getValue().getName());
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return r;
    }    

    public Address fu3(
            Address p1,
            Holder<Address> p2,
            Holder<Address> p3)
        throws CCMException
    {
        Person person =
            new Person(p1.getResident().getId() + p2.getValue().getResident().getId(),
                       p1.getResident().getName() + p2.getValue().getResident().getName());
        Address addr =
            new Address(p1.getStreet() + p2.getValue().getStreet(),
                        p1.getNumber() + p2.getValue().getNumber(), person);
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return addr;
    }    

    public List<Integer> fu4(
            List<Integer> p1,
            Holder<List<Integer>> p2,
            Holder<List<Integer>> p3)
        throws CCMException
    {
        List<Integer> result = new ArrayList<Integer>(p1.size());
        p3.setValue(new ArrayList<Integer>(p1.size()));
        for (int i = 0; i < p1.size(); i++)
        {
            result.add(i);
            p3.getValue().add(p2.getValue().get(i));
            p2.getValue().set(i, p1.get(i));
        }
        return result;
    }    

    public List<String> fu5(
            List<String> p1,
            Holder<List<String>> p2,
            Holder<List<String>> p3)
        throws CCMException
    {
        List<String> result = new ArrayList<String>(p1.size());
        p3.setValue(new ArrayList<String>(p1.size()));
        for(int i = 0; i< p1.size(); i++)
        {
            result.add("Test");
            p3.getValue().add(p2.getValue().get(i));
            p2.getValue().set(i, p1.get(i));
        }
        return result;
    }    

    public List<Person> fu6(
            List<Person> p1,
            Holder<List<Person>> p2,
            Holder<List<Person>> p3)
        throws CCMException
    {
        List<Person> result = new ArrayList<Person>(p1.size());
        p3.setValue(new ArrayList<Person>(p1.size()));
        for (int i = 0; i < p1.size(); i++)
        {
            result.add(new Person(i, "Test"));
            p3.getValue().add(p2.getValue().get(i));
            p2.getValue().set(i, p1.get(i));
        }
        return result;
    }    

    public int fu7(
            int t1,
            Holder<Integer> t2,
            Holder<Integer> t3)
        throws CCMException
    {
        t3.setValue(t2.getValue());
        t2.setValue(t1);
        return t3.getValue() + t1;
    }    

    public void fv1(int p1)
        throws CCMException
    {
        attr = p1;
    }    

    public int fv2()
        throws CCMException
    {
	return attr;
    }    
    


    /** Component attribute accessor methods */
    


    /** Facet implementation factory methods */
        

    /** Component callback methods */
    
    public void set_session_context(SessionContext ctx) 
        throws CCMException
    {
        this.ctx = (CCM_Test_Context)ctx; 
    }

    public void ccm_activate() 
        throws CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }

    public void ccm_passivate() 
        throws CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }

    public void ccm_remove() 
        throws CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }
}
