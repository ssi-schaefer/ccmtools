This is a collection of test cases for CCM Tools:


Test of component features
==========================

attribute: OK
----------
A component with a simple string attribute.

attribute_basic_types: OK
----------------------
A component with attributes of different basic types
(short, long, float, double, etc.).

attribute_user_types: !!!!! 
---------------------
A component with attributes of different user types 
(typedef, enum, struct, sequence, etc.).
=> some problems with parser!


supports: OK
---------
A component that supports an interface that is stored in the 
same idl file.

supports_basic_types: !!!!! 
---------------------
A component that supports an interface that contains methods with
different basic types as in/inout/out parameters as well as as return value.
All source code is stored in the same IDL file.
=> _check* : string test parameter for inout and out can not be const.
=> Hello_app.cc : string return value needs a return value.

supports_exception: OK
-------------------
A component that supports an interface which has a method declaration
including a raises statement.
All source code is stored in the same IDL file.
 
supports_user_types: !!!!!
--------------------
A component that supports an interface which has different methods
that use some user types (typedef, enum, struct, sequence, etc.).
All source code is stored in the same IDL file.
=>  error in name verification: the identifier Value is undefined or of the wrong type
    error while adding contents '[MAliasDef: time_tMPrimitiveDef...


facet: OK
------
A component with one facet that is defined in the same IDL file.

facet_basic_types: !!!!!!! 
------------------
A component that provides an interface as facet that contains methods with
different basic types as in/inout/out parameters as well as as return value.
All source code is stored in the same IDL file.
=> _check* : string test parameter for inout and out can not be const!
=> Hello_app.cc : string return value needs a return value!

facet_exception: OK
----------------
A component that provides an interface as facet which has a method declaration
including a raises statement.
All source code is stored in the same IDL file.
 
facet_user_types: !!!!!
----------------- 
A component that provides an interface which has different methods
that use some user types (typedef, enum, struct, sequence, etc.).
All source code is stored in the same IDL file.
=> error in name verification: the identifier Value is undefined or of the wrong type
=>  error while adding contents '[MAliasDef: time_tMPrimitiveDef: PK_LONG, MEnumDef: Color { red green blue black orange };, null]' to container 'MContainer: null[MAliasDef: time_tMPrimitiveDef: PK_LONG, MEnumDef: Color { red green blue black orange };]'


receptacle: OK
-----------
A component with a single receptacle. The interface of the
receptacle is stored in the same IDL file.

receptacle_multiple: OK 
--------------------
A component with a multiple receptacle. The interface of the
receptacle is stored in the same IDL file.

receptacle_basic_types: OK 
-----------------------
A component that uses an interface as receptacle that contains methods with
different basic types as in/inout/out parameters as well as as return value.
All source code is stored in the same IDL file.

receptacle_exception: OK
---------------------
A component that uses an interface as receptacle which has a method declaration
including a raises statement.
All source code is stored in the same IDL file.

receptacle_user_types: !!!!!
----------------------
A component that uses an interface which has different methods
that use some user types (typedef, enum, struct, sequence, etc.).
All source code is stored in the same IDL file.
=> error in name verification: the identifier Value is undefined or of the wrong type
=> error while adding contents '[MAliasDef: time_tMPrimitiveDef: PK_LONG, MEnumDef: Color { red green blue black orange };, null]' to container 'MContainer: null[MAliasDef: time_tMPrimitiveDef: PK_LONG, MEnumDef: Color { red green blue black orange };]'


home_factory: OK
-------------
A component with an attribute that has a home with an explicit factory
method.

home_basic_type: OK
----------------
A component that supports a home that contains factory methods with
different basic types as in parameters.
All source code is stored in the same IDL file.

home_exception: !!!!!!!!
---------------
A component with an attribute that has a home with an explicit factory
method that contains a raises statement.
=>java.lang.ClassCastException: ccmtools.Metamodel.BaseIDL.MExceptionDefImpl
  Error while generating IDL3 mirror files.

home_user_type: TODO
---------------


Test of source code structure
=============================

include: TODO
--------
A component with an attribute, a facet and a receptacle.
The interfaces of the facet and receptacles are stored in
separated idl files and included by the component idl file.

include_dir: TODO
------------
A component with an attribute, a facet and a receptacle, 
where the component idl and the interface idl of facet and receptacle
are stored in different files in different directories.
 
include_nested: TODO
---------------
A component with an attribute, a facet and a receptacle, 
where the interfaces are stored in different idl files.
One interface file includes another idl file that contains
a structure definition.
 

Test of source code modularity
==============================

module: TODO
-------
A component with an attribute that is defined within a
module definition in a single idl file.

module_nested: TODO
--------------
A component with an attribute that is defined within 
three nested modules in a single IDL file.

module_reopen: TODO
--------------
A compoent with an attribute and a facet defined in two
IDL files, where in each file there is the same module
definition.

module_mixed: TODO
-------------
A component with an attribute and a facet defined in two
IDL files. The component and the facet interface is defined in 
their own modules.


Real world examples
===================

Claculator: TODO
-----------
The main component (Calculator) has an attribute, a facet, a
singleand a multiple receptacle as well as a home with a
factory method.
Two other components (IntegerCalculator and Display) supports
a facet that can be connected to the Calculator's receptacles.

owudb: TODO
------
Two components that are connected via two facet/receptacle
interfaces. The source code is distributed between 10 IDL files.

