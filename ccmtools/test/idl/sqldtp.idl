/*****************************************************************************
+* $Header$$Locker$
+*
+* PROJECT:   projectname
+* PACKAGE:   package name
+* FILE:      sqldtp.c
+* CONTENTS:  overview description, list of functions, ...
+* COPYRIGHT NOTICE:
+*         (c) Copyright 2002 by
+*             Salomon Automationstechnik Ges.m.b.H
+* REVISION HISTORY:
+*    04-08-2003  CREATED BY haubi
+*
+*   $Log$
+****************************************************************************/

module CosTransactions {
// DATATYPES
enum Status {
	StatusActive,
	StatusMarkedRollback,
	StatusPrepared,
	StatusCommitted,
	StatusRolledBack,
	StatusUnknown,
	StatusNoTransaction,
	StatusPreparing,
	StatusCommitting,
	StatusRollingBack
};

enum Vote {
	VoteCommit,
	VoteRollback,
	VoteReadOnly
};

interface TransactionFactory;
interface Control;
interface Terminator;
interface Coordinator;
interface RecoveryCoordinator;
interface Resource;
interface Synchronization;

struct PropagationContext {
	unsigned long timeout;
	Control control;
	sequence <Control> parents;
};

// Heuristic exceptions
exception HeuristicRollback {};
exception HeuristicCommit {};
exception HeuristicMixed {};
exception HeuristicHazard {};

// Other transaction-specific exceptions
exception Inactive {};
exception NotPrepared {};
exception NoTransaction {};
exception InvalidControl {};
exception Unavailable {};
exception SynchronizationUnavailable {};

interface TransactionFactory {
	Control	create(in unsigned long TimeOut);
	Control recreate(in PropagationContext Ctx);
};

interface Control {
	readonly Terminator terminator
		getraises (Unavailable);
	readonly Coordinator coordinator
		getraises (Unavailable);
};

interface Terminator {
	void commit(in boolean report_heuristics)
		raises(
			HeuristicMixed,
			HeuristicHazard
		);
	void rollback();
};

interface Coordinator {
	Status getStatus();
	Status getParentStatus();
	Status getTopLevelStatus();
	boolean isSameTransaction(in Coordinator tc);
	boolean isRelatedTransaction(in Coordinator tc);
	boolean isAncestorTransaction(in Coordinator tc);
	boolean isDescendantTransaction(in Coordinator tc);
	boolean isTopLevelTransaction(in Coordinator tc);

	RecoveryCoordinator registerResource(in Resource r)
		raises(Inactive);
	
	void registerSynchronization(in Synchronization sync)
		raises(Inactive, SynchronizationUnavailable);

	void rollbackOnly()
		raises(Inactive);
	
	string getTransactionName();

	PropagationContext getPropagationContext()
		raises(Unavailable);
};

interface RecoveryCoordinator {
	Status replayCompletion(in Resource r)
		raises(NotPrepared);
};

interface Resource {
	Vote prepare()
		raises(HeuristicMixed, HeuristicHazard);
	void rollback()
		raises (HeuristicCommit, HeuristicMixed, HeuristicHazard);
	void commit()
		raises(NotPrepared, HeuristicRollback, HeuristicMixed, HeuristicHazard);
	void commitOnePhase()
		raises(HeuristicHazard);
	void forget();
};

interface Synchronization {
	void beforeCompletion();
	void afterCompletion(in Status s);
};

component TransactionMonitor {
	provides TransactionFactory factory;
	provides Control control;
	provides Terminator terminator;
	provides Coordinator coordinator;
};

home TransactionHome manages Transactions {
	factory create();
};

