/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by CCM Tools version 0.5.3-pre3.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated. 
 * All component ports will be connected to the mirror component's ports. 
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 *
 * To enable debug output use -DWXDEBUG compiler flag and set the
 * WX_DEBUG_LEVELS environment variable to "CCM_LOCAL"
 * (e.g. export WX_DEBUG_LEVELS="CCM_LOCAL").
 *
 * To enable DbC adapter use -DCCM_USE_DBC compiler flag.
 ***/

#include <cassert>
#include <iostream>

#include <wx/utils/debug.h>
#include <wx/utils/smartptr.h>

#include <Components/ccm/local/CCM.h>
#include <ccm/local/HomeFinder.h>

#include <world/ccm/local/Server_gen.h>
#include <world/ccm/local/ServerHome_gen.h>

using namespace std;
using namespace wx::utils;
using namespace world::ccm::local;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;

    int error = 0;
    Components::ccm::local::HomeFinder* homeFinder = ccm::local::HomeFinder::Instance();
    error = deploy_world_ccm_local_ServerHome("ServerHome");
    if(error) 
    {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }


    try 
    {
        SmartPtr<ServerHome> home(dynamic_cast<ServerHome*>(homeFinder->find_home_by_name("ServerHome").ptr()));

	    SmartPtr<Server> component;
    		SmartPtr<Hello> hello;
	    
        component = home->create();
        hello = component->provide_hello();
        component->configuration_complete();

	    string s = hello->sayHello();
    		cout << "sayHello(): " << s << endl;
        assert(s == "Hello from Server component!");

        component->remove();
    } 
    catch(Components::ccm::local::HomeNotFound ) 
    {
        cout << "DEPLOYMENT ERROR: can't find a home!" << endl;
        error = -1;
    } 
    catch(Components::ccm::local::NotImplemented& e ) 
    {
        cout << "DEPLOYMENT ERROR: function not implemented: " 
	     << e.what (  ) << endl;
        error = -1;
    }  
    catch(Components::ccm::local::InvalidName& e ) 
    {
        cout << "DEPLOYMENT ERROR: invalid name during connection: " 
             << e.what (  ) << endl;
        error = -1;
    }
    catch ( ... )  
    {
        cout << "DEPLOYMENT ERROR: there is something wrong!" << endl;
        error = -1;
    }


    error += undeploy_world_ccm_local_ServerHome("ServerHome");
    if(error) 
    {
        cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
        return error;
    }
        
    ccm::local::HomeFinder::destroy();
    
    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}
