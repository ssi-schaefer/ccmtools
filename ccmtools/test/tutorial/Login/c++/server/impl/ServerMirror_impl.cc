
/***
 * This file was automatically generated by CCM Tools version 0.7.1
 * <http://ccmtools.sourceforge.net/>
 *
 * ServerMirror component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>
#include <wx/utils/debug.h>

#include "ServerMirror_impl.h"

namespace application {
namespace ccm {
namespace local {

using namespace std;
using namespace wx::utils;

//==============================================================================
// CCM_ServerMirror - component implementation
//==============================================================================

ServerMirror_impl::ServerMirror_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

ServerMirror_impl::~ServerMirror_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
ServerMirror_impl::set_session_context(Components::ccm::local::SessionContext* context)
    throw(Components::ccm::local::CCMException)
{
    ctx = dynamic_cast<CCM_ServerMirror_Context*>(context);
}

void
ServerMirror_impl::ccm_activate()
    throw(Components::ccm::local::CCMException)
{
      try
      {
          SmartPtr<Login> login =  ctx->get_connection_login();

	  try 
	  {
	    PersonData person;
	    person.id = 277;
	    person.name = "eteinik";
	    person.password = "eteinik";
	    person.group = USER;

	    bool result = login->isValidUser(person);
	    if(result) 
	    {
	      cout << "Welcome " << person.name << endl;
	    }
	    else 
	    {
	      cout << "We don't know you !!!" << endl;
	    }
	  }
	  catch(InvalidPersonData& e) 
	  {
	    cout << "Error: InvalidPersonData!!" << endl;
	  }

	  try 
	  {
	       PersonData person;
	       person.id = 0;
	       person.name = "";
	       person.password = "";
	       person.group = USER;
	       
	       login->isValidUser(person);
	       assert(false);
	  }
	  catch(InvalidPersonData& e) 
	  {
	    cout << "OK, caught InvalidPersonData exception!" << endl;
	  }
      }
      catch(Components::ccm::local::Exception& e)
      {
	cerr << "ERROR: " << e.what() << endl;
      }
}

void
ServerMirror_impl::ccm_passivate()
    throw(Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
ServerMirror_impl::ccm_remove()
    throw(Components::ccm::local::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

} // /namespace local
} // /namespace ccm
} // /namespace application

