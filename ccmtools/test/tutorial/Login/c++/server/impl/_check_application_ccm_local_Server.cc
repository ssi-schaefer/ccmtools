/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by CCM Tools version 0.7.0.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated. 
 * All component ports will be connected to the mirror component's ports. 
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 *
 * To enable debug output use -DWXDEBUG compiler flag and set the
 * WX_DEBUG_LEVELS environment variable to "CCM_LOCAL"
 * (e.g. export WX_DEBUG_LEVELS="CCM_LOCAL").
 *
 * To enable DbC adapter use -DCCM_USE_DBC compiler flag.
 ***/

#include <cassert>
#include <iostream>

#include <wx/utils/debug.h>
#include <wx/utils/smartptr.h>

#include <Components/ccm/local/CCM.h>
#include <ccm/local/HomeFinder.h>

#include <application/ccm/local/Server_gen.h>
#include <application/ccm/local/ServerHome_gen.h>

using namespace std;
using namespace wx::utils;
using namespace ccm::local;

using namespace application::ccm::local;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;

    SmartPtr<Server> server;
    SmartPtr<Login> login;

    // Component bootstrap:
    // We get an instance of the local HomeFinder and register the deployed
    // component- and mirror component home.
    // Here we can also decide to use a Design by Contract component.  	
    int error = 0;
    Components::ccm::local::HomeFinder* homeFinder = HomeFinder::Instance();
    error = deploy_application_ccm_local_ServerHome("ServerHome");
             
    if(error) {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }


    try {
      SmartPtr<ServerHome> serverHome(dynamic_cast<ServerHome*>
            (homeFinder->find_home_by_name("ServerHome").ptr()));

      server = serverHome->create();
      login = server->provide_login();
      server->configuration_complete();

      try {
	PersonData person;
	person.id = 0;
	person.name = "";
	person.password = "";
	person.group = USER;
	
	login->isValidUser(person);
	assert(false);
      }
      catch(InvalidPersonData& e) {
	cout << "Caught InvalidPersonData exception!" << endl;
      }

      try {
	PersonData person;
	person.id = 277;
	person.name = "eteinik";
	person.password = "eteinik";
	person.group = USER;
	
	bool result = login->isValidUser(person);
	if(result) {
	  cout << "Welcome " << person.name << endl;
	}
	else {
	  cout << "We don't know you !!!" << endl;
	}
      }
      catch(InvalidPersonData& e) {
	cout << "Error: InvalidPersonData!!" << endl;
      }
      
      
      server->remove();
    } 
    catch(Components::ccm::local::HomeNotFound ) {
      cout << "TEARDOWN ERROR: can't find a home!" << endl;
      error = -1;
    } 
    catch(Components::ccm::local::NotImplemented& e ) {
      cout << "TEARDOWN ERROR: function not implemented: " 
	   << e.what (  ) << endl;
      error = -1;
    } 
    catch(Components::ccm::local::InvalidName& e ) {
      cout << "DEPLOYMENT ERROR: invalid name during connection: " 
	   << e.what (  ) << endl;
      error = -1;
    }
    catch(...) {
      cout << "TEARDOWN ERROR: there is something wrong!" << endl;
      error = -1;
    }
    error += undeploy_application_ccm_local_ServerHome("ServerHome");
    if(error) {
      cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
      return error;
    }
    
    // Clean up HomeFinder singleton
    HomeFinder::destroy();
    
    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}
