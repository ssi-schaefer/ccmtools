
/**
 * This file was automatically generated by CCM Tools version 0.5.3-pre3
 * <http://ccmtools.sourceforge.net/>
 *
 * BigBusiness::ccm::local::CCM_CustomerBusiness facet class implementation. 
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 **/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "CarRental_business_impl.h"

using namespace std;
using namespace WX::Utils;

namespace BigBusiness {
namespace ccm {
namespace local {
namespace component {
namespace CarRental {

business_impl::business_impl(
    BigBusiness::ccm::local::component::CarRental::CCM_CarRental_impl* component_impl)
  : component(component_impl)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

business_impl::~business_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

const double
business_impl::dollars_per_mile() const
    throw(::ccm::local::Components::CCMException)
{
    return dollars_per_mile_;
}

void
business_impl::dollars_per_mile(const double value)
    throw(::ccm::local::Components::CCMException)
{
    dollars_per_mile_ = value;
}

void
business_impl::addCustomerMiles(
        const long id,
        const double miles)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::NoCustomerException )
{
    std::vector<BigBusiness::ccm::local::Customer>::iterator pos;
    for(pos = component->CustomerDB.begin(); 
        pos != component->CustomerDB.end(); ++pos) {
      if(pos->id == id) {
        pos->mileage += miles;
        return;
      }
    }
    throw NoCustomerException();  
}

void
business_impl::resetCustomerMiles(const long id)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::NoCustomerException )
{
    std::vector<BigBusiness::ccm::local::Customer>::iterator pos;
    for(pos = component->CustomerDB.begin(); 
        pos != component->CustomerDB.end(); ++pos) {
      if(pos->id == id) {
        pos->mileage = 0.0;
        return;
      }
    }
    throw NoCustomerException();
}

double
business_impl::getCustomerMiles(const long id)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::NoCustomerException )
{
    std::vector<BigBusiness::ccm::local::Customer>::iterator pos;
    for(pos = component->CustomerDB.begin(); 
        pos != component->CustomerDB.end(); ++pos) {
      if(pos->id == id) {
        return pos->mileage;
      }
    }
    throw NoCustomerException(); 
}

double
business_impl::getCustomerDollars(const long id)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::NoCustomerException )
{
    return getCustomerMiles(id) * dollars_per_mile_;
}

} // /namespace CarRental
} // /namespace component
} // /namespace local
} // /namespace ccm
} // /namespace BigBusiness
