
/***
 * This file was automatically generated by CCM Tools version 0.5.3-pre3
 * <http://ccmtools.sourceforge.net/>
 *
 * CarRental_mirror component business logic implementation.
 * 
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 ***/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "CarRental_mirror_impl.h"

namespace BigBusiness {
namespace ccm {
namespace local {
namespace component {
namespace CarRental_mirror {

using namespace std;
using namespace WX::Utils;

//==============================================================================
// CCM_CarRental_mirror - component implementation
//==============================================================================

CCM_CarRental_mirror_impl::CCM_CarRental_mirror_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

CCM_CarRental_mirror_impl::~CCM_CarRental_mirror_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_CarRental_mirror_impl::set_session_context(
    ::ccm::local::Components::SessionContext* context)
    throw(::ccm::local::Components::CCMException)
{
    ctx = dynamic_cast<CCM_CarRental_mirror_Context*>(context);
}

void
CCM_CarRental_mirror_impl::ccm_activate()
    throw(::ccm::local::Components::CCMException)
{
    try {

      {
        BigBusiness::ccm::local::Customer person;
        person.id = 1;
        person.first_name = "Franz";
        person.last_name = "Kafka";
        person.mileage = 0.0;
        ctx->get_connection_maintenance_mirror()->createCustomer(person);
        cout << "createCustomer() passed" << endl;
      }
      
      {
        BigBusiness::ccm::local::Customer person;
        person.id = 2;
        person.first_name = "Thomas";
        person.last_name = "Bernhard";
        person.mileage = 0.0;
        ctx->get_connection_maintenance_mirror()->createCustomer(person);
        cout << "createCustomer() passed" << endl;
      }
      
      {
        BigBusiness::ccm::local::Customer person;
        person.id = 3;
        person.first_name = "Karl";
        person.last_name = "Kraus";
        person.mileage = 0.0;
        ctx->get_connection_maintenance_mirror()->createCustomer(person);
        cout << "createCustomer() passed" << endl;
      }
      
      {
        BigBusiness::ccm::local::Customer person;
        long id = 2;
        person = ctx->get_connection_maintenance_mirror()->retrieveCustomer(id);
        assert(person.id == 2);
        assert(person.first_name == "Thomas");
        assert(person.last_name == "Bernhard");
        cout << "retrieveCustomer() passed" << endl;
      }

      {
        BigBusiness::ccm::local::CustomerList person_list;
        person_list = ctx->get_connection_maintenance_mirror()->retrieveAllCustomers();
        assert(person_list.at(2).id == 3);
        assert(person_list.at(2).first_name == "Karl");
        assert(person_list.at(2).last_name == "Kraus");
        
        assert(person_list.at(1).id == 2);
        assert(person_list.at(1).first_name == "Thomas");
        assert(person_list.at(1).last_name == "Bernhard");
        
        assert(person_list.at(0).id == 1);
        assert(person_list.at(0).first_name == "Franz");
        assert(person_list.at(0).last_name == "Kafka");
        cout << "retriveAllCustomers() passed" << endl;
      }      
      
      {
        BigBusiness::ccm::local::Customer person;
        person.id = 1;
        person.first_name = "Werner";
        person.last_name = "Schwab";
        person.mileage = 0.0;
        ctx->get_connection_maintenance_mirror()->updateCustomer(person);      
        
        BigBusiness::ccm::local::Customer another_person;
        another_person = ctx->get_connection_maintenance_mirror()->retrieveCustomer(person.id);
        assert(another_person.id == 1);
        assert(another_person.first_name == "Werner");
        assert(another_person.last_name == "Schwab");
        cout << "updateCustomer() passed" << endl;
      }
      
      {
        long id = 1;
        ctx->get_connection_maintenance_mirror()->deleteCustomer(id);
        BigBusiness::ccm::local::Customer person;
        person = ctx->get_connection_maintenance_mirror()->retrieveCustomer(id);
        assert(false); // Customer found => failer
      }
    }
    catch(BigBusiness::ccm::local::CreateCustomerException) {
      cerr << "MAINTENANCE ERROR: Can't create customer!" << endl;
    }
    catch(BigBusiness::ccm::local::NoCustomerException) {
      cerr << "MAINTENANCE ERROR: no customer found!" << endl;
      cout << "deleteCustomer() passed" << endl;
    }
    catch(::ccm::local::Components::Exception& e) {
      cerr << "CCM Exception:" << e.what() << endl;
    }


    try {
      {
        long id = 2;
        double miles = 7.7;
        ctx->get_connection_business_mirror()->addCustomerMiles(id, miles); 
        double other_miles;
        other_miles = ctx->get_connection_business_mirror()->getCustomerMiles(id); 
        assert( abs(other_miles - miles) < 0.001);
        cout << "addCustomerMiles() passed" << endl;
      }
      
      {
        long id = 2;
        double dollars;
        double miles = 1.1;
        double other_miles;
        double factor = 5.3;
        ctx->get_connection_business_mirror()->addCustomerMiles(id, miles); 
        ctx->get_connection_business_mirror()->dollars_per_mile(factor);
        other_miles = ctx->get_connection_business_mirror()->getCustomerMiles(id);
        dollars = ctx->get_connection_business_mirror()->getCustomerDollars(id); 
        assert( abs(dollars - other_miles*factor) < 0.001);
        cout << "getCustomerDollars() passed" << endl;
      }
      
      {
        long id = 2;
        double dollars;
        ctx->get_connection_business_mirror()->resetCustomerMiles(id);
        dollars = ctx->get_connection_business_mirror()->getCustomerDollars(id); 
        assert( abs(dollars) < 0.001);
        cout << "resetCustomerMiles() passed" << endl;
      }
    }
    catch(BigBusiness::ccm::local::NoCustomerException) {
      cerr << "MAINTENANCE ERROR: no customer found!" << endl;
      assert(false);
    }
}

void
CCM_CarRental_mirror_impl::ccm_passivate()
    throw(::ccm::local::Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
CCM_CarRental_mirror_impl::ccm_remove()
    throw(::ccm::local::Components::CCMException)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

} // /namespace CarRental_mirror
} // /namespace component
} // /namespace local
} // /namespace ccm
} // /namespace BigBusiness

