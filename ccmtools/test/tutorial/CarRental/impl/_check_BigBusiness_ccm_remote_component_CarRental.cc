/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by CCM Tools version 0.5.3-pre3.
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the remote component test concept. 
 *
 * To enable debug output use -DWXDEBUG compiler flag and set the
 * WX_DEBUG_LEVELS environment variable to "CCM_REMOTE".
 * (e.g. export WX_DEBUG_LEVELS="CCM_REMOTE")
 ***/

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif 

#ifdef HAVE_MICO 

#include <cstdlib> 
#include <iostream>
#include <string>
#include <WX/Utils/debug.h>
#include <CCM/CCMContainer.h>

#include <CORBA.h>
#include <coss/CosNaming.h>

#include <BigBusiness/ccm/remote/component/CarRental/CarRentalHome_remote.h>
#include <BigBusiness_CarRental.h>

using namespace std;
using namespace WX::Utils;

//==============================================================================
// Implementation of remote client test
//==============================================================================

int main (int argc, char *argv[])
{
    cout << "Enter C++ remote test client" << endl;

    char* NameServiceLocation = getenv("CCM_NAME_SERVICE");
    if(NameServiceLocation == NULL) { 
        cerr << "Error: Environment variable CCM_NAME_SERVICE not set!" << endl;
        return -1;
    }

    // Initialize ORB 
    ostringstream os;
    os << "NameService=" << NameServiceLocation;
    char* argv_[] = { "", "-ORBInitRef", (char*)os.str().c_str()}; 
    int   argc_   = 3;
    DEBUGNL(">> " << argv_[0] << " "<< argv_[1] << argv_[2]);
    CORBA::ORB_var orb = CORBA::ORB_init(argc_, argv_);


    /**
     * Server-side code
     */ 

    // Register all value type factories with the ORB  
    CCM::register_all_factories (orb);

    // Deploy local and remote component homes	
    int error = 0;
    error += deploy_BigBusiness_ccm_local_component_CarRental_CarRentalHome("CarRentalHome");
    error += deploy_BigBusiness_ccm_remote_component_CarRental_CarRentalHome(orb, "CarRentalHome:1.0");
    if(!error) {
        cout << "CarRentalHome server is running..." << endl;
    }
    else {
        cerr << "ERROR: Can't deploy components!" << endl;
        return -1;
    }

    // For testing we use CORBA collocation	
    // orb->run();
	

    /**
     * Client-side code
     */
    CORBA::Object_var obj = orb->resolve_initial_references("NameService");
    CosNaming::NamingContextExt_var nc =
        CosNaming::NamingContextExt::_narrow(obj);

    // Deployment 

    // Find ComponentHomes in the Naming-Service
    obj = nc->resolve_str("CarRentalHome:1.0");
    assert (!CORBA::is_nil (obj));
    BigBusiness::CarRentalHome_var myCarRentalHome = 
      BigBusiness::CarRentalHome::_narrow (obj);

    // Create component instances
    BigBusiness::CarRental_var myCarRental = myCarRentalHome->create();

    // Provide facets   
    ::BigBusiness::CustomerMaintenance_var maintenance = 
	myCarRental->provide_maintenance();

    ::BigBusiness::CustomerBusiness_var business = 
	myCarRental->provide_business();

    myCarRental->configuration_complete();

    cout << "==== Begin Test Case ===================================" << endl;

    business->dollars_per_mile(5.5);
    
    ::BigBusiness::Customer p;
    p.id = 1;
    p.first_name = "Franz";
    p.last_name = "Kafka";
    maintenance->createCustomer(p);

    business->addCustomerMiles(1, 120.0);
    ::BigBusiness::Customer_var person = maintenance->retrieveCustomer(1);
    double dollars = business->getCustomerDollars(1); 

    cout << " Customer: " << person->first_name 
	 << " " << person->last_name << endl;
    cout << " Miles: " <<  person->mileage << endl;
    cout << " to pay: " << dollars << " Dollars" << endl;

    cout << "==== End Test Case =====================================" << endl; 

    // Destroy component instances
    myCarRental->remove();

    // Un-Deployment
    cout << "Exit C++ remote test client" << endl; 	
}

#endif // HAVE_MICO

