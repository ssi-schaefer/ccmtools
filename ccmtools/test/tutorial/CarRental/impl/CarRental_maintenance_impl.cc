
/**
 * This file was automatically generated by CCM Tools version 0.5.3-pre3
 * <http://ccmtools.sourceforge.net/>
 *
 * BigBusiness::ccm::local::CCM_CustomerMaintenance facet class implementation. 
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE! 
 *
 * @author
 * @version 
 **/

#include <cassert>
#include <iostream>
#include <WX/Utils/debug.h>

#include "CarRental_maintenance_impl.h"

using namespace std;
using namespace WX::Utils;

namespace BigBusiness {
namespace ccm {
namespace local {
namespace component {
namespace CarRental {

maintenance_impl::maintenance_impl(
    BigBusiness::ccm::local::component::CarRental::CCM_CarRental_impl* component_impl)
  : component(component_impl)
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

maintenance_impl::~maintenance_impl()
{
    // OPTIONAL : IMPLEMENT ME HERE !
}

void
maintenance_impl::createCustomer(const BigBusiness::ccm::local::Customer& person)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::CreateCustomerException )
{
    component->CustomerDB.push_back(person);
}

BigBusiness::ccm::local::Customer
maintenance_impl::retrieveCustomer(const long id)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::NoCustomerException )
{
    std::vector<BigBusiness::ccm::local::Customer>::iterator pos;
    for(pos = component->CustomerDB.begin(); 
	pos != component->CustomerDB.end(); 
	++pos) {
      if(pos->id == id) {
        return *pos;
      }
    }
    throw NoCustomerException();
}

BigBusiness::ccm::local::CustomerList
maintenance_impl::retrieveAllCustomers()
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::NoCustomerException )
{
    if(component->CustomerDB.size() == 0)
      throw NoCustomerException();
    
    BigBusiness::ccm::local::CustomerList customer_list;
    std::vector<BigBusiness::ccm::local::Customer>::iterator pos;
    for(pos = component->CustomerDB.begin(); 
	pos != component->CustomerDB.end(); 
	++pos) {
      customer_list.push_back(*pos);
    }
    return customer_list;
}

void
maintenance_impl::updateCustomer(const BigBusiness::ccm::local::Customer& person)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::NoCustomerException )
{
    std::vector<BigBusiness::ccm::local::Customer>::iterator pos;
    for(pos = component->CustomerDB.begin(); 
	pos != component->CustomerDB.end(); 
	++pos) {
      if(pos->id == person.id) {
        *pos = person;
        return;
      }
    }
    throw NoCustomerException();  
}

void
maintenance_impl::deleteCustomer(const long id)
throw(::ccm::local::Components::CCMException,
        BigBusiness::ccm::local::RemoveCustomerException )
{
    std::vector<BigBusiness::ccm::local::Customer>::iterator pos;
    for(pos = component->CustomerDB.begin(); 
	pos != component->CustomerDB.end(); 
	++pos) {
      if(pos->id == id) {
        component->CustomerDB.erase(pos);
        return;
      }
    }
    throw RemoveCustomerException();  
}

} // /namespace CarRental
} // /namespace component
} // /namespace local
} // /namespace ccm
} // /namespace BigBusiness
