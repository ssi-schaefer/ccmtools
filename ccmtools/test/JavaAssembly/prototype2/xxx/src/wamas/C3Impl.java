/**
 * This file was automatically generated by CCM Tools version 0.9.0
 * <http://ccmtools.sourceforge.net>
 * 
 * CCM_C3 component business logic.
 *
 */

package wamas;
   
import Components.CCMException;     
import Components.CCMExceptionReason;
import Components.SessionContext; 

  
   
/**
 * This class implements component equivalent and supported interfaces
 * as well as component attributes.
 */   
public class C3Impl 
    implements CCM_C3
{
    /** Supported interface attribute variables */
    
    

    /** Component attribute variables */
    
    private int b_; 
    
    private wamas.Test.C2 comp2_;
    private wamas.Test.C1 comp1_; 

    public CCM_C3_Context ctx;
    
    
    public C3Impl()
    	throws CCMException //!!!!!
    {
    	//!!!!!!!!
    	try 
    	{
			// create inner components    	
            comp2_ = ((wamas.Test.H2)wamas.Test.H2Deployment.create()).create();
            comp1_ = ((wamas.Test.H1)wamas.Test.H1Deployment.create()).create(); 

            // set component attributes
            comp1_.a1("Hello World");
            comp1_.a2(642);
            comp2_.b(this.b_); 
    	} 
    	catch(Exception e) 
    	{
    		e.printStackTrace();
    		throw new CCMException(e.getMessage(), CCMExceptionReason.CREATE_ERROR);
    	}
        //!!!!!!!    
    }


    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */
    
    
    
    /** Supported interface methods */
        


    /** Component attribute accessor methods */


    public int b()
        throws CCMException
    {
        return this.b_;
    }     

    public void b(int value)
        throws CCMException
    {
        this.b_ = value;
    }
    


    /** Facet implementation factory methods */
    

	private wamas.C3i1Impl i1_;

    public wamas.Test.CCM_I1 get_i1()
    {
    	//!!!!!!!!
    	// Here we don't need to provide a singleton behavior (it's done by the corresponding adapter)
    	i1_ = new wamas.C3i1Impl(this);
    	// Set facet implementation delegation target
    	i1_.target = comp1_.provide_i1();
    	//!!!!!!!!
    	return i1_;
    }
    

    /** Component callback methods */
    
    public void set_session_context(SessionContext ctx) 
        throws CCMException
    {
        this.ctx = (CCM_C3_Context)ctx; 

        try 
        {
    		// Connect components
    		// Note that connections must be performed here, because we need access to
    		// the ctx object.
    		comp1_.connect_i2(comp2_.provide_i2());
            comp2_.connect_i3(this.ctx.get_connection_i3());

            // finish configuration    	
			comp2_.configuration_complete();
			comp1_.configuration_complete(); 
    	} 
        catch(Exception e) 
        {
    		throw new CCMException(e.getMessage(), CCMExceptionReason.CREATE_ERROR);
    	}

    }

    public void ccm_activate() 
        throws CCMException
    {
    }

    public void ccm_passivate() 
        throws CCMException
    {
        // Who calls this method?
    	// A pretty cool session container would...!!!
    }

    public void ccm_remove() 
        throws CCMException
    {
    	try {
			comp2_.remove();
			comp1_.remove();
		} catch(Exception e) {
    		throw new CCMException(e.getMessage(), CCMExceptionReason.REMOVE_ERROR);
		} 
    }
}
