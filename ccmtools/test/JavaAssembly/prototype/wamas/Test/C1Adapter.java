/*
 * This file was automatically generated by CCM Tools version 0.9.0
 * <http://ccmtools.sourceforge.net>
 * DO NOT EDIT!
 */

package wamas.Test;

import java.util.logging.Logger;

import Components.AlreadyConnected;
import Components.Assembly;
import Components.CCMException;     
import Components.CCMHome;
import Components.Cookie;
import Components.CookieImpl;
import Components.CookieRequired;
import Components.ExceededConnectionLimit;
import Components.InvalidConfiguration;
import Components.InvalidConnection;
import Components.InvalidName;
import Components.NoConnection;
import Components.RemoveFailure;
import ccmtools.local.ServiceLocator;

  
                 
public class C1Adapter 
    implements C1
{
    private Logger logger = ServiceLocator.instance().getLogger();
    
    private CCM_C1 localInterface;
    private CCM_C1_Context ctx;
    private Assembly assembly;

    /** Facet adapter references */
    private wamas.Test.I1 i1FacetAdapter;  
	
    /** Receptacle references */
    private wamas.Test.I2 i2Receptacle = null;  
		
		
    protected C1Adapter()
    {
        this(null, null);
    }
	
    public C1Adapter(CCM_C1 localInterface)
    {
        this(localInterface, null);
    }
	
    public C1Adapter(CCM_C1 localInterface, Assembly assembly)
    {
        logger.fine("localInterface = " + localInterface + ", " + assembly);
        this.localInterface = localInterface;
        this.assembly = assembly;
    }
	
	
    /* 
     * Supported interface methods 
     */

    /** Supported interface attributes */    
    
    
    /** Supported interface methods */    

	
    /* 
     * Equivalent interface methods 
     */
	
    /** Attribute equivalent methods */

    public String a1()
        throws CCMException
    {
        String result = localInterface.a1();
        logger.fine("result = " + result);
        return result;
    }
     
    public void a1(String value)
        throws CCMException
    {
        logger.fine("value = " + value);
        localInterface.a1(value);
    } 


    public int a2()
        throws CCMException
    {
        int result = localInterface.a2();
        logger.fine("result = " + result);
        return result;
    }
     
    public void a2(int value)
        throws CCMException
    {
        logger.fine("value = " + value);
        localInterface.a2(value);
    } 
    

    /** Facet equivalent methods */    

    public wamas.Test.I1 provide_i1()
    {
        logger.fine("");
        if(i1FacetAdapter == null)
        {
            i1FacetAdapter = 
                new wamas.Test.I1Adapter(localInterface.get_i1());
        }
        return i1FacetAdapter;
    }
    
    
    /** Receptacle equivalent methods */

    public void connect_i2(wamas.Test.I2 localObj)
        throws AlreadyConnected, 
               InvalidConnection
    {
        logger.fine("obj = " + localObj);
        if(i2Receptacle != null)
        {
            throw new AlreadyConnected();
        }	
        else
        {
            i2Receptacle = localObj;
        }
    }

    public wamas.Test.I2 disconnect_i2()
        throws NoConnection
    {
        logger.fine("");
        if(i2Receptacle == null)
        {
            throw new NoConnection();
        }
        else
        {
            wamas.Test.I2 f = i2Receptacle;
            i2Receptacle = null;
            return f;
        }
    }
        
    public wamas.Test.I2 get_connection_i2()
    {
        logger.fine("");
        return i2Receptacle;
    }

	
    /** CCMObject interface methods */
	
    public void configuration_complete()
        throws InvalidConfiguration
    {
        logger.fine("");
        ctx = new CCM_C1_ContextImpl(this); 
        try
        {
            if(assembly != null) 
            { 
                assembly.configuration_complete(); 
            }
            localInterface.set_session_context(ctx);
            localInterface.ccm_activate();
        }
        catch(CCMException e)
        {
            throw new InvalidConfiguration();
        }
    }

    public void remove()
        throws RemoveFailure
    { 
        logger.fine("");
        try 
        {
            localInterface.ccm_remove();
            if(assembly != null) 
            { 
                assembly.tear_down(); 
                assembly = null;
            }
        }
        catch(CCMException e)
        {
            throw new RemoveFailure();
        }
    }
    
    public CCMHome get_ccm_home()
    {
        throw new RuntimeException("Not implemented!");
    }
    
    
    /** Navigation interface methods */
    
    public Object provide_facet(String name)
        throws InvalidName
    {
        logger.fine("name = " + name);
        if(name == null)
        {
            throw new InvalidName();
        }
        else if(name.equals("i1"))
        {
            return provide_i1();
        }
   
        throw new InvalidName();
    }
    
    
    /** Receptacle methods */
    
    public Cookie connect(String name, Object obj)
        throws InvalidName, InvalidConnection, 
        AlreadyConnected, ExceededConnectionLimit
    {
        logger.fine("name = " + name + ", obj = " + obj);
        if(name == null)
        {
            throw new InvalidName();
        }
        if(obj == null)
        {
            throw new InvalidConnection();
        }         
        else if(name.equals("i2"))
        {
            connect_i2((wamas.Test.I2) obj);
            return new CookieImpl();
        }
     
        else
        {
            throw new InvalidName();
        }
    }
    
    public void disconnect(String name, Cookie ck)
        throws InvalidName, InvalidConnection, 
        CookieRequired, NoConnection
    {
        logger.fine("name = " + name + ", ck = " + ck );
        if(name == null)
        {
            throw new InvalidName();
        }
        if(ck == null)
        {
            throw new CookieRequired();
        }      
        else if(name.equals("i2"))
        {
            disconnect_i2();
        }
     
        else
        {
            throw new InvalidName();
        }
    }    
}
