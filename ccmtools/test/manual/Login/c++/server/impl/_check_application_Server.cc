/***
 * CCM Tools Test Client 
 *
 * This file was automatically generated by CCM Tools 
 *         <http://ccmtools.sourceforge.net/>
 *
 * This test client is part of the mirror component test concept. For each
 * component a corresponding mirror component will be instantiated. 
 * All component ports will be connected to the mirror component's ports. 
 * Additionally, developers can add some testing code to validate supported
 * interfaces as well as component attribute access.
 ***/

#include <cassert>
#include <iostream>

#include <Components/ccmtools.h>

#include <application_ServerHome_entry.h>
#include <application/ServerHome_gen.h>

using namespace std;
using namespace application;

int main(int argc, char *argv[])
{
    cout << ">>>> Start Test Client: " << __FILE__ << endl;


    // Component bootstrap:
    // We get an instance of the local HomeFinder and register the deployed
    // component- and mirror component home.
    // Here we can also decide to use a Design by Contract component.  	
    int error = deploy_application_ServerHome("ServerHome");             
    if(error) 
    {
        cerr << "BOOTSTRAP ERROR: Can't deploy component homes!" << endl;
        return(error);
    }


    try 
    {
    	  Components::HomeFinder* homeFinder = Components::HomeFinder::Instance();
      
      ServerHome::SmartPtr serverHome(dynamic_cast<ServerHome*>(
            homeFinder->find_home_by_name("ServerHome").ptr()));

      Server::SmartPtr server;
      Login::SmartPtr login;

      server = serverHome->create();
      login = server->provide_login();
      server->configuration_complete();

      try 
      {
		PersonData person(0, "", "", USER);	
		login->isValidUser(person);
		assert(false);
      }
      catch(InvalidPersonData& e) 
      {
		cout << "Caught InvalidPersonData exception!" << endl;
      }

      try 
      {
		PersonData person(277, "eteinik", "eteinik", USER);
		bool result = login->isValidUser(person);
		if(result) 
		{	
	  		cout << "Welcome " << person.name << endl;
		}
		else 
		{
	  		cout << "We don't know you !!!" << endl;
		}
      }
      catch(InvalidPersonData& e) 
      {
		cout << "Error: InvalidPersonData!!" << endl;
      }      
      server->remove();
    } 
    catch(Components::HomeNotFound ) 
    {
      cerr << "TEARDOWN ERROR: can't find a home!" << endl;
      error = -1;
    } 
    catch(Components::NotImplemented& e ) 
    {
      cerr << "TEARDOWN ERROR: function not implemented: " 
	   << e.what (  ) << endl;
      error = -1;
    } 
    catch(Components::InvalidName& e ) 
    {
      cerr << "DEPLOYMENT ERROR: invalid name during connection: " 
	   << e.what (  ) << endl;
      error = -1;
    }
    catch(...) 
    {
      cerr << "TEARDOWN ERROR: there is something wrong!" << endl;
      error = -1;
    }
    
    error += undeploy_application_ServerHome("ServerHome");
    if(error) 
    {
      cerr << "TEARDOWN ERROR: Can't undeploy component homes!" << endl;
      return error;
    }
    
    // Clean up HomeFinder singleton
    Components::HomeFinder::destroy();
    
    cout << ">>>> Stop Test Client: " << __FILE__ << endl;
}
