/**
 * This file was automatically generated by CCM Tools version 0.6.3
 * <http://ccmtools.sourceforge.net>
 * 
 * CCM_Test component business logic.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */

package world.europe.austria.ccm.local;

import ccm.local.*;
import world.europe.austria.*;
   
/**
 * This class implements component equivalent and supported interfaces
 * as well as component attributes.
 * Additionally, session component callback methods must be implemented.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */   
public class TestImpl 
    implements CCM_Test
{
    /** Supported interface attribute variables */
    
    

    /** Component attribute variables */
     

    public world.europe.austria.ccm.local.CCM_Test_Context ctx;
    

    // This attribute is accessed by explicite set and get methods
    // which are part of VoidTypeInterface.
    int attr;

    
    public TestImpl()
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }


    /* 
     * Supported interface methods 
     */

    /** Supported interface constants */
    
    
    

    /** Supported interface attributes */    
    
    
    /** Supported interface methods */

    public short fb1(short p1, Holder<Short> p2, Holder<Short> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (short)(p3.getValue() + p1);
    }    

    public int fb2(int p1, Holder<Integer> p2, Holder<Integer> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public short fb3(short p1, Holder<Short> p2, Holder<Short> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (short)(p3.getValue() + p1);
    }    

    public int fb4(int p1, Holder<Integer> p2, Holder<Integer> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public float fb5(float p1, Holder<Float> p2, Holder<Float> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public double fb6(double p1, Holder<Double> p2, Holder<Double> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public char fb7(char p1, Holder<Character> p2, Holder<Character> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (char)(p3.getValue() + p1);
    }    

    public String fb8(String p1, Holder<String> p2, Holder<String> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public boolean fb9(boolean p1, Holder<Boolean> p2, Holder<Boolean> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() && p1;
    }    

    public byte fb10(byte p1, Holder<Byte> p2, Holder<Byte> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (byte)(p3.getValue() + p1);
    }    





    public world.europe.austria.Color fu1(world.europe.austria.Color p1, 
					  Holder<world.europe.austria.Color> p2, 
					  Holder<world.europe.austria.Color> p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return world.europe.austria.Color.orange;
    }    

    public world.europe.austria.Person fu2(world.europe.austria.Person p1, 
					   Holder<world.europe.austria.Person> p2, 
					   Holder<world.europe.austria.Person> p3)
        throws ccm.local.Components.CCMException
    {
        world.europe.austria.Person r =
            new world.europe.austria.Person(p1.id + p2.getValue().id, p1.name + p2.getValue().name);
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return r;
    }    

    public world.europe.austria.Address fu3(world.europe.austria.Address p1, 
					    Holder<world.europe.austria.Address> p2, 
					    Holder<world.europe.austria.Address> p3)
        throws ccm.local.Components.CCMException
    {
        Person pers = new Person(p1.resident.id + p2.getValue().resident.id, 
				 p1.resident.name + p2.getValue().resident.name);
        Address addr = new Address(p1.street + p2.getValue().street, 
				   p1.number + p2.getValue().number, pers);
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return addr;
    }    

    public int[] fu4(int[] p1, 
		     Holder<int[]> p2, 
		     Holder<int[]> p3)
        throws ccm.local.Components.CCMException
    {
        int[] result = new int[p1.length];
        p3.setValue(new int[p1.length]);
        for (int i = 0; i < p1.length; i++)
        {
            result[i] = i;
            p3.getValue()[i] = p2.getValue()[i];
            p2.getValue()[i] = p1[i];
        }
        return result;

    }    

    public String[] fu5(String[] p1, 
			Holder<String[]> p2, 
			Holder<String[]> p3)
        throws ccm.local.Components.CCMException
    {
        String[] result = new String[p1.length];
        p3.setValue(new String[p1.length]);
        for(int i = 0; i< p1.length; i++)
        {
            result[i] = "Test";
            p3.getValue()[i] = p2.getValue()[i];
            p2.getValue()[i] = p1[i];
        }
        return result;
    }    

    public world.europe.austria.Person[] fu6(world.europe.austria.Person[] p1, 
					     Holder<world.europe.austria.Person[]> p2, 
					     Holder<world.europe.austria.Person[]> p3)
        throws ccm.local.Components.CCMException
    {
        Person[] result = new Person[p1.length];
        p3.setValue(new Person[p1.length]);
        for (int i = 0; i < p1.length; i++)
        {
            Person person = new Person(i, "Test");
            result[i] = person;
            p3.getValue()[i] = p2.getValue()[i];
            p2.getValue()[i] = p1[i];
        }
        return result;
    }    

    public int fu7(int t1, Holder<Integer> t2, Holder<Integer> t3)
        throws ccm.local.Components.CCMException
    {
        t3.setValue(t2.getValue());
        t2.setValue(t1);
        return t3.getValue() + t1;
    }    




    public void fv1(int p1)
        throws ccm.local.Components.CCMException
    {
	attr = p1;
    }    

    public int fv2()
        throws ccm.local.Components.CCMException
    {
	return attr;
    }    
    


    /** Component attribute accessor methods */
    


    /** Facet implementation factory methods */
        

    /** Component callback methods */
    
    public void set_session_context(ccm.local.Components.SessionContext ctx) 
        throws ccm.local.Components.CCMException
    {
        this.ctx = (world.europe.austria.ccm.local.CCM_Test_Context)ctx; 
    }

    public void ccm_activate() 
        throws ccm.local.Components.CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }

    public void ccm_passivate() 
        throws ccm.local.Components.CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }

    public void ccm_remove() 
        throws ccm.local.Components.CCMException
    {
        // OPTIONAL: IMPLEMENT ME HERE !
    }
}
