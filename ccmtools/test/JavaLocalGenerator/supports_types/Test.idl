/**
 * CCM Tools test case: supports_types 
 *
 * This test case checks some kinds of parameter passing with
 * different parameter types and directions.
 **/

module world 
{
  module europe 
  {
    module austria 
    {
      enum Color {red, green, blue, black, orange};

      struct Person 
      {
	long id;
	string name;
      };
      
      struct Address 
      {
	string street;
	long   number;
	Person resident;
      };
      
      typedef long time_t;

      typedef sequence<long> LongList;
      typedef sequence<string> StringList;
      typedef sequence<Person> PersonList;
      
      typedef long LongArray[10];
      typedef string StringArray[10];
      typedef Person PersonArray[10];
      
      interface BasicTypeInterface 
      {
	short          fb1(in short p1, inout short p2, out short p3);
	long           fb2(in long p1, inout long p2, out long p3);
	unsigned short fb3(in unsigned short p1, inout unsigned short p2, out unsigned short p3);
	unsigned long  fb4(in unsigned long p1, inout unsigned long p2, out unsigned long p3);
	float          fb5(in float p1, inout float p2, out float p3);
	double         fb6(in double p1, inout double p2, out double p3);
	char           fb7(in char p1, inout char p2, out char p3);
	string         fb8(in string p1, inout string p2, out string p3);
	boolean        fb9(in boolean p1, inout boolean p2, out boolean p3);
	octet          fb10(in octet p1, inout octet p2, out octet p3);
      };
      
      interface UserTypeInterface 
      {
	Color      fu1(in Color p1, inout Color p2, out Color p3);
	Person     fu2(in Person p1, inout Person p2, out Person p3);
	Address    fu3(in Address p1, inout Address p2, out Address p3);

	LongList   fu4(in LongList p1, inout LongList p2, out LongList p3);
	StringList fu5(in StringList p1, inout StringList p2, out StringList p3);
	PersonList fu6(in PersonList p1, inout PersonList p2, out PersonList p3);

	time_t     fu7(in time_t t1, inout time_t t2, out time_t t3);

	LongArray   fu8(in LongArray p1, inout LongArray p2, out LongArray p3);
	StringArray fu9(in StringArray p1, inout StringArray p2, out StringArray p3);
	PersonArray fu10(in PersonArray p1, inout PersonArray p2, out PersonArray p3);
      };
      
      
      interface VoidTypeInterface 
      {
	void fv1(in long p1);
	long fv2();
      };
      
      
      component Test
        supports BasicTypeInterface, UserTypeInterface, VoidTypeInterface
      {
      };
      
      home TestHome manages Test
      {
      };

    }; // end of module austria
  }; // end of module europe
}; // end of module world
