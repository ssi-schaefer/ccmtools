/**
 * This file was automatically generated by CCM Tools version 0.6.4
 * <http://ccmtools.sourceforge.net>
 * 
 * CCM_BasicTypeInterfaceImpl facet implementation.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 * 
 * @author
 * @version
 */

package world.europe.austria.ccm.local;
                 
import ccm.local.Components.*;
 
/** 
 * This class implements a component facet's methods.
 *
 * // TODO: WRITE YOUR DESCRIPTION HERE !
 *
 * @author
 * @version
 */
public class TestbasicTypeImpl 
    implements world.europe.austria.ccm.local.CCM_BasicTypeInterface
{
    /** Reference to the facet's component implementation */
    private world.europe.austria.ccm.local.TestImpl component;

    public TestbasicTypeImpl(world.europe.austria.ccm.local.TestImpl component)
    {
        this.component = component;
    }
 


    /** Business logic implementations */

    public short f1(short p1, ccm.local.ShortHolder p2, ccm.local.ShortHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (short)(p3.getValue() + p1);
    }    

    public int f2(int p1, ccm.local.IntegerHolder p2, ccm.local.IntegerHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public short f3(short p1, ccm.local.ShortHolder p2, ccm.local.ShortHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (short)(p3.getValue() + p1);
    }    

    public int f4(int p1, ccm.local.IntegerHolder p2, ccm.local.IntegerHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public float f5(float p1, ccm.local.FloatHolder p2, ccm.local.FloatHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public double f6(double p1, ccm.local.DoubleHolder p2, ccm.local.DoubleHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public char f7(char p1, ccm.local.CharacterHolder p2, ccm.local.CharacterHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (char)(p3.getValue() + p1);
    }    

    public String f8(String p1, ccm.local.StringHolder p2, ccm.local.StringHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() + p1;
    }    

    public boolean f9(boolean p1, ccm.local.BooleanHolder p2, ccm.local.BooleanHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return p3.getValue() && p1;
    }    

    public byte f10(byte p1, ccm.local.ByteHolder p2, ccm.local.ByteHolder p3)
        throws ccm.local.Components.CCMException
    {
        p3.setValue(p2.getValue());
        p2.setValue(p1);
        return (byte)(p3.getValue() + p1);
    }    
}
