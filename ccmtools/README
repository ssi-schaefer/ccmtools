
This file describes the basics of building, installing, and running the
"ccmtools" package, contained in this directory tree. More detailed information
about APIs, etc., can be found in the "doc" directories in this directory tree.

BUILDING
========

This package uses a standard GNU "./configure && make && make install" build and
install process. For detailed instructions on using the configure script and the
GNU automake build process, see the INSTALL file. There are some package
specific options available for the configure script:

o --enable-docs. Builds documentation in the form of LaTeX manuals and HTML API
  documentation. Depends on "javadoc" (for Java API documentation). All
  documents are located in "doc" subdirectories.
o --disable-tests. Disables building and running tests. Disables most "make
  check" targets. All tests are located in "test" subdirectories.

For a full listing of configure options, run "./configure --help".

INSTALLING
==========

To use the package, you will need to install it. (Otherwise the code generators
will not be able to locate the template directories in most cases.)

To perform the install, you can use the standard "make install" command to
install the Java archives. You will then need to alter your CLASSPATH
environment variable to include the newly-installed jar archive. Unless you
specifically altered the location of the share directories using the --datadir=
option to ./configure, the following command will correctly add the needed files
(using Bash):

export CLASSPATH=<prefix>/share/java/ccmtools.jar:<prefix>/share/java/antlr.jar:$CLASSPATH

If you did not alter the prefix at configure time, your prefix will be
/usr/local, and the following command will set the correct environment variable
(using Bash):

export CLASSPATH=/usr/local/share/java/ccmtools.jar:/usr/local/share/java/antlr.jar:$CLASSPATH

If you installed the ccmtools package to a nonstandard location, you will also
need to add <prefix>/bin to your PATH environment variable.

RUNNING
=======

The ccmtools package is currently centered on C++ component generation, so the
other code generator tools are less well developed. If you want to develop, for
example, the Java or Python code generators, please send patches !

There are several tools you can use for generating, building, testing,
installing, and uninstalling CCM components in C++. In most cases, the
development process will follow these steps :

0. Create or edit your Confix configuration file in $HOME/.confix. This file
   needs to contain a `ccmtools' profile that contains installation and build
   locations for your particular development environment. A minimal
   configuration file example (confix.example) is included in the source
   distribution.

1. Make a directory for your package. Write IDL3 files defining the components,
   homes, and interfaces sufficient for your project. Store all IDL3 files in
   the package directory. (This will be more flexible in the future, allowing
   better include functionality.)

2. At a command line prompt, go to your package directory, where your IDL3 files
   are stored.

3. Run the ccmtools-c++-environment script to generate, build, and install the
   C++ component environment. Make sure your Confix configuration file is set
   correctly !

4. Set the CCMTOOLS_PACKAGE environment variable to the name of your project.
   (Or you can specify this using the "-p NAME" option. Use the --help option
   for each of the ccmtools-c++-* scripts to get more information.)

5. Run "ccmtools-c++-generate *.idl" to generate the component code. This script
   will generate component logic code based on your IDL3 files. It will also
   generate some basic unit test checks for your components. After code is
   generated, the script will copy generated application logic files into the
   working directory.

   If there are already application logic files in the current directory, they
   will not be overwritten. So if you have old application logic that you wish
   to remove, be sure to remove all these files before calling
   ccmtools-c++-generate, or use the -f option when using ccmtools-c++-generate.

6. Edit the generated application logic files (the ones that were just copied to
   the current directory) to implement your project's functionality.

7. Run ccmtools-c++-make. This script will copy your edited application logic
   files into the generated source tree. Then it will use Confix to configure,
   build, and check your components. If any step of this procedure fails, the
   process will halt and allow you to fix the problem.

8. Install your components using ccmtools-c++-install.

9. Use your components.

10. If you need to uninstall your components, use the ccmtools-c++-uninstall
    script. If this happens much later, remember to set the CCMTOOLS_PACKAGE
    environment variable, or provide the package name with "-p NAME", to point
    to the correct location of the generated code.

Example development session
---------------------------

An example command line session might look like this :

First, you need to edit IDL3 source files in /some/directory/for/development.
These will define the components, homes, interfaces, etc. that you intend to use
in your project.

  ~ $ cd /some/directory/for/development
  development $ ls -1
  my_component1.idl
  my_component2.idl
  my_facetA.idl
  my_facetB.idl
  my_facetC.idl
  :
  :
  development $ export CCMTOOLS_PACKAGE=my_project
  development $ ccmtools-c++-generate *.idl

This will generate component code in ./my_project. Application logic files will
be copied here after they are generated. Confix will bootstrap and configure the
package, and when that is complete you will probably need to edit the *_app.cc
and *_user_types.h files.

  development $ ccmtools-c++-make

This will copy application logic files to the correct locations in my_project.
Confix will build and check the components.

  development $ ccmtools-c++-install

Confix will install the components.

  development $ ccmtools-c++-uninstall

Confix will uninstall the components.

All of these scripts support basic --help options, which you should use to find
out more information. Also see the User Guide for more complete references on
using the CCM Tools.
