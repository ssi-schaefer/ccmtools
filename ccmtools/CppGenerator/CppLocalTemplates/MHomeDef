/*
 * This file was automatically generated by the CCM Tools - DO NOT EDIT !
 * <http://ccmtools.sourceforge.net/>
 */

//==============================================================================
// %(Identifier)s - home class and support classes
//==============================================================================

#ifndef __HOME_%(PreprocIdentifier)s_GEN__H__
#define __HOME_%(PreprocIdentifier)s_GEN__H__

#ifdef CCM_TEST_PYTHON
#include "%(Identifier)s_python.h"
#endif

#include <string>
#include <map>
#include <WX/Utils/smartptr.h>
#include <LocalComponents/CCM.h>
#include <CCM_Local/HomeFinder.h>

%(MFactoryDefInclude)s
%(MFinderDefInclude)s
%(MSupportsDefInclude)s
%(BaseInclude)s

#include "%(ComponentType)s_gen.h"

%(OpenNamespace)s

class CCM_%(ComponentType)s;
class %(ComponentType)s;
class CCM_%(Identifier)sExplicit;
class CCM_%(Identifier)sImplicit;
class CCM_%(Identifier)s;
class %(Identifier)s;

//==============================================================================
// explicit support classes
//==============================================================================

class %(Identifier)sExplicit
  : public LocalComponents::CCMHome
{
 public:
%(MFactoryDefAdapterPrototypeVV)s
};

//==============================================================================
// implicit support classes
//==============================================================================

class %(Identifier)sImplicit
  : public LocalComponents::KeylessCCMHome
{
 public:
  virtual WX::Utils::SmartPtr<%(ComponentType)s> create (  )
    throw ( LocalComponents::CreateFailure ) = 0;
};




//==============================================================================
// home and home adapter classes
//==============================================================================

class %(Identifier)s
  : public %(Identifier)sExplicit, public %(Identifier)sImplicit%(BaseType)s
{
 protected:
  CCM_%(Identifier)s* local_home;

 public:
  %(Identifier)s (  );
  virtual ~%(Identifier)s (  );

%(MFactoryDefAdapterPrototypeV)s

  // CCMHome functions

  virtual WX::Utils::SmartPtr<%(ComponentType)s> create (  )
    throw ( LocalComponents::CreateFailure );
  virtual LocalComponents::IRObject* get_component_def (  );
  virtual LocalComponents::IRObject* get_home_def (  );
  virtual void remove_component ( const LocalComponents::CCMObject& comp )
    throw ( LocalComponents::RemoveFailure );

  // KeylessCCMHome functions

  virtual LocalComponents::CCMObject* create_component (  )
    throw ( LocalComponents::CreateFailure );
};

%(CloseNamespace)s

//==============================================================================
// entry point
//==============================================================================

extern "C" {
  WX::Utils::SmartPtr<LocalComponents::CCMHome> create_%(Identifier)sAdapter();

  int local_deploy_%(Identifier)s(char* name);
  int local_undeploy_%(Identifier)s(char* name);
}

#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by the CCM Tools - DO NOT EDIT !
 * <http://ccmtools.sourceforge.net/>
 */

//==============================================================================
// %(Identifier)s - home class component logic implementation
//==============================================================================

#include <iostream>
#include <WX/Utils/debug.h>

#include "%(Identifier)s_gen.h"
#include <%(Identifier)s_entry.h>

using namespace std;
using namespace WX::Utils;
using namespace CCM_Local;

%(OpenNamespace)s

//==============================================================================
// home adapter implementation
//==============================================================================

%(Identifier)s::%(Identifier)s (  )
{
  DEBUGNL ( "+%(Identifier)s->%(Identifier)s (  )" )
  local_home = dynamic_cast<CCM_%(Identifier)s*> ( create_%(Identifier)s (  ) );
}

%(Identifier)s::~%(Identifier)s (  )
{
  DEBUGNL ( "-%(Identifier)s->~%(Identifier)s (  )" )
  delete local_home;
}

%(MFactoryDefAdapterDefinition)s

// CCMHome functions

SmartPtr<%(ComponentType)s>
%(Identifier)s::create (  )
  throw ( LocalComponents::CreateFailure )
{
  DEBUGNL ( " %(Identifier)s->create()" );
  SmartPtr<%(ComponentType)s> ret(
    dynamic_cast<%(ComponentType)s*>(
      new %(ComponentType)s( this,
        dynamic_cast<CCM_%(ComponentType)s*>(
          ((CCM_%(Identifier)sImplicit*)local_home)->create()
        )
      )
    )
  );
  return ret;
}

LocalComponents::IRObject*
%(Identifier)s::get_component_def (  )
{
  DEBUGNL ( " %(Identifier)s->get_component_def (  )" );
  // TODO
  throw LocalComponents::NotImplemented (  );
}

LocalComponents::IRObject*
%(Identifier)s::get_home_def (  )
{
  DEBUGNL ( " %(Identifier)s->get_home_def (  )" );
  // TODO
  throw LocalComponents::NotImplemented (  );
}

void
%(Identifier)s::remove_component ( const LocalComponents::CCMObject& comp )
  throw ( LocalComponents::RemoveFailure )
{
  DEBUGNL ( " %(Identifier)s->remove_component (  )" );
  // TODO
  throw LocalComponents::NotImplemented (  );
}

LocalComponents::CCMObject*
%(Identifier)s::create_component (  )
  throw ( LocalComponents::CreateFailure )
{
  DEBUGNL ( " %(Identifier)s->create_component (  )" );
  // TODO
  throw LocalComponents::NotImplemented (  );
}

%(CloseNamespace)s

//==============================================================================
// entry point
//==============================================================================

extern "C" {
  WX::Utils::SmartPtr<LocalComponents::CCMHome>
  create_%(Identifier)sAdapter (  )
  {
    DEBUGNL ( " create_%(Identifier)sAdapter (  )" );
    WX::Utils::SmartPtr<LocalComponents::CCMHome>
      ret ( new %(Namespace)s::%(Identifier)s (  ) );
    return ret;
  }

  int local_deploy_%(Identifier)s(char* name)
  {
    DEBUGNL ( " local_deploy_%(Identifier)s()" );
    try {
      WX::Utils::SmartPtr<LocalComponents::CCMHome> ret( new %(Namespace)s::%(Identifier)s());
      HomeFinder::Instance()->register_home(ret, name);
    } catch ( ... )  {
      return -1;
    }
    return 0; 
  }	

  int local_undeploy_%(Identifier)s(char* name)
  {
     try {
       HomeFinder::Instance()->unregister_home(name);	
     } catch (...) {
       return -1;
     }
     return 0;
  }
}


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by the CCM Tools - DO NOT EDIT !
 * <http://ccmtools.sourceforge.net/>
 */

//==============================================================================
// %(Identifier)s - shared class definitions
//==============================================================================

#ifndef __HOME_%(PreprocIdentifier)s_SHARE__H__
#define __HOME_%(PreprocIdentifier)s_SHARE__H__

#include <WX/Utils/smartptr.h>
#include <LocalComponents/CCM.h>

%(MFactoryDefInclude)s
%(MFinderDefInclude)s
%(MSupportsDefInclude)s
%(BaseInclude)s

%(OpenNamespace)s

//==============================================================================
// home classes
//==============================================================================

class CCM_%(Identifier)sExplicit
  : public LocalComponents::HomeExecutorBase
{
 public:
%(MFactoryDefPrototypeVV)s
};


class CCM_%(Identifier)sImplicit
{
 public:
  virtual LocalComponents::EnterpriseComponent* create (  )
    throw ( LocalComponents::CCMException ) = 0;
};


class CCM_%(Identifier)s
  : public CCM_%(Identifier)sExplicit, public CCM_%(Identifier)sImplicit%(BaseType)s%(MSupportsDefBase)s
{
};

%(CloseNamespace)s

#endif // __HOME_%(PreprocIdentifier)s_SHARE__H__


<<<<<<<SPLIT>>>>>>>
//==============================================================================
// %(Identifier)s - entry point
//==============================================================================

#ifndef __HOME_%(PreprocIdentifier)s_ENTRY__H__
#define __HOME_%(PreprocIdentifier)s_ENTRY__H__

extern "C" {
  LocalComponents::HomeExecutorBase* create_%(Identifier)s (  );
}

#endif // __HOME_%(PreprocIdentifier)s_ENTRY__H__


<<<<<<<SPLIT>>>>>>>
//==============================================================================
// %(Identifier)s - home class business logic
//==============================================================================

#ifndef __HOME_%(PreprocIdentifier)s_APP__H__
#define __HOME_%(PreprocIdentifier)s_APP__H__

#include <%(HomeInclude)s_share.h>
#include "%(Identifier)s_entry.h"

%(OpenNamespace)s

class CCM_%(Identifier)s;

class CCM_%(Identifier)s_impl
  : public CCM_%(Identifier)s%(BaseType)s
{
 public:
  CCM_%(Identifier)s_impl (  );
  virtual ~CCM_%(Identifier)s_impl (  );

  virtual LocalComponents::EnterpriseComponent* create (  )
    throw ( LocalComponents::CCMException );

%(MFactoryDefPrototypeV)s
};

%(CloseNamespace)s

#endif


<<<<<<<SPLIT>>>>>>>
//==============================================================================
// %(Identifier)s - home business logic implementation
//==============================================================================

#include <iostream>
#include <WX/Utils/debug.h>

#include "%(ComponentType)s_app.h"
#include "%(Identifier)s_app.h"

using namespace std;
using namespace WX::Utils;
using namespace CCM_Local;

%(OpenNamespace)s

//==============================================================================
// implementation of component home
//==============================================================================

CCM_%(Identifier)s_impl::CCM_%(Identifier)s_impl (  )
{
  DEBUGNL ( "+CCM_%(Identifier)s_impl->CCM_%(Identifier)s_impl (  )" );
}

CCM_%(Identifier)s_impl::~CCM_%(Identifier)s_impl (  )
{
  DEBUGNL ( "-CCM_%(Identifier)s_impl->~CCM_%(Identifier)s_impl (  )" );
}

LocalComponents::EnterpriseComponent*
CCM_%(Identifier)s_impl::create (  )
  throw ( LocalComponents::CCMException )
{
  DEBUGNL ( " CCM_%(Identifier)s_impl->create (  )" );
  return dynamic_cast<LocalComponents::EnterpriseComponent*>
    ( new CCM_%(ComponentType)s_impl (  ) );
}

%(MFactoryDefImplDefinition)s

%(CloseNamespace)s

//==============================================================================
// entry point
//==============================================================================

extern "C" {
  LocalComponents::HomeExecutorBase*
  create_%(Identifier)s (  )
  {
    DEBUGNL ( " create_%(Identifier)s (  )" );
    return dynamic_cast<LocalComponents::HomeExecutorBase*>
      ( new %(Namespace)s::CCM_%(Identifier)s_impl (  ) );
  }
}


