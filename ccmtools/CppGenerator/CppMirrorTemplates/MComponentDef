#include <localComponents/CCM.h>
#include <CCM_Local/HomeFinder.h>
#include <CCM_Utils/Debug.h>
#include <CCM_Utils/SmartPointer.h>

#ifdef CCM_TEST_PYTHON
#include <Python.h>
#endif

#include <%(IncludeNamespace)s_mirror/%(Identifier)s_mirror_gen.h>
#include <%(IncludeNamespace)s_mirror/%(HomeType)s_mirror_gen.h>
#include <%(IncludeNamespace)s/%(Identifier)s_gen.h>
#include <%(IncludeNamespace)s/%(HomeType)s_gen.h>

using namespace std;
using namespace CCM_Utils;
%(UsingNamespace)s

//==============================================================================
// implementation of local client test
//==============================================================================

int main ( int argc, char *argv[] )
{
  int result = 0;
  Debug::set_global ( true );

  DEBUGNL ( "test_client_%(Identifier)s_component_main (  )" );

  // Get in instance of the local HomeFinder and register component homes
  localComponents::HomeFinder* homeFinder = HomeFinder::Instance();
  try {
    homeFinder->register_home( create_%(HomeType)sAdapter(), "%(HomeType)s" );
    homeFinder->register_home( create_%(HomeType)s_mirrorAdapter(), "%(HomeType)s_mirror" );
  } catch ( ... )  {
    cout << "Aut'sch: there is something wrong while register homes!" << endl;
    return -1;
  }

#ifdef CCM_TEST_PYTHON
  Py_Initialize();
#endif

  try {
    /*
     * SET UP / DEPLOYMENT
     */

    // Find component and mirror component homes
    SmartPtr<%(HomeType)s> my%(HomeType)s ( dynamic_cast<%(HomeType)s*>
      ( homeFinder->find_home_by_name ( "%(HomeType)s" ).ptr (  ) ) );

    SmartPtr<%(HomeType)s_mirror> my%(HomeType)sMirror ( dynamic_cast<%(HomeType)s_mirror*>
      ( homeFinder->find_home_by_name ( "%(HomeType)s_mirror" ).ptr (  ) ) );

    // Create component and mirror component instances
    SmartPtr<%(Identifier)s> my%(Identifier)s = 
      my%(HomeType)s.ptr (  )->create (  );
    SmartPtr<%(Identifier)s_mirror> my%(Identifier)sMirror = 
      my%(HomeType)sMirror.ptr()->create();

    // Create provided and used (mirror) facets
%(MProvidesDefFacetCreate)s
%(MUsesDefFacetCreate)s

    // Connect components
%(MProvidesDefConnect)s
%(MUsesDefConnect)s

    // End of deployment phase
    my%(Identifier)s.ptr()->configuration_complete();
    my%(Identifier)sMirror.ptr()->configuration_complete();

    // Use %(Identifier)s component standard functionality
    cout << "> getComponentVersion() = " 
         << my%(Identifier)s.ptr()->getComponentVersion () << endl;
    cout << "> getComponentDate() = " 
         << my%(Identifier)s.ptr()->getComponentDate() << endl;

    /*
     * TESTING
     */
	
     DEBUGNL("==== Begin Test Case =============================================" );	

    // TODO : IMPLEMENT ME HERE !	
	
     DEBUGNL("==== End Test Case ===============================================" );	


    /*
     * TEAR DOWN
     */

    // Disconnect components
%(MProvidesDefDisconnect)s
%(MUsesDefDisconnect)s

    // Destroy component instances
    my%(Identifier)s.ptr (  )->remove (  );
    my%(Identifier)sMirror.ptr()->remove();

    // Unregister component homes
    homeFinder->unregister_home ( "%(HomeType)s" );
    homeFinder->unregister_home ( "%(HomeType)s_mirror" );

    DEBUGNL ( "exit test_client_%(Identifier)s_component_main (  )" );
  } catch ( localComponents::HomeNotFound ) {
    cout << "Aut'sch: can't find a home!" << endl;
    result = -1;
  } catch ( localComponents::NotImplemented& e ) {
    cout << "Aut'sch: " << e.what (  ) << endl;
    result = -1;
  } catch ( ... )  {
    cout << "Aut'sch: there is something wrong!" << endl;
    result = -1;
  }

#ifdef CCM_TEST_PYTHON
  Py_Finalize();
#endif

  return result;
}

