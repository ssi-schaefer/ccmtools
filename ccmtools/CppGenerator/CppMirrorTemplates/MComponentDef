#include <localComponents/CCM.h>
#include <CCM_Local/HomeFinder.h>
#include <CCM_Utils/Debug.h>
#include <CCM_Utils/SmartPointer.h>

#ifdef CCM_TEST_PYTHON
#include <Python.h>
#endif

#include <%(IncludeNamespace)s_mirror/%(Identifier)s_mirror_gen.h>
#include <%(IncludeNamespace)s_mirror/%(HomeType)s_mirror_gen.h>
#include <%(IncludeNamespace)s/%(Identifier)s_gen.h>
#include <%(IncludeNamespace)s/%(HomeType)s_gen.h>

using namespace std;
using namespace CCM_Utils;
%(UsingNamespace)s

//==============================================================================
// implementation of local client test
//==============================================================================

int main ( int argc, char *argv[] )
{
  int result = 0;

  localComponents::HomeFinder* homeFinder;

  SmartPtr<%(Identifier)s> my%(Identifier)s;
  SmartPtr<%(Identifier)s_mirror> my%(Identifier)sMirror;

%(MProvidesDefVariable)s
%(MProvidesDefCookie)s

%(MUsesDefVariable)s
%(MUsesDefCookie)s

  Debug::set_global ( true );

  DEBUGNL ( "test_client_%(Identifier)s_component_main (  )" );

  // get an instance of the local HomeFinder and register component homes

  homeFinder = HomeFinder::Instance (  );

  try {
    homeFinder->register_home( create_%(HomeType)sAdapter (  ), "%(HomeType)s" );
    homeFinder->register_home( create_%(HomeType)s_mirrorAdapter (  ), "%(HomeType)s_mirror" );
  } catch ( ... )  {
    cout << "REGISTER: there is something wrong!" << endl;
    return -1;
  }

#ifdef CCM_TEST_PYTHON
  Py_Initialize();
#endif

  /* SET UP / DEPLOYMENT */

  try {
    // find component/mirror homes, instantiate components

    SmartPtr<%(HomeType)s> my%(HomeType)s ( dynamic_cast<%(HomeType)s*>
      ( homeFinder->find_home_by_name ( "%(HomeType)s" ).ptr (  ) ) );
    SmartPtr<%(HomeType)s_mirror> my%(HomeType)sMirror ( dynamic_cast<%(HomeType)s_mirror*>
      ( homeFinder->find_home_by_name ( "%(HomeType)s_mirror" ).ptr (  ) ) );

    my%(Identifier)s = my%(HomeType)s.ptr (  )->create (  );
    my%(Identifier)sMirror = my%(HomeType)sMirror.ptr (  )->create (  );

    // create facets, connect components

%(MProvidesDefCreate)s
%(MUsesDefCreate)s

%(MProvidesDefConnect)s
%(MUsesDefConnect)s

    my%(Identifier)s.ptr (  )->configuration_complete (  );
    my%(Identifier)sMirror.ptr (  )->configuration_complete (  );
  } catch ( localComponents::HomeNotFound ) {
    cout << "DEPLOY: can't find a home!" << endl;
    result = -1;
  } catch ( localComponents::NotImplemented& e ) {
    cout << "DEPLOY: function not implemented: " << e.what (  ) << endl;
    result = -1;
  } catch ( localComponents::InvalidName& e ) {
    cout << "DEPLOY: invalid name during connection: " << e.what (  ) << endl;
    result = -1;
  } catch ( ... )  {
    cout << "DEPLOY: there is something wrong!" << endl;
    result = -1;
  }

  if (result < 0) return result;

  /* TESTING */

  try {
    // check basic functionality

    cout << "> getComponentVersion (  ) = "
         << my%(Identifier)s.ptr (  )->getComponentVersion (  ) << endl;
    cout << "> getComponentDate (  ) = "
         << my%(Identifier)s.ptr (  )->getComponentDate (  ) << endl;

    DEBUGNL("==== Begin Test Case =============================================" );

    // TODO : IMPLEMENT ME HERE !

    DEBUGNL("==== End Test Case ===============================================" );
  } catch ( localComponents::NotImplemented& e ) {
    cout << "TEST: function not implemented: " << e.what (  ) << endl;
    result = -1;
  } catch ( ... )  {
    cout << "TEST: there is something wrong!" << endl;
    result = -1;
  }

  if (result < 0) return result;

  /* TEAR DOWN */

  try {
    // disconnect components, destroy instances, unregister homes

%(MProvidesDefDisconnect)s
%(MUsesDefDisconnect)s

    my%(Identifier)s.ptr (  )->remove (  );
    my%(Identifier)sMirror.ptr (  )->remove (  );

    homeFinder->unregister_home ( "%(HomeType)s" );
    homeFinder->unregister_home ( "%(HomeType)s_mirror" );
  } catch ( localComponents::HomeNotFound ) {
    cout << "TEARDOWN: can't find a home!" << endl;
    result = -1;
  } catch ( localComponents::NotImplemented& e ) {
    cout << "TEARDOWN: function not implemented: " << e.what (  ) << endl;
    result = -1;
  } catch ( ... )  {
    cout << "TEARDOWN: there is something wrong!" << endl;
    result = -1;
  }

#ifdef CCM_TEST_PYTHON
  Py_Finalize();
#endif

  DEBUGNL ( "exit test_client_%(Identifier)s_component_main (  )" );

  return result;
}

