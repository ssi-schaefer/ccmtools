//==============================================================================
// %(Identifier)s - python object definition
//==============================================================================

#ifdef CCM_TEST_PYTHON

#include <%(SelfInclude)s_share.h>
#include <%(HomeInclude)s_share.h>

#include <Python.h>

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

%(OpenNamespace)s

//==============================================================================
// %(Identifier)s : component adapter class wrapper
//==============================================================================

typedef struct {
  PyObject_HEAD
  %(Identifier)s *object;
} Py%(Identifier)s_Object;

static PyObject *
Py%(Identifier)s_new ( PyTypeObject *type, PyObject *args, PyObject *kwds )
{
  Py%(Identifier)s_Object *self = NULL;
  self = ( Py%(Identifier)s_Object * ) type->tp_alloc ( type, 0 );
  if ( self == NULL ) return NULL;
  self->object = NULL;
  return ( PyObject * ) self;
}

static int
Py%(Identifier)s_init ( PyObject *self, PyObject *args, PyObject *kwds )
{
  Py%(HomeType)s_Object *h = NULL;
  PyCCM_%(Identifier)s)_Object *lc = NULL;

  static char *kwlist[] = { "home_local_adapter", "local_component", NULL };

  if (! PyArg_ParseTupleAndKeywords(args, kwds, "|OO", kwlist, &h, &lc))
    return -1;

  if (h) {
        Py_XDECREF(self->);
        Py_INCREF(first);
        self->first = first;
    }

  return 0;
}

static void
Py%(Identifier)s_dealloc ( %(Identifier)s_Object *self )
{
  delete self->object;
  self->ob_type->tp_free ( ( PyObject * ) self );
}

static PyMethodDef Py%(Identifier)s_Methods[] {
  {NULL, NULL, 0} /* end marker */
};

static PyMemberDef Py%(Identifier)s_Members[] {
  {NULL, NULL, 0} /* end marker */
};

static PyTypeObject Py%(Identifier)s_Type = {
  PyObject_HEAD_INIT ( NULL )

  0, /* ob_size */
  "%(PythonNamespace)s.%(Identifier)s", /* tp_name */
  sizeof ( Py%(Identifier)s_Object ), /* tp_basicsize */
  0, /* tp_itemsize */

  /* methods */
  (destructor) Py%(Identifier)s_dealloc, /* tp_dealloc */
  0, /* tp_print */
  0, /* tp_getattr */
  0, /* tp_setattr */
  0, /* tp_compare */
  0, /* tp_repr */
  0, /* tp_as_number */
  0, /* tp_as_sequence */
  0, /* tp_as_mapping */
  0, /* tp_hash */
  0, /* tp_call */
  0, /* tp_str */
  0, /* tp_getattro */
  0, /* tp_setattro */
  0, /* tp_as_buffer */

  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /* tp_flags */

  NULL, /* tp doc */

  0, /* tp_traverse */
  0, /* tp_clear */
  0, /* tp_richcompare */
  0, /* tp_weaklistoffset */
  0, /* tp_iter */
  0, /* tp_iternext */

  Py%(Identifier)s_Methods, /* tp_methods */
  Py%(Identifier)s_Members, /* tp_members */

  0, /* tp_getset */
  0, /* tp_base */
  0, /* tp_dict */
  0, /* tp_descr_get */
  0, /* tp_descr_set */
  0, /* tp_dictoffset */
  Py%(Identifier)s_init, /* tp_init */
  0, /* tp_alloc */

  Py%(Identifier)s_new, /* tp_new */
};

%(CloseNamespace)s

#endif



