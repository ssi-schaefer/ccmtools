// MComponentDef,%(Identifier)s.h component

/******************************************************************************/
/*  Project: remote C++ Prototype                                             */
/*  File   : Calculator_remote.h                                              */
/*  Version: 0.1                                                              */
/*  Date   : Feber 2003                                                       */
/*----------------------------------------------------------------------------*/
/*  Company: SALOMON Automoation F&E                                          */
/*  Autor  : Egon Teiniker                                                    */
/*----------------------------------------------------------------------------*/
/*  Note   :                                                                  */
/******************************************************************************/

#include <CCM_Utils/smartptr.h>
#include <CCM_Utils/debug.h>

#include <CCMContainer.h>

#include <Calculator_includes.h>

#include <CCM_Local/IntegerFacet.h>
#include <CCM_Local/ShowFacet.h>
#include <CCM_Local/CalculatorFacade.h>
#include <CCM_Session_Calculator/Calculator_gen.h>
#include <CCM_Session_Calculator/Calculator_app.h>


#ifndef __%(Identifier)s__CCM__H__
#define __%(Identifier)s__CCM__H__

namespace remote {
namespace CCM_Session_Calculator {

  //============================================================================
  // Component remote adapter 
  //============================================================================
  class Calculator_impl :
      virtual public POA_Calculator,
      virtual public PortableServer::RefCountServantBase
  {
      friend class CCM_Calculator_Context_impl;
      friend class Calculator_calc_impl;

    private:
      local::CCM_Session_Calculator::CCM_Calculator_impl* local_component;
      local::CCM_Session_Calculator::CCM_Calculator_Context* local_context;

      CCM::SessionContainer* ccm_container;
      PortableServer::ServantBase_var calc_facet_adapter;

      CalculatorFacade_var reference_for_facet_calc;
      IntegerFacet_var     reference_for_receptacle_iUnit;

      Calculator::showConnections receptacles_show;
      CORBA::ULong cookie_for_show;

    public:
      Calculator_impl(local::CCM_Session_Calculator::CCM_Calculator_impl*, 
		      CCM::SessionContainer *);
      ~Calculator_impl ();

      /*
       * Component Attributes
       */

      CORBA::Long SerNr ();
      void SerNr (CORBA::Long _value);

      /*
       * Supported Interfaces
       */

      // ::EuroCalculator

      CORBA::Double eur_to_ats( CORBA::Double eur);
      CORBA::Double ats_to_eur( CORBA::Double ats);

      // ::ReleaseInformation

      char* getComponentVersion();
      char* getComponentDate();
      char* getComponentUUID();


      /*
       * Equivalent IDL methods
       */

      CalculatorFacade_ptr provide_calc ();

      // receptacles

      void connect_iUnit (IntegerFacet_ptr _value);
      IntegerFacet_ptr disconnect_iUnit ();
      IntegerFacet_ptr get_connection_iUnit ();

      Components::Cookie * connect_show (ShowFacet_ptr _value);
      ShowFacet_ptr disconnect_show (Components::Cookie * _value);
      Calculator::showConnections * get_connections_show ();


      // no publishers

      // no emitters

      // no consumers

      /*
       * Inherited Navigation interface
       */

      CORBA::Object_ptr provide_facet (const char *);
      Components::FacetDescriptions * get_all_facets ();
      Components::FacetDescriptions * get_named_facets (const Components::NameList &);
      CORBA::Boolean same_component (CORBA::Object_ptr ref);

      /*
       * Inherited Receptacles interface
       */

      Components::Cookie * connect (const char *, CORBA::Object_ptr);
      void disconnect (const char * name, Components::Cookie *);
      Components::ConnectionDescriptions * get_connections (const char *);
      Components::ReceptacleDescriptions * get_all_receptacles ();
      Components::ReceptacleDescriptions * get_named_receptacles (const Components::NameList &);

      /*
       * Inherited Events interface
       */

      Components::EventConsumerBase_ptr get_consumer (const char *);
      Components::Cookie * subscribe (const char *, Components::EventConsumerBase_ptr);
      void unsubscribe (const char * name, Components::Cookie *);
      void connect_consumer (const char *, Components::EventConsumerBase_ptr);
      Components::EventConsumerBase_ptr disconnect_consumer (const char *);
      Components::ConsumerDescriptions * get_all_consumers ();
      Components::ConsumerDescriptions * get_named_consumers (const Components::NameList &);
      Components::EmitterDescriptions * get_all_emitters ();
      Components::EmitterDescriptions * get_named_emitters (const Components::NameList &);
      Components::PublisherDescriptions * get_all_publishers ();
      Components::PublisherDescriptions * get_named_publishers (const Components::NameList &);

      /*
       * Inherited CCMObject interface
       */

      CORBA::Object_ptr get_component_def ();
      Components::CCMHome_ptr get_ccm_home ();
      void configuration_complete ();
      void remove ();
      Components::ComponentPortDescription * get_all_ports ();

      /*
       * Overload default implementation
       */

      CORBA::Object_ptr _get_component ();
  };



  //============================================================================
  // Facet remote adapter
  //============================================================================

  class Calculator_calc_impl :
      virtual public POA_CalculatorFacade,
      virtual public PortableServer::RefCountServantBase
  {
    private:
      local::CCM_Session_Calculator::CCM_Calculator_impl* local_component;
      local::CCM_CalculatorFacade* local_facet; 
    public:
      Calculator_calc_impl(local::CCM_Session_Calculator::CCM_Calculator_impl*);
      ~Calculator_calc_impl ();

      /*
       * Attributes
       */

      // none

      /*
       * Operations
       */

      CORBA::Long add( CORBA::Long a, CORBA::Long b);
      CORBA::Long sub( CORBA::Long a, CORBA::Long b);
      void print( const char* s);
      void write( const Record& r);
      RecordSet* read( const Record& r);
  };


  //============================================================================
  // Receptacle iUnit remote adapter
  //============================================================================
  
  class iUnit_ReceptacleAdapter 
    : virtual public local::CCM_IntegerFacet
  {
    private:
    Calculator_impl* component_adapter;

    public:
      iUnit_ReceptacleAdapter(Calculator_impl* c);
      virtual ~iUnit_ReceptacleAdapter();
  
      virtual int add(const int a, const int b);
      virtual int sub(const int a, const int b);    
  };


  //============================================================================
  // Receptacle show remote adapter
  //============================================================================
  
  class show_ReceptacleAdapter 
    : virtual public local::CCM_ShowFacet
  {
    private:
    Calculator_impl* component_adapter;

    public:
      show_ReceptacleAdapter(Calculator_impl* c);
      virtual ~show_ReceptacleAdapter();

      virtual void print_string(const std::string& msg);
  };



  //==========================================================================
  // Context adapter
  //==========================================================================
  class CCM_Calculator_Context_impl
    : public local::CCM_Session_Calculator::CCM_Calculator_Context
    {
    private:
      Calculator_impl* component_adapter;
      CCM::SessionContainer* ccm_container;
      WX::Utils::SmartPtr<local::CCM_IntegerFacet> iunit_adapter;
      local::CCM_Session_Calculator::showConnections receptcales_show;
      
    public:
      CCM_Calculator_Context_impl(Calculator_impl* g, CCM::SessionContainer* co);
      virtual ~CCM_Calculator_Context_impl();
      
      WX::Utils::SmartPtr<local::CCM_IntegerFacet> get_connection_iUnit(); 
      
      local::CCM_Session_Calculator::showConnections& get_connections_show(); 
      
      // Methods from the CCMContext interface
      localComponents::Principal* get_caller_principal();
      
      WX::Utils::SmartPtr<localComponents::HomeExecutorBase> get_CCM_home();
      
      bool get_rollback_only() 
	throw (localComponents::IllegalState);
      
      WX::Utils::SmartPtr<localTransaction::UserTransaction> get_user_transaction()
	throw (localComponents::IllegalState);
      
      bool is_caller_in_role(const std::string& role);
      
      void set_rollback_only()
	throw (localComponents::IllegalState);
      
      // Methods from the SessionContext interface
      WX::Utils::SmartPtr<localComponents::Object> get_CCM_object()
	throw (localComponents::IllegalState);
    };

} // /namespace CCM_Session_Calculator
} // /namespace remote
#endif

<<<<<<<SPLIT>>>>>>>

// MComponentDef,%(Identifier)s.cc component 
/******************************************************************************/
/*  Project: remote C++ Prototype                                             */
/*  File   : Calculator_remote.cc                                             */
/*  Version: 0.1                                                              */
/*  Date   : Feber 2003                                                       */
/*----------------------------------------------------------------------------*/
/*  Company: SALOMON Automoation F&E                                          */
/*  Autor  : Egon Teiniker                                                    */
/*----------------------------------------------------------------------------*/
/*  Note   :                                                                  */
/******************************************************************************/


#include "Calculator_remote.h"

using namespace std;
using namespace WX::Utils;


//============================================================================
// Component remote adapter 
//============================================================================

remote::CCM_Session_Calculator::
Calculator_impl::Calculator_impl (local::CCM_Session_Calculator::CCM_Calculator_impl* i, 
				  CCM::SessionContainer * c)
  : local_component(i), ccm_container (c)
{
  cout << "+Calculator_impl::Calculator_impl()" << endl;

  local_context = new CCM_Calculator_Context_impl(this,ccm_container); 
  calc_facet_adapter = NULL;
}

remote::CCM_Session_Calculator::
Calculator_impl::~Calculator_impl ()
{
  cout << "-Calculator_impl::~Calculator_impl()" << endl;
  delete local_component;
  delete local_context;
}

/*
 * Component Attributes
 */

CORBA::Long
remote::CCM_Session_Calculator::
Calculator_impl::SerNr ()
{
  cout << " Calculator_impl::SerNr() <get>" << endl;
  
  // convert parameter(s)

  // call local method
  int result = local_component->SerNr ();

  // convert result
  return CCM::int_to_CORBA_Long(result);
}

void 
remote::CCM_Session_Calculator::
Calculator_impl::SerNr (CORBA::Long sernr)
{
  cout << " Calculator_impl::SerNr() <set>" << endl;

  // convert parameter(s)
  int parameter_sernr = CCM::CORBA_Long_to_int(sernr);

  // call local method
  local_component->SerNr(parameter_sernr);

  // convert result
}


/*
 * ReleaseInformation (extensions to CCM)
 *
 * These methods provides strings that carries information about version
 * and creation date of a component. 
 */

char* 
remote::CCM_Session_Calculator::
Calculator_impl::getComponentVersion()
{
  cout << " Calculator_impl::getComponentVersion()" << endl;
  return CORBA::string_dup("0.1");        // String comes from the code generator
}

char* 
remote::CCM_Session_Calculator::
Calculator_impl::getComponentDate()
{
  cout << " Calculator_impl::getComponentDate()" << endl;
  return CORBA::string_dup("2003-02-20"); // String comes from the code generator
}

char* 
remote::CCM_Session_Calculator::
Calculator_impl::getComponentUUID()
{
  cout << " Calculator_impl::getComponentUUID()" << endl;
  return CORBA::string_dup("no UUID");  // String comes from the code generator
}


/*
 * Supported Interfaces
 */

// ::EuroCalculator

CORBA::Double
remote::CCM_Session_Calculator::
Calculator_impl::eur_to_ats (CORBA::Double eur)
{
  cout << " Calculator_impl::eur_to_ats()" << endl;

  // convert parameter(s)
  double parameter_eur = CCM::CORBA_Double_to_double(eur);

  // call local method
  double result = local_component->eur_to_ats(parameter_eur);

  // convert result
  return CCM::double_to_CORBA_Double(result);
}

CORBA::Double
remote::CCM_Session_Calculator::
Calculator_impl::ats_to_eur (CORBA::Double ats)
{
  cout << " Calculator_impl::ats_to_eur()" << endl;

  // convert parameter(s)
  double parameter_ats = CCM::CORBA_Double_to_double(ats);

  // call local method
  double result = local_component->ats_to_eur(parameter_ats);

  // convert return value
  return CCM::double_to_CORBA_Double(result);
}



/*
 * Equivalent IDL methods
 */

// facets

CalculatorFacade_ptr
remote::CCM_Session_Calculator::
Calculator_impl::provide_calc ()
{
  cout << " Calculator_impl::provide_calc()" << endl;

  if (calc_facet_adapter == 0) {
    calc_facet_adapter = new Calculator_calc_impl(local_component);
    CORBA::Object_var _facet_ref = 
      ccm_container->activate_facet(this, "calc",NULL/* _instance_for_facet_calc*/,
				 calc_facet_adapter);
    reference_for_facet_calc = CalculatorFacade::_narrow(_facet_ref);
  }
  return CalculatorFacade::_duplicate (reference_for_facet_calc);
}

// receptacles

void
remote::CCM_Session_Calculator::
Calculator_impl::connect_iUnit (IntegerFacet_ptr _value)
{
  cout << " Calculator_impl::connect_iUnit()" << endl;

  reference_for_receptacle_iUnit = IntegerFacet::_duplicate (_value);
}

IntegerFacet_ptr
remote::CCM_Session_Calculator::
Calculator_impl::disconnect_iUnit ()
{
  cout << " Calculator_impl::disconnect_iUnit()" << endl;

  IntegerFacet_var _res = IntegerFacet::_duplicate (reference_for_receptacle_iUnit);
  reference_for_receptacle_iUnit = IntegerFacet::_nil ();
  return _res._retn ();
}

IntegerFacet_ptr
remote::CCM_Session_Calculator::
Calculator_impl::get_connection_iUnit ()
{
  cout << " Calculator_impl::get_connection_iUnit()" << endl;

  return IntegerFacet::_duplicate (reference_for_receptacle_iUnit);
}


Components::Cookie *
remote::CCM_Session_Calculator::
Calculator_impl::connect_show (ShowFacet_ptr _value)
{
  cout << " Calculator_impl::connect_show()" << endl;

  Components::Cookie_var _ck = new CCM::Cookie_impl;
  _ck->CookieValue().replace (sizeof (CORBA::ULong), 
			      sizeof (CORBA::ULong), (CORBA::Octet *) &cookie_for_show);
  cookie_for_show++;
  CORBA::ULong _idx = receptacles_show.length ();
  receptacles_show.length (_idx + 1);
  receptacles_show[_idx].ck = _ck;
  receptacles_show[_idx].objref = ShowFacet::_duplicate (_value);
  return _ck._retn();
}

ShowFacet_ptr
remote::CCM_Session_Calculator::
Calculator_impl::disconnect_show (Components::Cookie * _value)
{
  cout << " Calculator_impl::disconnect_show()" << endl;

  CORBA::ULong _idx, _ck1, _ck2;
  if (!_value || _value->CookieValue().length() != sizeof (CORBA::ULong)) {
    throw Components::InvalidConnection();
  }

  _ck1 = * ((CORBA::ULong *) _value->CookieValue().get_buffer());

  for (_idx=0; _idx<receptacles_show.length(); _idx++) {
    _ck2 = * ((CORBA::ULong *) receptacles_show[_idx].ck->CookieValue().get_buffer());
    if (_ck1 == _ck2) break;
  }

  if (_idx == receptacles_show.length()) {
    throw Components::InvalidConnection();
  }

  ShowFacet_var _res = ShowFacet::_duplicate (receptacles_show[_idx].objref);

  for (;_idx<receptacles_show.length()-1; _idx++) {
    receptacles_show[_idx] = receptacles_show[_idx+1];
  }

  receptacles_show.length (_idx);
  return _res._retn();
}

Calculator::showConnections *
remote::CCM_Session_Calculator::
Calculator_impl::get_connections_show ()
{
  cout << " Calculator_impl::get_connections_show()" << endl;
  return new Calculator::showConnections(receptacles_show);
}

// no publishers

// no emitters

// no consumers

/*
 * Inherited Navigation interface
 */

CORBA::Object_ptr
remote::CCM_Session_Calculator::
Calculator_impl::provide_facet (const char * _name)
{
  cout << " Calculator_impl::provide_facet()" << endl;

  if (strcmp (_name, "calc") == 0) {
    return provide_calc ();
  }
  throw Components::InvalidName();
  return CORBA::Object::_nil ();
}

Components::FacetDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_all_facets ()
{
  cout << " Calculator_impl::get_all_facets()" << endl;
  // TODO
  return NULL;
}

Components::FacetDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_named_facets (const Components::NameList & _names)
{
  cout << " Calculator_impl::get_named_facets()" << endl;
  // TODO
  return NULL;
}

CORBA::Boolean
remote::CCM_Session_Calculator::
Calculator_impl::same_component (CORBA::Object_ptr _ref)
{
  cout << " Calculator_impl::same_component()" << endl;
  // TODO
  return false;
}

/*
 * Inherited Receptacles interface
 */

Components::Cookie *
remote::CCM_Session_Calculator::
Calculator_impl::connect (const char * _name, CORBA::Object_ptr _ref)
{
  cout << " Calculator_impl::connect()" << endl;

  if (strcmp (_name, "iUnit") == 0) {
    ::IntegerFacet_var _tref = ::IntegerFacet::_narrow (_ref);
    if (CORBA::is_nil (_tref) && !CORBA::is_nil (_ref)) {
      throw Components::InvalidConnection();
    }
    connect_iUnit (_tref);
    return 0;
  }

  if (strcmp (_name, "show") == 0) {
    ::ShowFacet_var _tref = ::ShowFacet::_narrow (_ref);
    if (CORBA::is_nil (_tref) && !CORBA::is_nil (_ref)) {
      throw Components::InvalidConnection();
    }
    return connect_show (_tref);
  }
  
  throw Components::InvalidName();
  return new CCM::Cookie_impl;
}

void
remote::CCM_Session_Calculator::
Calculator_impl::disconnect (const char * _name, Components::Cookie * _ck)
{
  cout << " Calculator_impl::disconnect()" << endl;

  if (strcmp (_name, "iUnit") == 0) {
    ::IntegerFacet_var _dummy;
    _dummy = disconnect_iUnit ();
    return;
  }
  
  if (strcmp (_name, "show") == 0) {
    ::ShowFacet_var _dummy;
    _dummy = disconnect_show (_ck);
    return;
  }

  throw Components::InvalidName();
}

Components::ConnectionDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_connections (const char * _name)
{
  cout << " Calculator_impl::get_connections()" << endl;
  // TODO
  return NULL;
}

Components::ReceptacleDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_all_receptacles ()
{
  cout << " Calculator_impl::get_all_receptacles()" << endl;
  // TODO
  return NULL;
}

Components::ReceptacleDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_named_receptacles (const Components::NameList & _names)
{
  cout << " Calculator_impl::get_named_receptacles()" << endl;
  // TODO
  return NULL;
}

/*
 * Inherited Events interface
 */

Components::EventConsumerBase_ptr
remote::CCM_Session_Calculator::
Calculator_impl::get_consumer (const char * _name)
{
  cout << " Calculator_impl::get_consumer()" << endl;

  throw Components::InvalidName();
  return Components::EventConsumerBase::_nil ();
}

Components::ConsumerDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_all_consumers ()
{
  cout << " Calculator_impl::get_all_consumers()" << endl;

  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_consumers (_allnames);
}

Components::ConsumerDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_named_consumers (const Components::NameList & _names)
{
  cout << " Calculator_impl::get_named_consumers()" << endl;

  Components::ConsumerDescriptions_var _res = new Components::ConsumerDescriptions;
  _res->length (_names.length());

  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }

  return _res._retn();
}

Components::Cookie *
remote::CCM_Session_Calculator::
Calculator_impl::subscribe (const char * _name, Components::EventConsumerBase_ptr _ref)
{
  cout << " Calculator_impl::subscribe()" << endl;

  throw Components::InvalidName();
  return new CCM::Cookie_impl;
}

void
remote::CCM_Session_Calculator::
Calculator_impl::unsubscribe (const char * _name, Components::Cookie * _ck)
{
  cout << " Calculator_impl::unsubscribe()" << endl;

  throw Components::InvalidName();
}

Components::PublisherDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_all_publishers ()
{
  cout << " Calculator_impl::get_all_publishers()" << endl;

  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_publishers (_allnames);
}

Components::PublisherDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_named_publishers (const Components::NameList & _names)
{
  cout << " Calculator_impl::get_named_publishers()" << endl;

  Components::PublisherDescriptions_var _res = new Components::PublisherDescriptions;
  _res->length (_names.length());

  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }

  return _res._retn();
}

void
remote::CCM_Session_Calculator::
Calculator_impl::connect_consumer (const char * _name, Components::EventConsumerBase_ptr _ref)
{
  cout << " Calculator_impl::connect_consumer()" << endl;
 
  throw Components::InvalidName();
}

Components::EventConsumerBase_ptr
remote::CCM_Session_Calculator::
Calculator_impl::disconnect_consumer (const char * _name)
{
  cout << " Calculator_impl::disconnect_consumer()" << endl;

  throw Components::InvalidName();
}

Components::EmitterDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_all_emitters ()
{
  cout << " Calculator_impl::get_all_emitters()" << endl;

  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_emitters (_allnames);
}

Components::EmitterDescriptions *
remote::CCM_Session_Calculator::
Calculator_impl::get_named_emitters (const Components::NameList & _names)
{
  cout << " Calculator_impl::get_named_emitters()" << endl;

  Components::EmitterDescriptions_var _res = new Components::EmitterDescriptions;
  _res->length (_names.length());

  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }

  return _res._retn();
}

/*
 * Inherited CCMObject interface
 */

CORBA::Object_ptr
remote::CCM_Session_Calculator::
Calculator_impl::get_component_def ()
{
  cout << " Calculator_impl::get_component_def()" << endl;
  // TODO
  return CORBA::Object::_nil ();
}

Components::CCMHome_ptr
remote::CCM_Session_Calculator::
Calculator_impl::get_ccm_home ()
{
  cout << " Calculator_impl::get_ccm_home()" << endl;
  return ccm_container->get_reference_for_home ();
}

void
remote::CCM_Session_Calculator::
Calculator_impl::configuration_complete ()
{
  cout << " Calculator_impl::configuration_complete()" << endl;

  ccm_container->configuration_complete (this); 
  local_component->set_session_context(local_context);
  local_component->ccm_activate ();
}

Components::ComponentPortDescription *
remote::CCM_Session_Calculator::
Calculator_impl::get_all_ports ()
{
  cout << " Calculator_impl::get_all_ports()" << endl;
  // TODO
  return NULL;
}

void
remote::CCM_Session_Calculator::
Calculator_impl::remove ()
{
  cout << " Calculator_impl::remove()" << endl;

  local_component->ccm_passivate();
  local_component->ccm_remove();

  Components::CCMHome_var myhome = get_ccm_home ();
  Components::CCMObject_var myself = ccm_container->get_reference_for_component (this);
  myhome->remove_component (myself);
}

/*
 * Overload default implementation
 */

CORBA::Object_ptr
remote::CCM_Session_Calculator::
Calculator_impl::_get_component ()
{
  cout << " Calculator_impl::_get_component()" << endl;
  return ccm_container->get_reference_for_component (this);
}





//============================================================================
// Facet calc remote adapter 
//============================================================================

remote::CCM_Session_Calculator::
Calculator_calc_impl::Calculator_calc_impl(
		   local::CCM_Session_Calculator::CCM_Calculator_impl* lc)
  : local_component(lc)
{
  cout << "+Calculator_calc_impl::Calculator_calc_impl()" << endl;
  
  local_facet = local_component->get_calc();
}

remote::CCM_Session_Calculator::
Calculator_calc_impl::~Calculator_calc_impl ()
{
  cout << "-Calculator_calc_impl::~Calculator_calc_impl()" << endl;
  delete local_facet;
}


CORBA::Long
remote::CCM_Session_Calculator::
Calculator_calc_impl::add (CORBA::Long a, CORBA::Long b)
{
  cout << " Calculator_calc_impl::add()" << endl;
  
  // convert parameter(s)
  int parameter_a = CCM::CORBA_Long_to_int(a);
  int parameter_b = CCM::CORBA_Long_to_int(b);
  
  // call local method
  int result = local_facet->add(parameter_a,parameter_b);
  
  // convert result
  return CCM::int_to_CORBA_Long(result);
}

CORBA::Long
remote::CCM_Session_Calculator::
Calculator_calc_impl::sub(CORBA::Long a, CORBA::Long b)
{
  cout << " Calculator_calc_impl::sub()" << endl;

  // convert parameter(s)
  int parameter_a = CCM::CORBA_Long_to_int(a);
  int parameter_b = CCM::CORBA_Long_to_int(b);

  // call local method
  int result = local_facet->sub(parameter_a,parameter_b);
  
  // convert result
  return CCM::int_to_CORBA_Long(result);
}

void
remote::CCM_Session_Calculator::
Calculator_calc_impl::print (const char* s)
{
  cout << " Calculator_calc_impl::print()" << endl;

  // convert parameter(s)
  string parameter_s(s);

  // call local method
  local_facet->print(s);

  // convert result
}

void
remote::CCM_Session_Calculator::
Calculator_calc_impl::write (const Record& r)
{
  cout << " Calculator_calc_impl::write()" << endl;

  // convert parameter(s)
  local::Record parameter_r;
  parameter_r.s1 = r.s1;
  parameter_r.s2 = r.s2;
  parameter_r.s3 = r.s3;

  // call local method
  local_facet->write(parameter_r);

  // convert result
}

RecordSet*
remote::CCM_Session_Calculator::
Calculator_calc_impl::read (const Record& r)
{
  cout << " Calculator_calc_impl::read()" << endl;
  // convert parameter(s)
  local::Record parameter_r;
  parameter_r.s1 = r.s1;
  parameter_r.s2 = r.s2;
  parameter_r.s3 = r.s3;

  // call local method
  local::RecordSet* record_set = local_facet->read(parameter_r);
  
  // convert result
  RecordSet_var result = new RecordSet();
  int NumberOfElements = record_set->size();
  result->length(NumberOfElements);
  for(int i=0; i<NumberOfElements; ++i) {
    local::Record record = (*record_set)[i];
    result[i].s1 = CCM::string_to_char_ptr(record.s1);
    result[i].s2 = CCM::string_to_char_ptr(record.s2);
    result[i].s3 = CCM::string_to_char_ptr(record.s3);
  }

  return result._retn();
}


//============================================================================
// Receptacle iUnit remote adapter
//============================================================================
  
remote::CCM_Session_Calculator::
iUnit_ReceptacleAdapter::iUnit_ReceptacleAdapter(Calculator_impl* c)
  : component_adapter(c)
{
  cout << "+iUnit_ReceptacleAdapter->iUnit_ReceptacleAdapter()" << endl;
}

remote::CCM_Session_Calculator::
iUnit_ReceptacleAdapter::~iUnit_ReceptacleAdapter()
{
  cout << "-iUnit_ReceptacleAdapter->~iUnit_ReceptacleAdapter()" << endl;
}
  
int 
remote::CCM_Session_Calculator::
iUnit_ReceptacleAdapter::add(const int a, const int b)
{
  cout << " iUnit_ReceptacleAdapter->add()" << endl;

  // convert parameter
  CORBA::Long parameter_a = CCM::int_to_CORBA_Long(a);
  CORBA::Long parameter_b = CCM::int_to_CORBA_Long(b);

  // call method on remote receptacle
  CORBA::Long result = 
    component_adapter->get_connection_iUnit()->add(parameter_a,parameter_b);

  // convert result
  return CCM::CORBA_Long_to_int(result);
}


int
remote::CCM_Session_Calculator::
iUnit_ReceptacleAdapter::sub(const int a, const int b)
{
  cout << " iUnit_ReceptacleAdapter->sub()" << endl;

  // convert parameter
  CORBA::Long parameter_a = CCM::int_to_CORBA_Long(a);
  CORBA::Long parameter_b = CCM::int_to_CORBA_Long(b);

    // call method on remote receptacle
  CORBA::Long result = 
    component_adapter->get_connection_iUnit()->sub(parameter_a,parameter_b);

  return CCM::CORBA_Long_to_int(result);
}


//============================================================================
// Receptacle show remote adapter
//============================================================================
  
remote::CCM_Session_Calculator::
show_ReceptacleAdapter::show_ReceptacleAdapter(Calculator_impl* c)
  : component_adapter(c)
{
  cout << "+show_ReceptacleAdapter->show_ReceptacleAdapter()" << endl;
}

remote::CCM_Session_Calculator::
show_ReceptacleAdapter::~show_ReceptacleAdapter()
{
  cout << "-show_ReceptacleAdapter->~show_ReceptacleAdapter()" << endl;
}
  
void
remote::CCM_Session_Calculator::
show_ReceptacleAdapter::print_string(const string& msg)
{
  cout << " show_ReceptacleAdapter->print_string(" << msg << ")" << endl;

  // convert parameter
  char* parameter_msg = CCM::string_to_char_ptr(msg);

  // call method on remote receptacle
  
  CORBA::string_free(parameter_msg);
  // convert result
}



//============================================================================
// Component Context 
//============================================================================

remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::CCM_Calculator_Context_impl(Calculator_impl* c, 
							 CCM::SessionContainer* co)
  : component_adapter(c), ccm_container(co)
{
  cout << "+CCM_Calculator_Context_impl->CCM_Calculator_Context_impl()" << endl;

  iunit_adapter = SmartPtr<local::CCM_IntegerFacet>(dynamic_cast<local::CCM_IntegerFacet*>
                                    (new iUnit_ReceptacleAdapter(component_adapter)));
}

remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::~CCM_Calculator_Context_impl()
{
  cout << "-CCM_Calculator_Context_impl->~CCM_Calculator_Context_impl()" << endl;
}

SmartPtr<local::CCM_IntegerFacet> 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::get_connection_iUnit()
{
  cout << " CCM_Calculator_Context_impl->get_connection_iUnit()" << endl;
  return iunit_adapter;
}

local::CCM_Session_Calculator::showConnections&  
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::get_connections_show()
{
  cout << " CCM_Calculator_Context_impl->get_connections_show()" << endl;
  return receptcales_show;
}

localComponents::Principal* 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::get_caller_principal()
{
  cout << " CCM_Calculator_Context_impl->get_caller_principal()" << endl;
  // TODO
  return NULL;
}

SmartPtr<localComponents::HomeExecutorBase> 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::get_CCM_home()
{
  cout << " CCM_Calculator_Context_impl->get_CCM_home()" << endl;
  // TODO
  return SmartPtr<localComponents::HomeExecutorBase>();
}

bool 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::get_rollback_only()
  throw (localComponents::IllegalState)
{
  cout << " CCM_Calculator_Context_impl->get_rollback_only()" << endl;
  // TODO
  return false;
}

SmartPtr<localTransaction::UserTransaction> 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::get_user_transaction()
  throw (localComponents::IllegalState)
{
  cout << " CCM_Calculator_Context_impl->get_user_transaction()" << endl;
  // TODO
  return SmartPtr<localTransaction::UserTransaction>();
}

bool 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::is_caller_in_role(const string& role)
{
  cout << " CCM_Calculator_Context_impl->is_caller_in_role()" << endl;
  // TODO
  return false;
}

void 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::set_rollback_only()
  throw (localComponents::IllegalState)
{
  cout << " CCM_Calculator_Context_impl->set_rollback_only()" << endl;
  // TODO
}

SmartPtr<localComponents::Object> 
remote::CCM_Session_Calculator::
CCM_Calculator_Context_impl::get_CCM_object()
  throw(localComponents::IllegalState)
{
  cout << " CCM_Calculator_Context_impl->get_CCM_object()" << endl;
  // TODO
  return SmartPtr<localComponents::Object>();
}

