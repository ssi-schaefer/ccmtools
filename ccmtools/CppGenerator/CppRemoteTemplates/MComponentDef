/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

#ifndef __%(Identifier)s__CCM__H__
#define __%(Identifier)s__CCM__H__

#include <WX/Utils/smartptr.h>
#include <WX/Utils/debug.h> 
#include <CCM/CCMContainer.h>

#include <%(IdlFileNamespace)s%(Identifier)s.h>

%(MSupportsDefInclude)s
%(MProvidesDefInclude)s
%(MUsesDefInclude)s

#include <CCM_Local/%(IncludeNamespace)s/%(Identifier)s_gen.h> 
#include <CCM_Local/%(IncludeNamespace)s/%(Identifier)s_share.h> 

%(OpenNamespace)s

  //============================================================================
  // Component remote adapter 
  //============================================================================
  class %(Identifier)s_impl :
      virtual public POA_%(ShortNamespace)s%(Identifier)s,
      virtual public PortableServer::RefCountServantBase
  {
      friend class CCM_%(Identifier)s_Context_impl;

    private:
      CCM_Local%(Namespace)s::CCM_%(Identifier)s* local_adapter;
      CCM_Local%(Namespace)s::CCM_%(Identifier)s_Context* local_context;
      CCM::SessionContainer* ccm_container;

%(MProvidesDefAdapterVariable)s
%(MUsesDefAdapterVariable)s

    public:
      %(Identifier)s_impl(CCM_Local%(Namespace)s::CCM_%(Identifier)s*, 
		      CCM::SessionContainer *);
      virtual ~%(Identifier)s_impl ();

      /*
       * Component Attributes
       */
%(MAttributeDefEqInterfaceHeader)s

      /*
       * Supported Interfaces
       */
%(MSupportsDefEqInterfaceHeader)s

      /*
       * Equivalent IDL methods
       */

       // Facets
%(MProvidesDefEqInterfaceHeader)s

      // Receptacles
%(MUsesDefEqInterfaceHeader)s
%(MUsesDefGetAdapterHeader)s

      // Publishers not implemented

      // Emitters not implemented

      // Consumers not implemented

      /*
       * Inherited Navigation interface
       */
      CORBA::Object_ptr provide_facet(const char *);
      Components::FacetDescriptions* get_all_facets();
      Components::FacetDescriptions* get_named_facets(const Components::NameList &);
      CORBA::Boolean same_component(CORBA::Object_ptr ref);

      /*
       * Inherited Receptacles interface
       */
      Components::Cookie* connect(const char*, CORBA::Object_ptr);
      void disconnect(const char* name, Components::Cookie*);
      Components::ConnectionDescriptions* get_connections(const char*);
      Components::ReceptacleDescriptions* get_all_receptacles();
      Components::ReceptacleDescriptions* get_named_receptacles(const Components::NameList &);

      /*
       * Inherited Events interface
       */
      Components::EventConsumerBase_ptr get_consumer(const char*);
      Components::Cookie* subscribe(const char*, Components::EventConsumerBase_ptr);
      void unsubscribe(const char* name, Components::Cookie*);
      void connect_consumer(const char*, Components::EventConsumerBase_ptr);
      Components::EventConsumerBase_ptr disconnect_consumer(const char*);
      Components::ConsumerDescriptions* get_all_consumers();
      Components::ConsumerDescriptions* get_named_consumers(const Components::NameList&);
      Components::EmitterDescriptions* get_all_emitters();
      Components::EmitterDescriptions* get_named_emitters (const Components::NameList&);
      Components::PublisherDescriptions* get_all_publishers();
      Components::PublisherDescriptions* get_named_publishers(const Components::NameList&);

      /*
       * Inherited CCMObject interface
       */
      CORBA::Object_ptr get_component_def();
      Components::CCMHome_ptr get_ccm_home();
      void configuration_complete();
      void remove();
      Components::ComponentPortDescription* get_all_ports();

      /*
       * Overload default implementation
       */
      CORBA::Object_ptr _get_component();
  };


  //==========================================================================
  // Context adapter class
  //==========================================================================
  class CCM_%(Identifier)s_Context_impl
    : public CCM_Local%(Namespace)s::CCM_%(Identifier)s_Context
    {
    private:
      %(Identifier)s_impl* component_adapter;
      CCM::SessionContainer* ccm_container;

%(MUsesDefLocalAdapterHeader)s	
      
    public:
      CCM_%(Identifier)s_Context_impl(%(Identifier)s_impl* g, CCM::SessionContainer* co);
      virtual ~CCM_%(Identifier)s_Context_impl();
      
%(MUsesDefGetLocalAdapterHeader)s
      
      /**
       * Methods from the CCMContext interface
       **/

      LocalComponents::Principal* get_caller_principal();
      
      LocalComponents::HomeExecutorBase* get_CCM_home();
      
      bool get_rollback_only() 
	throw (LocalComponents::IllegalState);
      
      LocalTransaction::UserTransaction* get_user_transaction()	
	throw (LocalComponents::IllegalState);
      
      bool is_caller_in_role(const std::string& role);
      
      void set_rollback_only()
	throw (LocalComponents::IllegalState);
      
      /**
       * Methods from the SessionContext interface
       **/

      LocalComponents::Object* get_CCM_object()
	throw (LocalComponents::IllegalState);
    };


%(MProvidesDefAdapterHeader)s
%(MUsesDefAdapterHeader)s
%(CloseNamespace)s
#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

#include "%(Identifier)s_remote.h"

using namespace std;
using namespace WX::Utils;

%(OpenNamespace)s

//============================================================================
// Component remote adapter 
//============================================================================

%(Identifier)s_impl::%(Identifier)s_impl(CCM_Local%(Namespace)s::CCM_%(Identifier)s* i, CCM::SessionContainer * c)
  : local_adapter(i), ccm_container (c)
{
  DEBUGNL("+%(Identifier)s_impl::%(Identifier)s_impl()");
  local_context = new CCM_%(Identifier)s_Context_impl(this,ccm_container); 
%(MProvidesDefAdapterVariableInit)s
}

%(Identifier)s_impl::~%(Identifier)s_impl ()
{
  DEBUGNL("-%(Identifier)s_impl::~%(Identifier)s_impl()");
  delete local_adapter; 
  delete local_context;
}

/*
 * Component Attributes
 */
%(MAttributeDefEqInterfaceImpl)s

/*
 * Supported Interfaces
 */

%(MSupportsDefEqInterfaceImpl)s

/*
 * Equivalent IDL methods
 */

// Facets

%(MProvidesDefEqInterfaceImpl)s


// Receptacles

%(MUsesDefEqInterfaceImpl)s


// Publishers not supported

// Emitters not supported

// Consumers not suppored


/*
 * Inherited Navigation interface
 */

CORBA::Object_ptr
%(Identifier)s_impl::provide_facet (const char* name)
{
  DEBUGNL(" %(Identifier)s_impl::provide_facet()");

%(MProvidesDefNavigationFacet)s
  throw Components::InvalidName();
  return CORBA::Object::_nil ();
}

Components::FacetDescriptions *
%(Identifier)s_impl::get_all_facets ()
{
  DEBUGNL(" %(Identifier)s_impl::get_all_facets()");
  // TODO
  return NULL;
}

Components::FacetDescriptions *
%(Identifier)s_impl::get_named_facets (const Components::NameList & _names)
{
  DEBUGNL(" %(Identifier)s_impl::get_named_facets()");
  // TODO
  return NULL;
}

CORBA::Boolean
%(Identifier)s_impl::same_component (CORBA::Object_ptr _ref)
{
  DEBUGNL(" %(Identifier)s_impl::same_component()");
  // TODO
  return false;
}

/*
 * Inherited Receptacles interface
 */

Components::Cookie *
%(Identifier)s_impl::connect (const char* name, CORBA::Object_ptr ref)
{
  DEBUGNL(" %(Identifier)s_impl::connect()");
%(MUsesDefReceptacleConnect)s
  throw Components::InvalidName();
  return new CCM::Cookie_impl;
}

void
%(Identifier)s_impl::disconnect (const char* name, Components::Cookie* _ck)
{
  DEBUGNL(" %(Identifier)s_impl::disconnect()");
%(MUsesDefReceptacleDisconnect)s
  throw Components::InvalidName();
}

Components::ConnectionDescriptions *
%(Identifier)s_impl::get_connections (const char * _name)
{
  DEBUGNL(" %(Identifier)s_impl::get_connections()");
  // TODO
  return NULL;
}

Components::ReceptacleDescriptions *
%(Identifier)s_impl::get_all_receptacles ()
{
  DEBUGNL(" %(Identifier)s_impl::get_all_receptacles()");
  // TODO
  return NULL;
}

Components::ReceptacleDescriptions *
%(Identifier)s_impl::get_named_receptacles (const Components::NameList & _names)
{
  DEBUGNL(" %(Identifier)s_impl::get_named_receptacles()");
  // TODO
  return NULL;
}

/*
 * Inherited Events interface
 */

Components::EventConsumerBase_ptr
%(Identifier)s_impl::get_consumer (const char * _name)
{
  DEBUGNL(" %(Identifier)s_impl::get_consumer()");
  throw Components::InvalidName();
  return Components::EventConsumerBase::_nil ();
}

Components::ConsumerDescriptions *
%(Identifier)s_impl::get_all_consumers ()
{
  DEBUGNL(" %(Identifier)s_impl::get_all_consumers()");
  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_consumers (_allnames);
}

Components::ConsumerDescriptions *
%(Identifier)s_impl::get_named_consumers (const Components::NameList & _names)
{
  DEBUGNL(" %(Identifier)s_impl::get_named_consumers()");
  Components::ConsumerDescriptions_var _res = new Components::ConsumerDescriptions;
  _res->length (_names.length());
  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }
  return _res._retn();
}

Components::Cookie *
%(Identifier)s_impl::subscribe (const char * _name, Components::EventConsumerBase_ptr _ref)
{
  DEBUGNL(" %(Identifier)s_impl::subscribe()");
  throw Components::InvalidName();
  return new CCM::Cookie_impl;
}

void
%(Identifier)s_impl::unsubscribe (const char * _name, Components::Cookie * _ck)
{
  DEBUGNL(" %(Identifier)s_impl::unsubscribe()");
  throw Components::InvalidName();
}

Components::PublisherDescriptions *
%(Identifier)s_impl::get_all_publishers ()
{
  DEBUGNL(" %(Identifier)s_impl::get_all_publishers()");
  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_publishers (_allnames);
}

Components::PublisherDescriptions *
%(Identifier)s_impl::get_named_publishers (const Components::NameList & _names)
{
  DEBUGNL(" %(Identifier)s_impl::get_named_publishers()");
  Components::PublisherDescriptions_var _res = new Components::PublisherDescriptions;
  _res->length (_names.length());
  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }
  return _res._retn();
}

void
%(Identifier)s_impl::connect_consumer (const char * _name, Components::EventConsumerBase_ptr _ref)
{
  DEBUGNL(" %(Identifier)s_impl::connect_consumer()");
  throw Components::InvalidName();
}

Components::EventConsumerBase_ptr
%(Identifier)s_impl::disconnect_consumer (const char * _name)
{
  DEBUGNL(" %(Identifier)s_impl::disconnect_consumer()");
  throw Components::InvalidName();
}

Components::EmitterDescriptions *
%(Identifier)s_impl::get_all_emitters ()
{
  DEBUGNL(" %(Identifier)s_impl::get_all_emitters()");
  Components::NameList _allnames;
  _allnames.length (0);
  return get_named_emitters (_allnames);
}

Components::EmitterDescriptions *
%(Identifier)s_impl::get_named_emitters (const Components::NameList & _names)
{
  DEBUGNL(" %(Identifier)s_impl::get_named_emitters()");
  Components::EmitterDescriptions_var _res = new Components::EmitterDescriptions;
  _res->length (_names.length());
  for (CORBA::ULong _idx=0; _idx<_names.length(); _idx++) {
    throw Components::InvalidName();
  }
  return _res._retn();
}


/*
 * Inherited CCMObject interface
 */

CORBA::Object_ptr
%(Identifier)s_impl::get_component_def ()
{
  DEBUGNL(" %(Identifier)s_impl::get_component_def()");
  // TODO
  return CORBA::Object::_nil ();
}

Components::CCMHome_ptr
%(Identifier)s_impl::get_ccm_home ()
{
  DEBUGNL(" %(Identifier)s_impl::get_ccm_home()");
  return ccm_container->get_reference_for_home ();
}

void
%(Identifier)s_impl::configuration_complete ()
{
  DEBUGNL(" %(Identifier)s_impl::configuration_complete()");
  ccm_container->configuration_complete (this); 
  local_adapter->set_session_context(local_context);
  local_adapter->ccm_activate ();
}

Components::ComponentPortDescription *
%(Identifier)s_impl::get_all_ports ()
{
  DEBUGNL(" %(Identifier)s_impl::get_all_ports()");
  // TODO
  return NULL;
}

void
%(Identifier)s_impl::remove ()
{
  DEBUGNL(" %(Identifier)s_impl::remove()");
  local_adapter->ccm_passivate();
  local_adapter->ccm_remove();
  Components::CCMHome_var myhome = get_ccm_home ();
  Components::CCMObject_var myself = ccm_container->get_reference_for_component (this);
  myhome->remove_component (myself);
}


/*
 * Overload default implementation
 */

CORBA::Object_ptr
%(Identifier)s_impl::_get_component ()
{
  DEBUGNL(" %(Identifier)s_impl::_get_component()");
  return ccm_container->get_reference_for_component (this);
}


//============================================================================
// Component Context 
//============================================================================

CCM_%(Identifier)s_Context_impl::
CCM_%(Identifier)s_Context_impl(%(Identifier)s_impl* c, CCM::SessionContainer* co)
  : component_adapter(c), ccm_container(co)
{
  DEBUGNL("+CCM_%(Identifier)s_Context_impl->CCM_%(Identifier)s_Context_impl()");

%(MUsesDefContextInit)s	
}


CCM_%(Identifier)s_Context_impl::~CCM_%(Identifier)s_Context_impl()
{
  DEBUGNL("-CCM_%(Identifier)s_Context_impl->~CCM_%(Identifier)s_Context_impl()");
}

%(MUsesDefContextGetConnection)s

LocalComponents::Principal* 
CCM_%(Identifier)s_Context_impl::get_caller_principal()
{
  DEBUGNL(" CCM_%(Identifier)s_Context_impl->get_caller_principal()");
  // TODO
  return NULL;
}

LocalComponents::HomeExecutorBase* 
CCM_%(Identifier)s_Context_impl::get_CCM_home()
{
  DEBUGNL(" CCM_%(Identifier)s_Context_impl->get_CCM_home()");
  // TODO
  return NULL;
}

bool 
CCM_%(Identifier)s_Context_impl::get_rollback_only()
  throw (LocalComponents::IllegalState)
{
  DEBUGNL(" CCM_%(Identifier)s_Context_impl->get_rollback_only()");
  // TODO
  return false;
}

LocalTransaction::UserTransaction*
CCM_%(Identifier)s_Context_impl::get_user_transaction()
  throw (LocalComponents::IllegalState)
{
  DEBUGNL(" CCM_%(Identifier)s_Context_impl->get_user_transaction()");
  // TODO
  return NULL;
}

bool 
CCM_%(Identifier)s_Context_impl::is_caller_in_role(const string& role)
{
  DEBUGNL(" CCM_%(Identifier)s_Context_impl->is_caller_in_role()");
  // TODO
  return false;
}

void 
CCM_%(Identifier)s_Context_impl::set_rollback_only()
  throw (LocalComponents::IllegalState)
{
  DEBUGNL(" CCM_%(Identifier)s_Context_impl->set_rollback_only()");
  // TODO
}

LocalComponents::Object*
CCM_%(Identifier)s_Context_impl::get_CCM_object()
  throw(LocalComponents::IllegalState)
{
  DEBUGNL(" CCM_%(Identifier)s_Context_impl->get_CCM_object()");
  // TODO
  return NULL;
}


%(MProvidesDefAdapterImpl)s


%(MUsesDefAdapterImpl)s


%(CloseNamespace)s



