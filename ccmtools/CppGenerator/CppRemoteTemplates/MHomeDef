//============================================================================
// This file was automatically generated by CCM Tools. 
// DO NOT EDIT!
//
// Template: MHomeDef (header file)
// Identifier=%(Identifier)s 
// ComponentType=%(ComponentType)s
//============================================================================

#ifndef __%(Identifier)s__REMOTE__H__
#define __%(Identifier)s__REMOTE__H__

#include "%(ComponentType)s_remote.h"

namespace CCM_Remote {
namespace CCM_Session_%(ComponentType)s {

  //==========================================================================
  // %(Identifier)s adapter
  //==========================================================================

  class %(Identifier)s_impl :
    virtual public POA_%(Identifier)s,
    virtual public PortableServer::RefCountServantBase
    {
    private:
      local::CCM_Session_%(ComponentType)s::CCM_%(Identifier)s* local_home;
      CCM::SessionContainer* ccm_container;
      
    public:
      %(Identifier)s_impl(CCM::SessionContainer* c);
      virtual ~%(Identifier)s_impl();

      /*
       * Implicit operations
       */

      %(ComponentType)s_ptr create ();

      /*
       * Explicit operations
       */

      %(MFactoryDefHeader)s

      /*
       * Inherited CCMHome interface
       */

      CORBA::Object_ptr get_component_def ();
      CORBA::Object_ptr get_home_def ();
      void remove_component (Components::CCMObject_ptr comp);

      /*
       * Inherited KeylessCCMHome interface
       */

      Components::CCMObject_ptr create_component ();
  };
 
} // /namespace CCM_Session_%(ComponentType)s
} // /namespace CCM_Remote
#endif


<<<<<<<SPLIT>>>>>>>
//============================================================================
// This file was automatically generated by CCM Tools. 
// DO NOT EDIT!
//
// Template: MHomeDef (implementation file)
// Identifier=%(Identifier)s 
// ComponentType=%(ComponentType)s
//============================================================================

#include "%(Identifier)s_remote.h"

using namespace std;
using namespace CCM_Utils;

//============================================================================
// Component home adapter
//============================================================================

CCM_Remote::CCM_Session_%(ComponentType)s::
%(Identifier)s_impl::%(Identifier)s_impl (CCM::SessionContainer* c)
  : ccm_container (c)
{
  DEBUGNL("+%(Identifier)s_impl::%(Identifier)s_impl()");
  local_home = dynamic_cast<local::CCM_Session_%(ComponentType)s::CCM_%(Identifier)s*>
    (create_%(Identifier)s());
}

CCM_Remote::CCM_Session_%(ComponentType)s::
%(Identifier)s_impl::~%(Identifier)s_impl ()
{
  DEBUGNL("-%(Identifier)s_impl::~%(Identifier)s_impl()");
  delete local_home;
}

/*
 * Implicit operations
 */

%(ComponentType)s_ptr
CCM_Remote::CCM_Session_%(ComponentType)s::
%(Identifier)s_impl::create ()
{
  DEBUGNL(" %(Identifier)s_impl::create()");

  // create the local_component
  CCM_Local::CCM_Session_%(ComponentType)s::CCM_%(ComponentType)s_impl* local_component = 
    dynamic_cast<CCM_Local::CCM_Session_%(ComponentType)s::CCM_%(ComponentType)s_impl*>(local_home->create());

  // create component remote adapter
  PortableServer::ServantBase_var component_adapter =
    new %(ComponentType)s_impl(local_component, ccm_container);

  Components::CCMObject_var co = 
    ccm_container->activate_component(local_component,component_adapter.in()); 
  return %(ComponentType)s::_narrow(co);
}

/*
 * Explicit operations
 */

%(MFactoryDefImpl)s

/*
 * Inherited CCMHome interface
 */

CORBA::Object_ptr
CCM_Remote::CCM_Session_%(ComponentType)s::
%(Identifier)s_impl::get_component_def ()
{
  DEBUGNL(" %(Identifier)s_impl::get_component_def()");
  // TODO
  return CORBA::Object::_nil ();
}

CORBA::Object_ptr
CCM_Remote::CCM_Session_%(ComponentType)s::
%(Identifier)s_impl::get_home_def ()
{
  DEBUGNL(" %(Identifier)s_impl::get_home_def()");
  // TODO
  return CORBA::Object::_nil ();
}

void
CCM_Remote::CCM_Session_%(ComponentType)s::
%(Identifier)s_impl::remove_component (Components::CCMObject_ptr _co)
{
  DEBUGNL(" %(Identifier)s_impl::remove_component()");

  PortableServer::ServantBase_var _cs = ccm_container->get_skeleton_for_reference(_co);
  // TODO
 
  ccm_container->deactivate_component(_cs);
}

/*
 * Inherited KeylessCCMHome interface
 */

Components::CCMObject_ptr
CCM_Remote::CCM_Session_%(ComponentType)s::
%(Identifier)s_impl::create_component ()
{
  DEBUGNL(" %(Identifier)s_impl::create_component()");
  return create ();
}



