/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

#ifndef __%(Identifier)s__REMOTE__H__
#define __%(Identifier)s__REMOTE__H__

#include "%(ComponentType)s_remote.h"
#include <CCM_Local/%(IncludeNamespace)s/%(Identifier)s_gen.h>
#include <CCM_Local/%(IncludeNamespace)s/%(Identifier)s_app.h>

%(OpenNamespace)s

  //==========================================================================
  // %(Identifier)s adapter
  //==========================================================================

  class %(Identifier)s_impl :
    virtual public %(ShortNamespace)sPOA_%(Identifier)s,
    virtual public PortableServer::RefCountServantBase
    {
    private:
      CCM_Local::%(Namespace)s::CCM_%(Identifier)s* local_home;
      CCM::SessionContainer* ccm_container;
      
    public:
      %(Identifier)s_impl(CCM::SessionContainer* c);
      virtual ~%(Identifier)s_impl();

      /*
       * Implicit operations
       */

      ::%(ShortNamespace)s%(ComponentType)s_ptr create ();

      /*
       * Explicit operations
       */

      %(MFactoryDefHeader)s

      /*
       * Inherited CCMHome interface
       */

      CORBA::Object_ptr get_component_def ();
      CORBA::Object_ptr get_home_def ();
      void remove_component (Components::CCMObject_ptr comp);

      /*
       * Inherited KeylessCCMHome interface
       */

      Components::CCMObject_ptr create_component ();
  };
 
%(CloseNamespace)s

//==============================================================================
// Remote entry point
//==============================================================================
extern "C" {
  int
  deploy_%(Identifier)s(CORBA::ORB_ptr orb, char* registration_name);
}

#endif


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

// Mico includes
#include <CORBA.h>
#include <coss/CosNaming.h>

#include "%(Identifier)s_remote.h"

using namespace std;
using namespace CCM_Utils;

%(OpenNamespace)s

//============================================================================
// Component home adapter
//============================================================================

%(Identifier)s_impl::%(Identifier)s_impl (CCM::SessionContainer* c)
  : ccm_container (c)
{
  DEBUGNL("+%(Identifier)s_impl::%(Identifier)s_impl()");
  local_home = dynamic_cast<CCM_Local::%(Namespace)s::CCM_%(Identifier)s*>
    (create_%(Identifier)s());
}

%(Identifier)s_impl::~%(Identifier)s_impl ()
{
  DEBUGNL("-%(Identifier)s_impl::~%(Identifier)s_impl()");
  delete local_home;
}

/*
 * Implicit operations
 */

::%(ShortNamespace)s%(ComponentType)s_ptr
%(Identifier)s_impl::create ()
{
  DEBUGNL(" %(Identifier)s_impl::create()");

  // create the local_component
  CCM_Local::%(Namespace)s::CCM_%(ComponentType)s_impl* local_component = 
    dynamic_cast<CCM_Local::%(Namespace)s::CCM_%(ComponentType)s_impl*>(local_home->create());

  // create component remote adapter
  PortableServer::ServantBase_var component_adapter =
    new %(ComponentType)s_impl(local_component, ccm_container);

  Components::CCMObject_var co = 
    ccm_container->activate_component(local_component,component_adapter.in()); 
  return ::%(ShortNamespace)s%(ComponentType)s::_narrow(co);
}

/*
 * Explicit operations
 */

%(MFactoryDefImpl)s

/*
 * Inherited CCMHome interface
 */

CORBA::Object_ptr
%(Identifier)s_impl::get_component_def ()
{
  DEBUGNL(" %(Identifier)s_impl::get_component_def()");
  // TODO
  return CORBA::Object::_nil ();
}

CORBA::Object_ptr
%(Identifier)s_impl::get_home_def ()
{
  DEBUGNL(" %(Identifier)s_impl::get_home_def()");
  // TODO
  return CORBA::Object::_nil ();
}

void
%(Identifier)s_impl::remove_component (Components::CCMObject_ptr _co)
{
  DEBUGNL(" %(Identifier)s_impl::remove_component()");

  PortableServer::ServantBase_var _cs = ccm_container->get_skeleton_for_reference(_co);
  // TODO
 
  ccm_container->deactivate_component(_cs);
}

/*
 * Inherited KeylessCCMHome interface
 */

Components::CCMObject_ptr
%(Identifier)s_impl::create_component ()
{
  DEBUGNL(" %(Identifier)s_impl::create_component()");
  return create ();
}

%(CloseNamespace)s

//==============================================================================
// Remote entry point
//==============================================================================
extern "C" {
  int deploy_%(Identifier)s(CORBA::ORB_ptr orb, char* registration_name)
  {
    DEBUGNL(" deploy_%(Identifier)s(" << registration_name << ")");

    CosNaming::NamingContextExt_var ns;
    CORBA::Object_var nsobj;
    try {
      nsobj = orb->resolve_initial_references ("NameService");
      ns = CosNaming::NamingContextExt::_narrow (nsobj);
    }
    catch (...) {
      ns = CosNaming::NamingContextExt::_nil ();
      return -1; // Can't connect to NameService
    }

    // Startup component home
    CCM::SessionContainer* container = new CCM::SessionContainer(orb);
    CCM::SessionContainer::ComponentInfo info;
    info.home_short_name = "%(Identifier)s";
    info.home_absolute_name = "::%(Identifier)s";
    info.home_id = "IDL::%(Identifier)s:1.0";
    info.component_short_name = "%(ComponentType)s";
    info.component_absolute_name = "::%(ComponentType)s";
    info.component_id = "IDL:%(ComponentType)s:1.0";
    info.home_instance = NULL; // TODO
    info.home_glue = new CCM_Remote::%(Namespace)s::%(Identifier)s_impl(container); 
    container->load(info);
    Components::CCMHome_var hp = container->get_CCM_home(); 
    CosNaming::Name_var n  = ns->to_name (registration_name);
    ns->rebind (n.in(), hp.in());
    container->activate();
    return 0; // OK
  }
}

