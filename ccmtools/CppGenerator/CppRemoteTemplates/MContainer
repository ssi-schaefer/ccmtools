/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */

#ifndef __CCM__SERVER__%(Identifier)s__H__
#define __CCM__SERVER__%(Identifier)s__H__

#include <CORBA.h>
#include <coss/CosNaming.h>

#include <CCM_Remote/CCM_Session_%(Identifier)s/%(Identifier)sHome_remote.h>

#endif 


<<<<<<<SPLIT>>>>>>>
/*
 * This file was automatically generated by CCM Tools
 * (http://ccmtools.sourceforge.net)
 * DO NOT EDIT!
 */
#include "%(Identifier)s_server.h"

using namespace std;
using namespace WX::Utils;

//============================================================================
// Main for a standalone component
//============================================================================

int
main (int argc, char* argv[])
{
  Debug::set_global(true); 
  DEBUGNL("%(Identifier)s_server::main()");

  // Init ORB and NameService
  CORBA::ORB_var orb = CORBA::ORB_init (argc, argv);
  CCM::register_all_factories (orb);

  int error;
  error = deploy_%(Identifier)sHome(orb, "%(Identifier)sHome");
  if(!error) {
    cout << "%(Identifier)sHome stand-alone server is running..." << endl;
    orb->run ();    // Startup ORB
  }
  else {
    cerr << "ERROR: Can't start components!" << endl;
  }

  return 0;
}




