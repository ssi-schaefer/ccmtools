CCM TOOLS INSTALL
=================

This file describes how to get and install the CCM Tools on your box.
(see also http://ccmtools.sourceforge.net/tutorial.pdf)	

Prerequisites 
=============
To install the CCM Tools, the following programs must be available: 
  Java SDK     1.4      (http://java.sun.com/j2se) 
  Apache Ant   1.5.3    (http://ant.apache.org) 
  Python       2.2      (http://python.org) 
  cpp          2.96     (http://www.gnu.org) 

To build the generated local C++ components, we also need: 
  Confix       1.3pre14 (http://confix.sourceforge.net) 
  gcc          2.95.3   (http://www.gnu.org) 

To generate and build remote C++ components, we additionally need: 
  mico         2.3.10   (http://www.mico.org/)


How to get it
=============
The current ccmtools version can be checked out from sourceforge CVS:

 $ cvs -d :pserver:anonymous@cvs.sf.net:/cvsroot/ccmtools login
 Password: <press enter>
 $ cvs -d :pserver:anonymous@cvs.sf.net:/cvsroot/ccmtools co ccmtools
 $ cvs -d :pserver:anonymous@cvs.sf.net:/cvsroot/ccmtools co cpp-environment
 $ cvs -d :pserver:anonymous@cvs.sf.net:/cvsroot/ccmtools co java-environment

Now you have the following directory structure: 

    |-- ccmtools/ 
    |-- cpp-environment/  
    `-- java-environment/


Install java-environment package
================================
To build and install the java-environment we use Ant. 
 $ cd java-environment 
 $ ant install -Dprefix=<CCM_INSTALL_PATH>
 $ cd ..
 $ export CLASSPATH=<install-path>/lib/antlr.jar:       \
                    <install-path>/lib/dtd2java.jar:    \
                    <install-path>/lib/jdom.jar:        \     
                    <install-path>/lib/mdr01.jar:       \
                    <install-path>/lib/uml2idl.jar:     \
                    $CLASSPATH



Install ccmtools package 
========================
The ccmtools package can be installed with the following procedure:

 # For using local components: 
 $ cd ccmtools
 $ ant install -Dprefix=<CCM_INSTALL_PATH>
 $ cd ..
 $ export CCMTOOLS_HOME=<CCM_INSTALL_PATH>
 $ export CLASSPATH=<CCM_INSTALL_PATH>/lib/ccmtools.jar:    \
                    <CCM_INSTALL_PATH>/lib/oclmetamodel.jar
 $ export PATH=$CCMTOOLS_HOME/bin:$PATH	    

 # For using remote components too: 
 $ export CCM_COMPONENT_REPOSITORY=${CCMTOOLS_HOME} 
 $ export CCM_NAME_SERVICE=corbaloc:iiop:1.2@localhost:5050/NameService



Install cpp-environment package
===============================
We use Confix as C++ build tool. Thus, we have to create a CCM Tools profile in 
the .confix file. 

 ccm_tools_profile = {  
   PREFIX :  <CCM_INSTALL_PATH> , # use your own path!  
   BUILDROOT :  /tmp , # use your own path!  
   ADVANCED :  true ,  CONFIX : { },  
   CONFIGURE : {  
      ENV : {  
         CC :  /usr/local/gcc/bin/gcc , # use your own path!  
         CXX :  /usr/local/gcc/bin/g++ , # use your own path!  
         CFLAGS : "-g -O0 -Wall -DWXDEBUG",  
         CXXFLAGS : "-g -O0 -Wall -DWXDEBUG", 
      }, 
      # use your own mico install path!  
      ARGS : [ --with-external_mico=/usr/local/mico ] 
      }, 
   } 
   PROFILES = {  
      'ccmtools' : ccm_tools_profile 
      'default'  : ccm_tools_profile
   }
 }

It's important to substitute your own paths in the .confix file. You can also 
set the ccm_tools_profile as default profile. Now we are ready to install the 
cpp-environment needed to use local C++ components.

Now we are ready to install the cpp-environment needed to use local C++ 
components:

 $ cd cpp-environment 
 $ confix.py --packageroot=`pwd`/WX_Utils --bootstrap --configure --make --targets="install" 
 $ confix.py --packageroot=`pwd`/CCM_Local --bootstrap --configure --make --targets="install"

Finally, we install the cpp-environment needed to use remote C++ components:

 $ confix.py --packageroot=`pwd`/external --bootstrap --configure --make --targets="install"
 $ confix.py --packageroot=`pwd`/CCM_Remote --bootstrap --configure --make --targets="install"
 $ cd ..


If you like Ant (as a frontend to Confix ;-), you can say:

 # Install the local component's environment:
 $ ant local

 # If you only want to install CCM_Local without WX_Utils:
 $ ant CCM_Local  

OK, that s it! Now we are ready to create and run components using the CCM Tools. 
