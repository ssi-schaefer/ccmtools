/* CCM Tools : ccmtools test case base class
 * Egon Teiniker <egon.teiniker@salomon.at>
 * Copyright (C) 2002 - 2006 Salomon Automation
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

/*
 * This additional namespace ccm::corba is used to separate the CORBA stubs
 * from the local interfaces.
 */
module ccm {
module corba {

/*
 * This file defines interfaces which establish the component model used 
 * by the CCM Tools component implementations.
 * These definitions are strongly related to the CORBA Component Model 
 * (CCM) Specification and the Lightweight CORBA Component Model (LwCCM).
 */
module Components {
 	   
  	/**
   	 * Facet Definitions
   	 *
   	 * A component type may provide several independent interfaces to its 
   	 * clients in the form of facets. Facets are intended to be the primary
   	 * vehicle through which a component exposes its functional application
   	 * behavior to clients during normal execution.
   	 */

	typedef string FeatureName;

  	exception InvalidName 
  	{
  	};

	
	/**
	 * The Navigation interface provides generic navigation capabilities,
	 * and is inherited by all component interfaces.
	 * (see CCM Specification 1-10)
	 */
	interface Navigation 
  	{
		/**
		 * Returns a reference to the facet denoted by the name parameter.
		 */
    		Object provide_facet(in FeatureName name)
      		raises (InvalidName);
  	};



  	/**
   	 * Receptacle Definitions
   	 *
   	 * A component definition can describe the ability to accept object 
   	 * references upon which the component may invoke operations. The
   	 * relationship between the component and the referent object is
   	 * called a connection.
   	 * The conceptional point of connection is called receptacle.
   	 */

  	exception InvalidConnection 
  	{
  	};
  
  	exception AlreadyConnected 
  	{
 	};
  
  	exception ExceededConnectionLimit 
  	{
  	};
  
  	exception CookieRequired 
  	{
  	};

  	exception NoConnection 
  	{
  	};
  
  	/**
  	 * Cookie values are created by multiplex receptacles, and are used to
  	 * correlate a connect operation with a disconnect on multiplex 
  	 * receptacles.
  	 */
  	valuetype Cookie 
  	{
    		public sequence<octet> CookieValue;
  	};


	/**
	 * The Receptacle interface provides generic operations for connecting
	 * to a component's receptacles. The CCMObject interface is derived from
	 * Receptacles.
	 * (see CCM Specification 1-18)
	 */ 
	interface Receptacles 
	{
		/**
		 * Connect the object reference specified by the connection parameter
		 * to the receptacle specified by the name parameter on the target
		 * component.
		 * If the specified receptacle is a multiplex receptacle, the 
		 * operation returns a cookie value that can be used subsequently
		 * to disconnect the object reference.
		 * If the receptacle is a simplex receptacle, the return value is a
		 * nil.
		 */
    		Cookie connect(in FeatureName name, in Object connection)
      		raises (InvalidName, InvalidConnection,
	      			AlreadyConnected, ExceededConnectionLimit);

		/**
		 * If the receptacle defined by the name parameter is a simplex one,
		 * the operation will disassociate any object reference currently 
		 * connected to the receptacle (the cookie value is ignored).
		 * If the receptacle defined by the name parameter is a multiplex
		 * receptacle, the disconnect operation disassociates the object
		 * reference associated with the cookie value from the receptacle.
		 */
    		void disconnect(in FeatureName name, in Cookie ck)
      		raises (InvalidName, InvalidConnection,
	      			CookieRequired, NoConnection);
  	};


	/**
	 * Component Definitions
	 *
	 * 
	 */

 	exception InvalidConfiguration 
  	{
  	};
  	
 	exception RemoveFailure 
  	{
  	};  

  	interface CCMHome;

  	/**
  	 * CCMObject is the base interface of all component definitions.
   	 * (see CCM Specification 1-52)
   	 */
  	interface CCMObject : Navigation, Receptacles
  	{
  		/**
  		 * Returns a CCMHome reference to the home that manages this 
  		 * component.
  		 */
    		CCMHome get_ccm_home();
    		
    		/**
    		 * This operation is called by a configurator to indicate that
    		 * the initial component configuration has completed.
    		 */
    		void configuration_complete()
    			raises(InvalidConfiguration);
    		
    		/**
    		 * This operation is used to delete a component.
    		 */
    		void remove()
    			raises(RemoveFailure);
  	};



	/**
   	 * Home Definitions
     *
     * A home definition describes an interface for managing interfaces of a 
     * specified component type.
   	 */

	typedef unsigned long FailureReason;

	exception CreateFailure 
	{
  		FailureReason reason;
  	};

	/**
	 * CCMHome is the base interface of all home definitions.
	 * (see CCM Specification 1-41)
	 */
  	interface CCMHome 
  	{
  		/**
  		 * This operation causes the component denoted by the reference to exit.
  		 */
    		void remove_component (in CCMObject comp)
    	   		raises (RemoveFailure);
  	};

	typedef sequence<CCMHome> CCMHomes;


	/**
	 * (see CCM Specification 1-42)
	 */
  	interface KeylessCCMHome 
  	{
  		/**
  	 	 * This operation creates a new instance of the component type 
  	 	 * associated with the home object.
  	 	 */
		CCMObject create_component ()
    			raises (CreateFailure);
  	};


  	exception HomeNotFound 
  	{
  	};

	/**
	 * Clients can use the HomeFinder interface to obtain homes for
	 * particular component types, of particular home types or homes
	 * that are bound to names in a naming service.
	 * (see CCM Specification 1-42)
	 */
  	interface HomeFinder 
  	{
  		/**
  		 * Return a reference, which supports the interface of a home object
  		 * that manages the component type specified by the comp_repid 
  		 * parameter.
  		 */ 
    		CCMHome find_home_by_component_type(in string comp_repid)
      		raises (HomeNotFound);
      		
      	/**
      	 * Return a reference that supports the interface of the type
      	 * specified by the repository identifier in the home_repid
      	 * parameter.
      	 */
    		CCMHome find_home_by_home_type (in string home_repid)
      		raises (HomeNotFound);
      		
      	/**
      	 * Return a home reference bound to the name specified in the      	 
      	 * home_name parameter.
      	 * This parameter is expected to contain a name in the format
      	 * described in the Naming Service specification.
      	 */
    		CCMHome find_home_by_name (in string home_name)
     		raises (HomeNotFound);
  	};



  	/**
   	 * Configurator Definitions
   	 *

  	exception WrongComponentType 
  	{
  	};

  	interface Configurator 
  	{
    		void configure(in CCMObject comp)
      		raises (WrongComponentType);
  	};


  	valuetype ConfigValue 
  	{
    		public FeatureName name;
    		public any value;
  	};

  	typedef sequence<ConfigValue> ConfigValues;

  	interface StandardConfigurator : Configurator 
  	{
    		void set_configuration (in ConfigValues descr);
  	};
	*/

  

  	/**
   	 * Deployment Interfaces
   	 *
   	 *

  	exception UnknownImplId {};
  	exception InvalidLocation {};

  	exception InstallationFailure {};
  	exception InvalidAssembly {};

  	interface Container;
  	typedef sequence<Container> Containers;

  	interface ComponentServer;
  	typedef sequence<ComponentServer> ComponentServers;

  	typedef string UUID;
  	typedef string Location;

  	interface ComponentInstallation 
  	{
    		void install (in UUID implUUID, in Location component_loc)
      		raises (InvalidLocation, InstallationFailure);
    		void replace (in UUID implUUID, in Location component_loc)
      		raises (InvalidLocation, InstallationFailure);
    		void remove (in UUID implUUID)
      		raises (UnknownImplId, RemoveFailure);
    		Location get_implementation (in UUID implUUID)
      		raises (UnknownImplId, InstallationFailure);
  	};

  	interface Assembly;
 
  	interface AssemblyFactory 
  	{
    		Cookie create (in Location assembly_loc)
      		raises (InvalidLocation, CreateFailure);
    		Assembly lookup (in Cookie c)
      		raises (InvalidAssembly);
    		void destroy (in Cookie c)
      		raises (InvalidAssembly, RemoveFailure);
  	};

  	enum AssemblyState 
  	{
    		INACTIVE,
    		INSERVICE
  	};

  	interface Assembly 
  	{
    		void build () raises (CreateFailure);
    		void tear_down () raises (RemoveFailure);
    		AssemblyState get_state ();
  	};

  	interface ServerActivator 
  	{
    		ComponentServer create_component_server (in ConfigValues config)
      		raises (CreateFailure, InvalidConfiguration);
    		void remove_component_server (in ComponentServer server)
      		raises (RemoveFailure);
    		ComponentServers get_component_servers ();
  	};

  	interface ComponentServer 
  	{
    		readonly attribute ConfigValues configuration;
    		ServerActivator get_server_activator ();
    		Container create_container (in ConfigValues config)
      		raises (CreateFailure, InvalidConfiguration);
    		void remove_container (in Container cref)
      		raises (RemoveFailure);
    		Containers get_containers ();
    		void remove ()
      		raises (RemoveFailure);
  	};

  	interface Container 
  	{
    		readonly attribute ConfigValues configuration;
    		ComponentServer get_component_server ();
    		CCMHome install_home (in string id,
			  in string entrypt,
			  in ConfigValues config)
      		raises (InvalidConfiguration, InstallationFailure);
    		void remove_home (in CCMHome href)
      		raises (RemoveFailure);
    		CCMHomes get_homes ();
    		void remove ()
      		raises (RemoveFailure);
  	};
	*/
	
}; // /module Components
}; // /module corba
}; // /module ccm
