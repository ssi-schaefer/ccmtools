'''local transaction functions and classes'''

class NoTransaction(Exception): pass
class NotSupported(Exception): pass
class SystemError(Exception): pass
class RollbackError(Exception): pass
class HeuristicMixed(Exception): pass
class HeuristicRollback(Exception): pass
class Security(Exception): pass
class InvalidToken(Exception): pass

Status = [
    'ACTIVE',
    'MARKED_ROLLBACK',
    'PREPARED',
    'COMMITTED',
    'ROLLED_BACK',
    'NO_TRANSACTION',
    'PREPARING',
    'COMMITTING',
    'ROLLING_BACK'
    ]

class UserTransaction:
    '''
    A component specifying self-managed transactions may use the CORBA
    transaction service directly to manipulate the current transaction; or it
    may choose to use a simpler API (UserTransaction), which exposes only those
    transaction demarcation functions needed by the component implementation.
    CCM Spec. 4-23
    '''

    def begin(self):
        raise 'begin is not implemented yet.'

    def commit(self):
        raise 'commit is not implemented yet.'

    def rollback(self):
        raise 'rollback is not implemented yet.'

    def set_rollback_only(self):
        raise 'set_rollback_only is not implemented yet.'

    def get_status(self):
        raise 'get_status is not implemented yet.'

    def set_timeout(self, to):
        raise 'set_timeout is not implemented yet.'

    def suspend(self):
        raise 'suspend is not implemented yet.'

    def resume(self, txtoken)
        raise 'resume is not implemented yet.'




