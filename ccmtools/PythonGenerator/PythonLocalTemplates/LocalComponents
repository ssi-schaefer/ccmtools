'''definitions and classes for local components'''

class NotImplemented(Exception):
    '''Note: this class is not part of the CCM specification!'''

    def __str__(self): return 'Not Implemented Exception'

class HomeNotFound(Exception): pass
class InvalidName(Exception): pass

class AlreadyConnected(Exception): pass
class InvalidConnection(Exception): pass
class NoConnection(Exception): pass
class ExceededConnectionLimit(Exception): pass
class CookieRequired(Exception): pass

class IllegalState(Exception): pass
class InvalidConfiguration(Exception): pass
class NoKeyAvailable(Exception): pass

class CreateFailure(Exception):
    def __init__(self, reason): self.__reason = reason

class FinderFailure(Exception):
    def __init__(self, reason): self.__reason = reason

class RemoveFailure(Exception):
    def __init__(self, reason): self.__reason = reason

class DuplicateKeyValue(Exception): pass
class InvalidKey(Exception): pass
class UnknownKeyValue(Exception): pass

class WrongComponentType(Exception): pass

################################################################################

class Object:
    '''
    This is the local substitute for the CORBA::Object interface. Every
    interface inherits from Object.

    Note: This interface is not part of the CCM specification!
    '''

    ## Simulates the CORBA::Object::get_component() operation defines since
    ## CORBA 3.0 (CCM Spec. 1-9)

    def get_component(self): return self

class IRObject:
    '''The IRObject comes from CORBA::ComponentIR::ComponentDef.'''

    pass

class ReleaseInformation:
    '''
    The ReleaseInformation class is inherited by each component adapter to give
    the client the facility to get this information from the component
    equivalent interface.

    Note: This interface is not part of the CCM specification!
    '''

    def getComponentVersion(self):
        raise 'getComponentVersion is not implemented yet.'

    def getComponentDate(self):
        raise 'getComponentDate is not implemented yet.'

    def getComponentUUID(self):
        raise 'getComponentUUID is not implemented yet.'

class EnterpriseComponent:
    '''
    Enterprise Component is an empty callback interface that serves as common
    base for all component implementations.
    CCM Specification 3-39, 4-27
    '''

    pass

class Principal:
    '''
    From IDL3:
    typedef SecurityLevel2::Credentials Principal;
    CCM Specification 4-22
    '''

    pass

################################################################################

class CCMHome:
    '''
    The CCMHome interface is interited by the explicit home interface.
    CCM Specification 1-41
    '''

    def get_component_def(self):
        raise 'get_component_def is not implemented yet.'

    def get_home_def(self):
        raise 'get_home_def is not implemented yet.'

    def remove_component(self, component):
        raise 'remove_component is not implemented yet.'

class KeylessCCMHome:
    '''
    The KeylessCCMHome interface is inherited by the implicit home interface.
    CCM Specification  1-42
    '''

    def create_component(self):
        raise 'create_component is not implemented yet.'

class HomeExecutorBase:
    '''
    The HomeExecutorBase is a common base for all home implementations.
    CCM Specification 3-40
    '''

    pass

class HomeRegistration:
    '''
    The HomeRegistration is an internal interface that may be used by the CORBA
    component to register its home so it can be located by a HomeFinder.
    CCM Specification 4-34
    '''

    def register_home(self, home_ref, home_name):
        '''
        The register_home() operation is used to register a component home with
        the HomeFinder so it can by located by a component client.
        '''

        raise 'register_home is not implemented yet.'

    def unregister_home(self, home_ref, home_name = None):
        '''
        The unregister_home() operation is used to remove a component home from
        the HomeFinder.

        When the home_name parameter is used, the home can be removed based on
        the name ; note that this functionality is not defined in the CCM
        specification!
        '''

        raise 'unregister_home is not implemented yet.'

class HomeFinder(HomeRegistration):
    '''
    Clients can use the HomeFinder interface to obtain homes for particular
    component types, of particularly homes, or homes that are bound to specific
    names in a naming service.
    CCM Spec. 1-42
    '''

    def find_home_by_component_type(self, comp_repid):
        raise 'find_home_by_component_type is not implemented yet.'

    def find_home_by_name(self, comp_name):
        raise 'find_home_by_name is not implemented yet.'

    def find_home_by_type(self, comp_type):
        raise 'find_home_by_type is not implemented yet.'

################################################################################

class CCMContext:
    '''
    The CCMContext is an internal interface which provides a component instance
    with access to the common container-provided runtime services. It serves as
    a "bootstrap" to the various services the container provides for the
    component.
    CCM Spec. 4-22
    '''

    def get_caller_principal(self):
        raise 'get_caller_principal is not implemented yet.'

    def get_CCM_home(self):
        raise 'get_CCM_home is not implemented yet.'

    def get_rollback_only(self):
        raise 'get_rollback_only is not implemented yet.'

    def get_user_transaction(self):
        raise 'get_user_transaction is not implemented yet.'

    def is_caller_in_role(self, role):
        raise 'is_caller_in_role is not implemented yet.'

    def set_rollback_only(self):
        raise 'set_rollback_only is not implemented yet.'

class SessionContext(CCMContext):
    '''
    The SessionContext is an internal interface which provides a component
    instance with access to the container-provided runtime services. The
    SessionContext enables the component to simply obtain all the references it
    may require to implement its behavior.
    CCM Spec. 4-27
    '''

    def get_CCM_object(self):
      '''
      The get_CCM_object ( ) operation is used to get the reference used to
      invoke the component (component reference or facet reference. If this
      operation is issued outside of the scope of a callback operation, the
      IllegalState exception is returned.
      '''

      raise 'get_CCM_object is not implemented yet.'

################################################################################

CCMExceptionReason = [
    'SYSTEM_ERROR',
    'CREATE_ERROR',
    'REMOVE_ERROR',
    'DUPLICATE_KEY',
    'FIND_ERROR',
    'OBJECT_NOT_FOUND',
    'NO_SUCH_ENTITY'
    ]

class CCMException:
    def __init__(self, reason): self.__reason = reason

class SessionComponent(EnterpriseComponent):
    '''
    The SessionComponent is a callback interface implemented by a session CORBA
    component. It provides operations for disassociating a context with the
    component and to manage servant lifetime for a session component.
    CCM Specification 4-28
    '''

    def set_session_context(self, context):
        '''
        The set_session_context (  ) operation is used to set the SessionContext
        of the component. The container calls this operation after a component
        instance has been created.
        '''

        raise 'set_session_context is not implemented yet.'

    def ccm_activate(self):
        '''
        The ccm_activate (  ) operation is called by the container to notify a
        session component that is has been made active.
        '''

        raise 'ccm_activate is not implemented yet.'

    def ccm_passivate(self):
        '''
        The ccm_passivate (  ) operation is called by the container to notify a
        session component that it has been made inactive.
        '''

        raise 'ccm_passivate is not implemented yet.'

    def ccm_remove(self):
        '''
        The void ccm_remove (  ) operation is called by the container when the
        servant is about to be destroyed.
        '''

        raise 'ccm_remove is not implemented yet.'

class SessionSynchronisation:
    '''
    The SessionSynchronisation interface is a callback interface that may be
    optionally be implemented by the session component. It permits the component
    to be notified of transaction boundaries by the container.
    CCM Specification 4-29
    '''

    def after_begin(self):
        raise 'after_begin is not implemented yet.'

    def before_completion(self):
        raise 'before_completion is not implemented yet.'

    def after_completion(self, committed):
        raise 'after_completion is not implemented yet.'

class PortDescription:
    def __init__(self, name = None, type_id = None):
        self.__name = name
        self.__type_id = type_id

    def name(self): return self.__name
    def name(self, name): self.__name = name

    def type_id(self): return self.__type_id
    def type_id(self, type_id): self.__type_id = type_id

class FacetDescription(PortDescription):
    def __init__(self, facet_ref = None): self.__facet_ref = facet_ref

    def facet_ref(self): return self.__facet_ref
    def facet_ref(self, facet_ref): self.__facet_ref = facet_ref

class Navigation:
    '''
    The Navigation interface provides generic navigation capabilities. It is
    inherited by all component interfaces, and may be optionally inherited by
    any interface that is explicitly designed to be a facet interface for a
    component.
    CCM Specification 1-10
    '''

    def provide_facet(self, name):
        '''
        This operation returns a reference to the facet denoted by the name
        parameter. If the value of the name parameter does not correspond to one
        of the component facets, the InvalidName exception shall be raised.
        '''

        raise 'provide_facet is not implemented yet.'

    def get_all_facets(self):
        '''
        This operation returns a sequence of value objects, each of which
        contains the RepositoryId of the facet interface and name of the facet,
        along with a reference to the facet.
        '''

        raise 'get_all_facets is not implemented yet.'

    def get_named_facets(self, names):
        '''
        This operation returns a sequence of described reterences, containing
        descriptions and references for the facets denoted by the names
        parameter. If any name in the names parameter is not a valid name for a
        provided interface on the component, the operation raises the
        InvalidName exception.
        '''

        raise 'get_named_facets is not implemented yet.'

    def same_component(self, obj):
        '''
        The same_component(self): operation allows clients to determine reliably
        whether two references belong to the same component instance.
        '''

        raise 'same_component is not implemented yet.'

class Cookie:
    '''
    Cookie values are created by multiplex receptacles, and are used to
    correlate a connect operation with a disconnect operation on multiplex
    receptacles.
    CCM Specification 1-18
    '''

    def __init__(self, v = ''): self.__cookieValue = v

    def __cmp__(self, x): return cmp(self.__cookieValue, ck.value())

    def value(self): return self.__cookieValue
    def value(self, v): self.__cookieValue = v

class ConnectionDescription:
    def __init__(self):
        self.__ck = None
        self.__objref = None

    def ck(self): return self.__ck
    def ck(self, ck): self.__ck = ck

    def objref(self): return self.__objref
    def objref(self, objref): self.__objref = objref

class ReceptacleDescription(PortDescription):
    def __init__(self):
      self.__is_multiple = 0
      self.__connections = []

    def is_multiple(self): return self.__is_multiple
    def is_multiple(self, is_multiple): self.__is_multiple = is_multiple

    def connections(self): return self.__connections
    def connections(self, connections): self.__connections = connections

class Receptacles:
    '''
    The Receptacles interface provides generic operations for connecting to a
    component receptacles. The CCMObject interface is derived from Receptacles.
    CCM Specification 1-18
    '''

    def connect(self, name, connection):
        '''
        This operation connects the object reference specified by the connection
        parameter to the receptacle specified by the name parameter on the
        target component. For multiplex receptacles, the operation returns a
        cookie value that can be used subsequently to disconnect the object
        reference. For simplex receptacles the return value is None.
        '''

        raise 'connect is not implemented yet.'

    def disconnect(self, name, ck):
        '''
        Simplex receptacle: the operation will disassociate any object reference
        currently connected to the receptacle - the cookie parameter is ignored.

        Multiplex receptacle: the operation disassociates the object reference
        associated with the cookie value from the receptacle.
        '''

        raise 'disconnect is not implemented yet.'

    def get_connections(self, name):
        raise 'get_connections is not implemented yet.'

    def get_all_receptacles(self):
        raise 'get_all_receptacles is not implemented yet.'

    def get_named_receptacles(self, names):
        raise 'get_named_receptacles is not implemented yet.'

class ComponentPortDescription:
    def __init__(self):
        self.__facets = []
        self.__receptacles = []
        self.__consumers = []
        self.__emitters = []
        self.__publishers = []

    def facets(self): return self.__facets
    def facets(self, facets): self.__facets = facets

    def receptacles(self): return self.__receptacles
    def receptacles(self, receptacles): self.__receptacles = receptacles

    def consumers(self): return self.__consumers
    def consumers(self, consumers): self.__consumers = consumers

    def emitters(self): return self.__emitters
    def emitters(self, emitters): self.__emitters = emitters

    def publishers(self): return self.__publishers
    def publishers(self, publishers): self.__publishers = publishers

class PrimaryKeyBase: pass

class CCMObject(Object, Navigation, Receptacles):
    '''
    All interfaces for components types are derived from CCMObject.
    CCM Specification 1-52
    '''

    def get_component_def(self):
        raise 'get_component_def is not implemented yet.'

    def get_ccm_home(self):
        '''
        The get_ccm_home() operation returns a CCMHome reference to the
        home which manages this component.
        '''

        raise 'get_ccm_home is not implemented yet.'

    def get_primary_key(self):
        raise 'get_primary_key is not implemented yet.'

    def configuration_complete(self):
        '''
        This operation is called by a configurator to indicate that the initial
        component configuration has completed. If the component determines that
        it is not sufficiently configured to allow normal client access, it
        raises the InvalidConfiguration exception.
        '''

        raise 'configuration_complete is not implemented yet.'

    def remove(self):
        '''
        This operation is used to delete a component. Application failures
        during remove may raise the RemoveFailure exception.
        '''

        raise 'remove is not implemented yet.'

    def get_all_ports(self):

        raise 'get_all_ports is not implemented yet.'

################################################################################

class Configurator:
    '''
    A configurator is an object that encapsulates a specific attribute
    configuration that can be reproduced an many instances of a component type.
    A configurator is intended to invoke attribute set operations on the target
    component.
    CCM Specification 1-47
    '''

    def configure(self, component):
        '''
        This operation establishes its encapsulated configuration on the target
        component. If the target component is not of the type expected by the
        configurator, the operation shall raise the WrongComponentType
        exception.
        '''

        raise 'configure is not implemented yet.'

################################################################################



