'''home finder'''

import localComponents, debug

class HomeFinder(localComponents.HomeFinder):
    '''
    This is a local version of a HomeFinder which returns local (C++) references
    of component homes. We use a singleton pattern to implement the local
    HomeFinder. Instance (  ) provides a pointer to the single instance.
    '''

    _instance = None

    def __init__(self):
        debug.DEBUGNL('+HomeFinder->__init__')

        self.homes = []

    def __del__(self):
        debug.DEBUGNL('-HomeFinder->__del__')

    def instance(self):
        if not HomeFinder._instance:
            HomeFinder._instance = HomeFinder()
        return HomeFinder._instance

    def find_home_by_name(self, name):
        for home in self.homes:
            if home == name: return home
        raise localComponents.HomeNotFound()

    def find_home_by_type(self, home_repid):
        for home in self.homes:
            if isinstance(home, home_repid): return home
        raise localComponents.HomeNotFound()

    def find_home_by_component_type(self, comp_repid):
        for home in self.homes:
            for component in home.get_component_type():
                if isinstance(component, comp_repid): return home
        raise localComponents.HomeNotFound()

    def register_home(self, home_ref, home_name):
        self.homes[home_name] = home_ref

    def unregister_home(self, home_ref, home_name = None):
        if home_name:
            if home_name in self.homes.keys(): del self.homes[home_name]
            else: raise localComponents.HomeNotFound()

        if home_ref:
            while home_ref in self.homes.values():
                for k, v in self.homes.items():
                    if v == home_ref:
                        del self.homes[k]




