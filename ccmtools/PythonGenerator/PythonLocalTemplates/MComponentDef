'''%(Identifier)s - component logic'''

import config

from CCM_Utils import debug, localComponents

%(ExternInclude)s

%(MSupportsDefInclude)s
%(MProvidesDefInclude)s
%(MConsumesDefInclude)s
%(MEmitsDefInclude)s
%(MPublishesDefInclude)s
%(MUsesDefInclude)s

################################################################################

class CCM_%(Identifier)s(
    localComponents.SessionComponent%(BaseTypes)s%(MSupportsDefBase)s
    ):

    '''%(Identifier)s component class'''

%(MAttributeDefPrototype)s
%(MProvidesDefPrototype)s
%(MSupportsDefPrototype)s

    def __init__(self, *args):
        raise '%(Identifier)s component class is an abstract base class.'

class %(Identifier)s(
    localComponents.ReleaseInformation%(BaseTypes)s,
    localComponents.CCMObject%(MSupportsDefBase)s
    ):

    '''%(Identifier)s local component adapter class'''

    def __init__(self, home, local_component):
        '''
        @type home: %(HomeType)s
        @type local_component: CCM_%(Identifier)s
        '''

        debug.DEBUGNL('+%(Identifier)s->__init__')

        self.__home_local_adapter = home
        self.__local_component = local_component
        self.__context = CCM_%(Identifier)s_Context_impl(self)
        self.__ValidConnection = 1

%(MProvidesDefVariable)s
%(MUsesDefVariable)s

    def __del__(self):
        debug.DEBUGNL('-%(Identifier)s->__del__')
        del self.__context
        del self.__local_component

%(MAttributeDefImpl)s
%(MProvidesDefImpl)s
%(MSupportsDefImpl)s
%(MUsesDefImpl)s

    ## Version / release information functions

    def getComponentVersion(self):
        '''
        @rtype: string
        '''

        debug.DEBUGNL(' %(Identifier)s->getComponentVersion')
        if not self.__ValidConnection: raise localComponents.InvalidConnection()
        return config.package_version

    def getComponentDate(self):
        '''
        @rtype: string
        '''

        debug.DEBUGNL(' %(Identifier)s->getComponentDate')
        if not self.__ValidConnection: raise localComponents.InvalidConnection()
        return config.package_date

    def getComponentUUID(self):
        '''
        @rtype: string
        '''

        debug.DEBUGNL(' %(Identifier)s->getComponentUUID')
        if not self.__ValidConnection: raise localComponents.InvalidConnection()
        return 'no UUID'

    ## Navigation functions

    def provide_facet(self, name):
        '''
        @type name: string
        @rtype: localComponents.Object
        @raise: localComponents.InvalidName
        '''

        debug.DEBUGNL(' %(Identifier)s->provide_facet')

%(MProvidesDefProvide)s

        raise localComponents.InvalidName()

    def get_all_facets(self):
        '''
        @rtype: list of localComponents.FacetDescription
        '''

        debug.DEBUGNL(' %(Identifier)s->get_all_facets')
        ## TODO
        raise localComponents.NotImplemented()

    def get_named_facets(self, names):
        '''
        @type names: list of string
        @rtype: list of localComponents.FacetDescription
        '''

        debug.DEBUGNL(' %(Identifier)s->get_named_facets')
        ## TODO
        raise localComponents.NotImplemented()

    def same_component(self, obj):
        '''
        @type obj: localComponents.Object
        @rtype: boolean
        '''

        debug.DEBUGNL(' %(Identifier)s->same_component')
        return obj == self

    ## Receptacle functions

    def connect(self, name, connection):
        '''
        @type name: string
        @type connection: localComponents.Object
        @rtype: localComponents.Cookie
        @raise: localComponents.InvalidName, localComponents.AlreadyConnected,
          localComponents.ExceededConnectionLimit,
          localComponents.InvalidConnection
        '''

        debug.DEBUGNL(' %(Identifier)s->connect')

%(MUsesDefConnect)s

        raise localComponents.InvalidName()

    def disconnect(self, name, ck):
        '''
        @type name: string
        @type ck: localComponents.Cookie
        @rtype: None
        @raise: localComponents.InvalidConnection, localComponents.InvalidName
        '''

        debug.DEBUGNL(' %(Identifier)s->disconnect')
        if not ValidConnection: raise localComponents.InvalidConnection()

%(MUsesDefDisconnect)s

        raise localComponents.InvalidName()

    def get_connections(self, name):
        '''
        @type name: string
        @rtype: list of localComponents.ConnectionDescription
        @raise: localComponents.InvalidName
        '''

        debug.DEBUGNL(' %(Identifier)s->get_connections')
        ## TODO
        raise localComponents.NotImplemented()

    def get_all_receptacles(self):
        '''
        @rtype: list of localComponents.ReceptacleDescription
        '''

        debug.DEBUGNL(' %(Identifier)s->get_all_receptacles')
        ## TODO
        raise localComponents.NotImplemented()

    def get_named_receptacles(self, names):
        '''
        @type names: list of string
        @rtype: list of localComponents.ReceptacleDescription
        @raise: localComponents.InvalidName
        '''

        debug.DEBUGNL(' %(Identifier)s->get_named_receptacles')
        ## TODO
        raise localComponents.NotImplemented()

    ## CCMObject functions

    def get_component_def(self):
        '''
        @rtype: localComponents.IRObject
        '''

        debug.DEBUGNL(' %(Identifier)s->get_component_def')
        ## TODO
        raise localComponents.NotImplemented()

    def get_ccm_home(self):
        '''
        @rtype: localComponents.HomeExecutorBase
        '''

        debug.DEBUGNL(' %(Identifier)s->get_ccm_home')
        ## TODO
        raise localComponents.NotImplemented()

    def get_primary_key(self):
        '''
        @rtype: localComponents.PrimaryKeyBase
        @raise: localComponents.NoKeyAvailable
        '''

        debug.DEBUGNL(' %(Identifier)s->get_primary_key')
        ## TODO
        raise localComponents.NotImplemented()

    def configuration_complete(self):
        '''
        @rtype: None
        @raise: localComponents.InvalidConfiguration
        '''

        debug.DEBUGNL(' %(Identifier)s->configuration_complete')

        if not self.__ValidConnection: raise localComponents.InvalidConnection()

        self.__local_component.set_session_context(self.__context)
        self.__local_component.ccm_activate()

    def remove(self):
        '''
        @rtype: None
        @raise: localComponents.RemoveFailure
        '''

        debug.DEBUGNL(' %(Identifier)s->remove')

        if not self.__ValidConnection: raise localComponents.InvalidConnection()

        self.__ValidConnection = 0
%(MProvidesDefRemove)s
        self.__local_component.ccm_remove()

    def get_all_ports(self):
        '''
        @rtype: list of localComponents.ComponentPortDescription
        '''

        debug.DEBUGNL(' %(Identifier)s->get_all_ports')
        ## TODO
        raise localComponents.NotImplemented()

################################################################################

class CCM_%(Identifier)s_Context(localComponents.SessionContext):
    '''context class'''
%(MUsesDefContextPrototype)s

    def __init__(self, *args):
        raise '%(Identifier)s_Context is an abstract base class.'

class CCM_%(Identifier)s_Context_impl(CCM_%(Identifier)s_Context):
    '''context adapter class'''

    def __init__(self, c):
        assert c

        debug.DEBUGNL('+'+__self_repr+'->__init__')

        self.__self_repr = 'CCM_%(Identifier)s_Context_impl'
        self.__component_local_adapter = None

    def __del__(self):
        debug.DEBUGNL('-'+__self_repr+'->__del__')

%(MUsesDefContextImpl)s

    ## CCMContext functions

    def get_caller_principal(self):
        '''
        @rtype: localComponents.Principal
        '''

        debug.DEBUGNL(' '+__self_repr+'->get_caller_principal')
        ## TODO
        raise localComponents.NotImplemented()

    def get_CCM_home(self):
        '''
        @rtype: localComponents.HomeExecutorBase
        '''

        debug.DEBUGNL(' '+__self_repr+'->get_CCM_home')
        ## TODO
        raise localComponents.NotImplemented()

    def get_rollback_only(self):
        '''
        @rtype: boolean
        @raise: localComponents.IllegalState
        '''

        debug.DEBUGNL(' '+__self_repr+'->get_rollback_only')
        ## TODO
        raise localComponents.NotImplemented()

    def get_user_transaction(self):
        '''
        @rtype: localComponents.UserTransaction
        @raise: localComponents.IllegalState
        '''

        debug.DEBUGNL(' '+__self_repr+'->get_user_transaction')
        ## TODO
        raise localComponents.NotImplemented()

    def is_caller_in_role(self, role):
        '''
        @rtype: boolean
        @raise: localComponents.IllegalState
        '''

        debug.DEBUGNL(' '+__self_repr+'->is_caller_in_role')
        ## TODO
        raise localComponents.NotImplemented()

    def set_rollback_only(self):
        '''
        @rtype: None
        @raise: localComponents.IllegalState
        '''

        debug.DEBUGNL(' '+__self_repr+'->set_rollback_only')
        ## TODO
        raise localComponents.NotImplemented()

    def get_CCM_object(self):
        '''
        @rtype: localComponents.Object
        @raise: localComponents.IllegalState
        '''

        debug.DEBUGNL(' '+__self_repr+'->get_CCM_object')
        ## TODO
        raise localComponents.NotImplemented()

################################################################################

%(MProvidesDefClass)s

################################################################################

<<<<<<<SPLIT>>>>>>>
'''%(Identifier)s - business logic class definition'''

import Debug, %(Identifier)s_gen

################################################################################

class CCM_%(Identifier)s_impl(
    CCM_%(Identifier)s%(BaseTypes)s
    ):

    '''component implementation object'''

    def __init__(self):
        debug.DEBUGNL('+CCM_%(Identifier)s_impl->__init__')

        self.ctx = None

%(MAttributeDefVariable)s

    def __del__(self):
        debug.DEBUGNL('-CCM_%(Identifier)s_impl->__del__')

%(MAttributeDefContextImpl)s
%(MProvidesDefContextImpl)s
%(MSupportsDefContextImpl)s

  ## Callback methods

    def set_session_context(self, context):
        '''
        @type context: CCM_%(Identifier)s_Context
        @rtype: None
        '''

        debug.DEBUGNL(' CCM_%(Identifier)s_impl->set_session_context')
        self.ctx = context

    def ccm_activate(self):
        '''
        @rtype: None
        '''

        debug.DEBUGNL(' CCM_%(Identifier)s_impl->ccm_activate')

    def ccm_passivate(self):
        '''
        @rtype: None
        '''

        debug.DEBUGNL(' CCM_%(Identifier)s_impl->ccm_passivate')

    def ccm_remove(self):
        '''
        @rtype: None
        '''

        debug.DEBUGNL(' CCM_%(Identifier)s_impl->ccm_remove')
}

################################################################################

%(MProvidesDefContextClass)s

################################################################################



