HEAD
============================================================================

RELEASE-0.8.5 (January 24, 2007) 
RELEASE-0.8.4 (January 16, 2007) 
RELEASE-0.8.3 (January 10, 2007) 
RELEASE-0.8.2 (January 8, 2007)
RELEASE-0.8.1 (December 21, 2006) 
----------------------------------------------------------------------------
*) Feature: Added IDL chapter to the manual

*) Feature: C++ generator - struct constructors
	Added default and init constructors to generated IDL structures.
	
*) Refactoring: Java generator - changed metamodel 

*) Refactoring: IDL generator - changed metamodel 

*) Bugfix: IDL Parser 
	Java facet impl files will be generated twice.
	=> Set SourceFile to ProvidesDef model element.

*) Refactoring: Namespaces
	Changed generated namespaces of C++ and Java components to support the 
	same schema 	as used in the cpp- and java-environment.
	+ Removed ccm::local namespace from local interfaces.
	+ Added ccmtools::corba to IDL2 artefacts.
	+ Changed ccm:remote namespace to ccmtools::remote namespace.
	+ Changed the namespace order from e.g. world::ccmtools::remote 
	  to ccmtools::remote::world.
	
*) Refactoring: typedef SmartPtr<class> SmartPtr
	Added generation of "typedef SmartPtr<class> SmartPtr" for interfaces.
	
*) Refactoring: Prefix of generated directories
	Changed the prefix of generated directories from CCM_ to GEN_
		

RELEASE-0.8.0 (November 30, 2006)
----------------------------------------------------------------------------
*) Feature: IDL parser based on JFlex+Cup
	Implemented a new IDL parser based on the LR parser generator tools 
	JFlex+Cup. Also a bunch of parser unit tests have been implemented.

*) Feature: CCM Model Validator
	Implemented a CCM Model Validator (ccmmodel -validator) which checks
	a given CCM model be be conform to the supported CCM Tools model
	(e.g. no events, nor arrays, etc.)
	
*) Refactoring: IDL parser integration
	The new IDL parser has been integrated in the IDL and Java generators.

*) Refactoring: Added Logger Formater to ccmtools.utils

*) Refactoring: Changed Source Code Structure
	Moved all unit tests to a separate src-test directory and refactored the
	build.xml file.
	
*) Bugfix: Merged changes from RELEASE-0_7-BRANCH (0.7.5)
	- Namespace refactorings
	
*) Bugfix: Virtual destructors
	Added virtual destructors to MComponentDef and MHomeDef templates for
	to local C++ generator.



RELEASE-0_7-BRANCH
============================================================================

RELEASE-0.7.5 (October 30, 2006)
----------------------------------------------------------------------------
*) Bugfix: C++ include statements in headerfiles (reported by Carlo Jennetten)
	If we use different source directories for generated C++ header files which
	contain definitions in the same namespace, the generated '#include"*.h"'
	statements don't work.
	Now all include statements within C++ header files use absolute paths 
	(corresponding to the used namespaces).
    See test case CppRemoteGenerator/component_distributed.

*) Refactoring: C++ test cases
	Removed redundant try{} catch statements.

*) Bugfix: CodeGenerator reflection functionality
	Changed to Java 1.5 API to eliminate compiler warnings.


RELEASE-0.7.4 (October 23, 2006)
----------------------------------------------------------------------------
*) Refactoring: merged changes from 0.6.15

*) Bugfix: Added generation of Confix2.dir files (reported by Carlo Jennetten)
	- Confix.dir files should be generated only in directories created by the
		C++ generators. That behaviour is not the same as by using the ccmconfix 
		generator.
				

RELEASE-0.7.3 (October 16, 2006)
----------------------------------------------------------------------------
*) Refactoring: Change to Confix2
	Refactored all C++ test cases to support Confix2.
	
*) Refactoring: Changed namespace for a component's implementation classes
	- from world::ccm::local::component::Test to world::ccm::local	
	- from world::ccm::remote::component::Test to world::ccm::remote

*) Refactoring: Changed names of a component's implementation classes
	Now all classes have the same name as their source files, 
	e.g. Test_impl (instead of CCM_Test_impl)
	     Test_iface_impl (instead of iface_impl)
	     

RELEASE-0.7.2 (October 5, 2006)
----------------------------------------------------------------------------
*) Refactoring: Changed namespace WX::Utils to wx::utils

*) Refactoring: Changed namespace ccm::local::Components to Components::ccm::local 

*) Refactoring: Generation of Makefile.py files
	Removed the Makefile.py files generation from the C++ component generators, 
	thus, the ccmconfix generator will be used for that.
	e.g. ccmconfix -makefiles -o ${DEST_DIR} 
	Also, a Confix2 support is already integrated by using the -confix2 option 
	(instead of	the -makefiles option).

*) Bugfix: CCM model validator (ccmmodel -validator) 
	If no option (or a wrong option) is specified, the tool stops with a -1 result.
	Changed option name from -checker to -validator.
	Note that the CCM model validator is still experimental. 

*) Bugfix: merged changes from RELEASE-0_6_14
	- Bugfix: #include<vector> (reported by Carlo Jennetten)
	- Bugfixes: Interix (reported by Duft Markus)



RELEASE-0.7.1 (September 7, 2006)
----------------------------------------------------------------------------
*) Feature: Added LoginExample chapter to the CCM Tools manual.

*) Feature: Started implementation of a new IDL3 parser based on JFlex+Cup
	Implemented lexer and parser and some simple JUnit test cases.

*) Refactoring: Changed new start scripts to support Interix.

*) Refactoring: Redirected ccmtools idlx generator calls to ccmidl -idlx


RELEASE-0.7.0 (August 17, 2006)
----------------------------------------------------------------------------
*) Feature: New IDL Generators (IDL3, IDL3Mirror, IDL2)
	These new IDL generators (IDL3, IDL3Mirror, IDL2) use a separate implementation
	model and JET templates. From an existing CCM Model (established by the IDL3
	parser) a mapper class creates an IDL implementation model (defined by an
	IDL implementation metamodel). Using this more object oriented approach,
	together with the precompiled JET templates, the new generators are easier
	to maintain an much faster.
	To show the modularity of the ccmtools, we have introduced a separate start
	script 'ccmidl' with three generator options (-idl3 -idl3mirror, -idl2).

*) Feature: CCM Model Validator
	We have started to implement a CCM model checker which validates the CCM Model
	(created by the IDL3 Parser) against the IDL3 subset supported by the 
	CCM Tools.
	The CCM Tools user should be informed as soon as possible if the written
	IDL3 source files are valid for the CCM Tools code generators.
	We have introduced a new start script 'ccmmodel' with the '-check' option.
	
*) Bugfixes: We have merged all bugfixes made in RELEASE-0_6_6-BRANCH to the trunk.

*) Refactoring: Renamed Namespaces
	We have renamed the following namespaces within the CCM Tools source code:
	- from ccmtools.Demployment.* to ccmtools.deployment.*
	- from ccmtools.Metamodel.* to ccmtools.metamodel.*
	- from ccmtools.UI to ccmtools.ui
	- moved classes from ccmtools.xyz.ui to ccmtools.xyz namespace
	
*) Refactoring: Move source code towards Java 1.5
	We started to change the source code to support Java 1.5 features (and to 
	eliminate the compiler warnings).
	Until now, we have changed the following packages:
	- ccmtools.generator.confix
	- ccmtools.generator.idl
	- ccmtools.generator.java
	
*) Refactoring: Test Cases
	We have changed the test cases to support the new generators.
	
*) Refactoring: Removed 'out of date' Packages
	We have removed some source code relicts:
	- Python generator prototype
	- DbC generator prototype



BRANCH-0.6.x
============================================================================

RELEASE-0.6.15 (October 20, 2006)
----------------------------------------------------------------------------
*) Bugfix: ccmtools-idl script (reported by Duft Markus)
	Using Interix, all path strings should be wrapped by "".

*) Bugfix: Local C++ Generator (reported by Duft Markus)
	Using Interix, there is a problem with 'extern "C"' code that uses C++ 
	features like SmartPtr<>. So we better leave these 'extern "C"' declarations 
	for global deployment and create operations.


RELEASE-0.6.14 (September 11, 2006)
----------------------------------------------------------------------------
*) Bugfix: Local C++ Generator (reported by Carlo Jennetten)
	The CppLocalGenerator.getConfixInclude() method generates no #include<vector>
	statement for sequences of struct and sequences of string.

	
RELEASE-0.6.13 (August 30, 2006)
----------------------------------------------------------------------------
*) Bugfix: C++ and IDL generators
	Generated include paths use the Java File.separator character. 
	That does not work because the '/' separators are turned into '\'
	characters wich causes problems...
	(e.g. "world/europe/Color.idl" => worldeuropeColor.idl).
	

RELEASE-0.6.12 (August 29, 2006)
----------------------------------------------------------------------------
*) Bugfix: ccmtools/IDL3Parser/idl3.g (reported by Duft Markus)
	C preprocessor output lines (e.g. #line 12 "some/file.idl") generated
	from interix (using the Windows cl command) are not parsed correctly.
	
*) Bugfix: ccm/CCM_Local/HomeFinder.cc 	(reported by Duft Markus)
	A void method returns a result (ignored by gcc!!)

*) Bugfix: ccm/utils/measurement/Timer.cc (reported by Duft Markus)
	Some changes needed by interix.


RELEASE-0.6.11 (August 10, 2006)
----------------------------------------------------------------------------
*) Bugfix: ccmtools.UI.Main (reported by Duft Markus)
	The 'ccmtools.cpp' property is not used to determine the right C preprocessor 
	command (default 'cpp').
	
*) Bugfix: C preprocessor without -o option (reported by Duft Markus)
	Don't use the cpp's -o option, instead write the stdout stream in a file.
	So we can use C preprocessors which do not support such a -o option too.	
		
*) Bugfix: Startscripts (reported by Duft Markus)
	When used with Interix, some path variables can contain spaces and, thus, 
	must be quoted.
	

RELEASE-0.6.10 (July 12, 2006)
----------------------------------------------------------------------------
*) Bugfix: Local C++ Components
	Include statements in the interface/*.h files follow now the Confix
	rules (using "*.h" for local includes and <*/*/*/.h> for other includes).
	
*) Bugfix: Local Java Components
	Facet implementation classes must be defined in the same namespaces as
	the component (and the ProvidesDef model element), and also be generated
	in the right directory structure.
	
*) Refactoring: cpp-environment
   Added coco.in files to be able to build the (local and remote) cpp-environment
   also using CoCo.
    

RELEASE-0.6.9 (June 12, 2006)
----------------------------------------------------------------------------
*) Bugfix: Local C++ Components Any Plugin
	The c++local generator has to terminate if the given --anytypes=*.ccmany 
	file does not exist.
	
*) Bugfix: Local C++ Components Any Plugin
    The namespace for ccmDebug() methods that are related to any typedefs
    must be the same as defined by the MAliasDef model element.


RELEASE-0.6.8 (June 9, 2006)
----------------------------------------------------------------------------
*) Refactoring: Local C++ Components
	Any plugin structure refactored (better support for C structures as
	interface parameters)
	

RELEASE-0.6.7 (June 8, 2006)
----------------------------------------------------------------------------
*) Bugfix: Remote C++ Components
	CORBA Converters will be generated in the same namespaces as their
	IDL type definitions (*_remote.h Files).
	For each namespace a new directory will be created too.
	  
*) Bugfix: 	Remote C++ Components
	ccmDebug() methods will be generated in the same namespaces as their
	IDL type definitions.
	
*) Refactoring: CppRemoteGenerator
	Refactored namespace arithmetics.
		

RELEASE-0.6.6 (May 19, 2006)
----------------------------------------------------------------------------
*) Feature: Remote Java Components
	- Implemented minimal CCMSessionContainer 
	- Implemented ccmjava -remote generator to generate remote Java components.
	- Implemented test cases for remote Java components
	- Collected test cases for local, clientlib and remote components.
    Note: The current version of the remote Java generator does not support 
    parameter mappings for arrays, any types, interfaces, valuetypes and unions.
    
*) Feature: Local Java Components
	- Implemented support for local super components in Java.

*) Feature: Confix Generator bin/ccmconfix
    This generator can be used to generate all Makefile.py files in a given
    source tree. We use it for C++ and IDL soures which will be installed
    using Confix. 
    
*) Feature: bin/ccmns
	- Added simple start script for Java's CORBA NameService
	 
*) Refactoring: java-environment
	- Changed exception implementations (to be equal with the mapping of
	  local Java components)
	- Changed namespace ccm.local.Components to Components.ccm.local (to be
	  equal with the mapping of 	local Java components)
	- Changed implementation of the local and remote Cookie class.
	- Moved CCM.idl to $CCMTOOLS_HOME/idl/Components, thus, there is only one
	  Version of these IDL3 definitions (for both C++ and Java).
	  

RELEASE-0.6.5 (April 6, 2006)
----------------------------------------------------------------------------
*) Bugfix: Start scripts (ccmtools, uml2idl, ccmjava, ccmdescriptor) don't
	check for an existing JAVA_HOME environment variable.

*) Feature: Confix Generator
	We have implemented a simple Confix generator that can generate all of
	this Makefile.py stuff. Such a tool is helpful when installing a bunch 
	of generated IDL3 files.

*) Feature: Local Java Components
	- Support for nested components (an assembly factory can be deployed
	  with every local Java component home at deployment time).
	- Improved import statement generation
	- IDL -> Java mapping for local Java components
	  (enum, sequence, array, struct, exception, generic Holder<> class)
	- CorbaConverter between standard IDL mapping and local Java components
	  (enum, sequence, array, struct, exception) 	
	Note that for local Java components (-iface -local -app) we do not need
	to generate CORBA stubs, we use pure Java code.
		
*) Feature: AnyPlugin for Java component generator
	- first version to support local EntityContainer mapping

*) Refactoring: Changed execution order for Java generators
	Now, all kinds of generators will be called for a particular source file
	without to parse the source file again.
	
*) Refactoring: Collected all Java generators into a single ComponentGenerator
	class. Each generator type has become a single generate* method.
	Now, we can fine tune the generator's behavior using command line flags
	(e.g. -iface, -local, -app, -clientlib)


RELEASE-0.6.4 (March 9, 2006)
----------------------------------------------------------------------------
*) Bugfix: Missing #include <WX/Utils/value.h> in C++ struct header files.

*) Feature: Parameter mapping for local Java components
	- Implemented primitive Holder
	- Changed mapping of primitive types 

*) Refactoring: Java Local Component Tests
	- Implemented explicit test cases for dynamic provide and connect methods.
		

RELEASE-0.6.3 (March 6, 2006)
----------------------------------------------------------------------------
*) Feature: Local Java Component Generator
	- Implemented local Java component generator
	- Implemented JUnit test cases for local components (also using the
	  mirror component concept).
	
*) Refactoring: Java Client Lib Generator
	- Changed command line from 'ccmclient -java' to 'ccmjava -clientlib'.
	- Refactored generator namespace structure (to generator.java.*) 
	- Renamed lots of the Jet templates
	
*) Refactoring: c++local and c++remote 
	- Restructured JUnit tests (added test suites)	
	

RELEASE-0.6.2 (February 1, 2006)
----------------------------------------------------------------------------
*) Feature: Java Client Lib Generator
	- Implemented attribute support for interfaces and components (incl. test case)
	- Implemented single receptacle support (incl. test cases)
	
*) Bugfix: IDL3 generator 
    While the IDL3 parser only accepts absolute namespace declarations, the
    IDL3 generator also generates relative namespaces.
    As a workaround, I changed the IDL3 generator - IDL3 parser refactoring is needed!

*) Refactoring: java-environment
	Changed orbRunThread to be a deamon-thread that terminates at a regular
	program exit.
	   
*) Refactoring: ccmtools-idl script
 	Added -o option to define the output directory for the IDL compiler
 	(for Java IDL compiler only)
 	Renamed --java and --mico options to -java an -mico
 	e.g: ccmtools-idl -java -o ${DEST_DIR}/src-gen -I${CCM_INSTALL}/include -I${IDL2_DIR} ${IDL2_DIR}/*.idl
    Changed all test/JavaClientLib test cases.


RELEASE-0.6.1 (January 27, 2006)
----------------------------------------------------------------------------
*) Feature: Java Client Lib Generator
	- Implemented Constants support for interfaces (incl. test cases)
	- Implemented single receptacle support (incl. test cases)

*) Refactoring: java.clientlib.metamodel
	Refactored all classes which implement the Type interface.
	

RELEASE-0.6.0 (January 24, 2006)
----------------------------------------------------------------------------
*) Feature: Java Client Lib Generator
	- Implemented JavaClientLib Metamodel (implementation model) based on JET templates
	- Implemented CCM to JavaClientLib metamodel mapper
	- Implemented JavaClientLib generator.
	- Implemented bin/ccmclient
	- Implemented test/JavaClientLib/facet_module_simple
	- Implemented test/JavaClientLib/facet_module_types
	- Implemented test/JavaClientLib/facet_module_inheritance
	- Implemented test/JavaClientLib/facet_module_exception

*) Feature: Component Deployment Descriptor (CDD) generator 
	- Deployment metamodel library
	- Mapper Deployment model <=> XMI 2.1
	- A command line user interface for the Component Deployment Descriptor
   	  generator.
	- Component Deployment Descriptor (CDD) generator   	 

*) Bugfix: IDL2 file installation
	Added Confix command to generated Mapefile.py to install IDL2 files
	without namespace directories.
	
*) Bugfix: Bugzilla Bug 6699 uml2idl uses /bin/bash (should use /bin/sh)

*) Bugfix: IDL2 and IDL3 Generator
   Added namespace for inherited interface declarations.
   (see test/CppRemoteGenerator/facet_module_inheritance)
   
*) Bugfix: IDL3, IDL2, C++ local, remote Generator   
   Added support for primitive constants.
    	   
*) Bugfix: IDL3, IDL2 Generator
   Added support for CORBA::Object parameters.
    	   
*) Refactoring: Changed to Java 1.5 compiler (with 1.4 compliance)
   Removed some enum variables...

*) Refactoring: Changed code for local C++ interfaces and adapters adapters
   Added protected default constructor, private copy constructor and private
   assign operator.

*) Refactoring: IDL2 and C++ remote Generator
   Added code prittyfier support. 
    	   
    	   
    	   
RELEASE-0.5.x
============================================================================
	   
RELEASE-0.5.4 (RELEASE-0_5_4-BRANCH) December 21, 2005 
----------------------------------------------------------------------------
*) Bugfix: Namespaces in remote source code 
   Local namespaces within the remote component logic are wrong 
   for provided interfaces (the namespace of the MProvidesDef object is
   used instead of the interface namespace).

*) Bugfix: Interface constants
   Constants (of simple types like string) can't be used within IDL 
   interfaces.
   
*) Bugfix: Unknown type Object
	The IDL3 parset does not accept the IDL base Interface 'Object' as
	a parameter or result type.
	
*) Bugfix: Inheritance for remote Adapter
	The remote adapters don't support inheritance, thus, if we generate
	remote adapters for derived IDL interfaces, the methods and attributes	
	of the base interface are not supported.
		   
*) Refactoring:
   - Code prittyfier for idl2 source code 
   - Code prittyfier for c++remote source code 
   - Generate constants in C++ style (with L and UL suffix)


New release management!!!!
============================================================================
Now, the release number reflects the following schema:

              major.minor.bugfix 

e.g. RELEASE-0.5.4 only contains bugfixes compared to RELEASE-0.5.3, thus
*-preX and *-postX versions will not be distributed any longer.


RELEASE-0.5.3 (RELEASE-0_5_3-BRANCH)
============================================================================

RELEASE-0.5.3-pre3
----------------------------------------------------------------------------
*) bugifx: local adapter for derived interfaces (facets and receptacles)
*) use local interface adapters for a supported interface's component logic.
*) added HomeFinder::destroy() methode to destroy the singleton object.
*) added ccmtools.CppGenerator.plugin package to allow any mapping plugins
   (experimental).
*) refactored local test cases
*) changed namespace structure from
   CCM_Local::world::europe::austria::CCM_SessionTest to
   world::europe::austria::ccm::local::component::Test for remote C++ generators
*) changed tutorial to show the new namespace structure
*) refactored remote test cases
*) added ccmtools.CodeGenerator.TemplateLoader class to implement a chaching 
   mechanism for ccmtools templages loaded from the file system. 
*) added ccmtools.utils.Timer class for performance measurements


RELEASE-0.5.3-pre2
----------------------------------------------------------------------------
*) generate a local adapter for every interface (parallel to the interface
   directory) and reuse these adapters in the component logic.
*) changed namespace structure from
   CCM_Local::world::europe::austria::CCM_SessionTest to
   world::europe::austria::ccm::local::component::Test for local C++ generators  
*) added etc/ccmtools.properties ccmtools.dir.gen to set a prefix for 
   generated directories   
*) added namespace to generated impl/*_entry.h filenames
   

RELEASE-0.5.3-pre1
----------------------------------------------------------------------------
*) generate ccmDebug() for interface types
*) generated local types include headerfiles from used types (string, vector, 
   value, etc.) on demant from %(LanguageTypeInclude)s tag.
*) generated local exceptions inherit now from LocalComponent::Exception
*) removed PMM hack from local generator
*) added --noexit command line parameter (by default, the Java VM exits with -1 
   after an ccmtools error)
*) added etc/ccmtools.properties to set the impl directory's name


RELEASE-0.5.2 (RELEASE-0_5_2-BRANCH)
============================================================================

RELEASE-0.5.2-pre2
----------------------------------------------------------------------------
*) CppLocalGenerator refactoring 
*) CppRemoteGenerator refactoring
*) uml2idl only accepts XMI1.1 files or prints an errer message
*) generate ccmDebug() methods for local adapters 
*) generate ccmDebug() methods for remote adapters
*) replaced ccmtools.CppGenerator.SourceConstants with Text.* constants 

RELEASE-0.5.2-pre1
----------------------------------------------------------------------------
*) removed cpp-environment/wx
*) moved cpp-environment/wx/measurement to cpp-environment/ccm/utils/measurement
*) removed bin/ccmtools-generate 
*) added etc/logging.properties file to support Java's logging API
*) moved ccmtools.UI.ConsoleCodeGenerator to ccmtools.UI.Main
*) refactored UI.Main (removed all System.exit() and added some String Constants)
*) bugfix: CppRemoteGeneratorImpl.java converter for remote exception
*) changed local component logic logging (from DEBUGNL("...") to LDEBUGNL(CCM_LOCAL,"..."))
*) implemented cpp-environment/ccm/CCM_Local/utils/Debug.h that contains
   ccmDebug() functions for C++ primitive types.
*) generate ccmDebug() functions for generated local types
*) generate LDEBUGNL(CCM_LOCAL,"...")) messages for parameter (IN, INOUT, OUT, 
   result) logging in facet and supported interface adapters.



RELEASE-0.5.1 (RELEASE-0_5_1-BRANCH)
============================================================================

RELEASE-0.5.1-pre6
----------------------------------------------------------------------------
*) renamed the temporary idl File from _CCM_*.idl to _CCM_* 
*) implemented C++ remote undeploy_*() function

*) added JacORB benchmark client	
*) added test/prototypes/mico/persistent_object


RELEASE-0.5.1-pre5
----------------------------------------------------------------------------
*) removed CORBA_Stubs namespace from generated IDL2 and remote C++ files

*) bugfix: *_entry.h files in impl/ must be overwritten by every generator 
   call because they are part of the component logic.


RELEASE-0.5.1-pre4
----------------------------------------------------------------------------
*) changed ccmtools/bin from Python scripts to Shell scripts
     - ccmtools-generate is already implemented in Python 
     - ccmtools is the Shell script version of ccmtools-generate 
     - uml2idl has been implemented as a Shell script
     - ccmtools-idl is already implemented in Python
     
*) added Constants.Version string to all generated C++ source files.     

*) changed all test cases to handle confix version > pre34
   (A Makefile.py with package-name and -version has been added)
    
*) added interface adapter classes that delegates to and from CORBA stubs.
   These interface adapter classes are used by the remote component logic and 
   replaces existing facet and receptacle adapters.
   
*) added #ifdef HAVE_MICO conditions into all generated remote source files
   (cpp-environment/CCM_Remote and files generated from c++remote)   
   
*) added support of receptacle attributes
