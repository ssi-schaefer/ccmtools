/* DTD code generator
 *
 * 2003, 2004 by Robert Lechner (rlechner@gmx.at)
 *
 * $Id$
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package dtd2java;

import java.util.Vector;
import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.io.IOException;


/**
 * The DTD code generator.
 * Creates a Java-package with XML-parser and a (simple) model.
 * It also creates dot-files (see http://www.graphviz.org).
 *
 * @author Robert Lechner (rlechner@gmx.at)
 * @version $Date$
 */
public class DtdGenerator
{
    // the destination Java-package
    private String javaPackage_;

    // the DTD parse tree
    private DtdFile parseTree_;

    // the directory of {@link #javaPackage_}
    private File baseDirectory_;

    // the Java-classes
    private ClassTable classes_;

    // root directory
    private String rootDirectory_;

    // the CVS token or null
    private String cvsToken_;


    /**
     * GPL text.
     */
    static final String GPL_TEXT =
    "This library is free software; you can redistribute it and/or modify it under\n"+
    "the terms of the GNU Lesser General Public License as published by the Free\n"+
    "Software Foundation; either version 2.1 of the License, or (at your option)\n"+
    "any later version.\n\n"+
    "This library is distributed in the hope that it will be useful, but WITHOUT\n"+
    "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n"+
    "FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more\n"+
    "details.\n\n"+
    "You should have received a copy of the GNU Lesser General Public License\n"+
    "along with this library; if not, write to the Free Software Foundation, Inc.,\n"+
    "59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n";


    /**
     * Main file header.
     */
    static final String MAIN_HEADER =
    "/*\n\n"+
    "This file was automatically generated by 'dtd2java'.\n"+
    "'dtd2java' is part of the \"CCM tools\" project (http://ccmtools.sf.net).\n\n"+
    "DO NOT EDIT!\n\n\n"+
    GPL_TEXT+
    "\n*/\n\n\n";


    /**
     * Creates a Java-package with XML-parser and a (simple) model.
     *
     * @param dtd  the DTD parse tree
     * @param javaPackage  the Java-name of the destination package
     * @param rootDirectory  root directory
     * @param cvsToken a CVS token or null; the token will be part of the file header
     */
	public void run( DtdFile dtd, String javaPackage, String rootDirectory, String cvsToken ) throws IOException
	{
	    javaPackage_ = javaPackage;
	    parseTree_ = dtd;
        rootDirectory_ = rootDirectory;
        cvsToken_ = cvsToken;
	    createPackage();
	    classes_ = new ClassTable();
	    Vector roots = dtd.getRootNames();
	    int index, size=roots.size();
	    for( index=0; index<size; index++ )
	    {
	        String name = (String)roots.get(index);
            System.out.println("root element: "+name);
            DtdClass c = createClass(name);
            c.setRoot();
	    }
	    FileWriter dot = new FileWriter(new File(baseDirectory_, javaPackage+".dot"));
	    dot.write(MAIN_HEADER);
	    dot.write("/*  dot-file (see http://www.graphviz.org)\n\n    full parse tree\n*/\n");
	    dot.write("digraph G {\n");
	    FileWriter w = new FileWriter(new File(baseDirectory_,"DTD_Creator.java"));
	    w.write(MAIN_HEADER);
        writeCvsToken(w);
        w.write("package "+javaPackage_+";\n\n"+
                "import org.xml.sax.Attributes;\n\n"+
                "/** A factory for all XML-elements. */\n"+
                "public class DTD_Creator\n{\n"+
                "  /** only used in {@link DTD_SAX_Handler#startElement} */\n"+
                "  public DTD_Container create( String qName, Attributes attrs )\n"+
                "  {\n");
        size = classes_.size();
        for( index=0; index<size; index++ )
        {
            DtdClass c = classes_.value(index);
            w.write( c.createCode(javaPackage_, this) );
            dot.write( c.getDotCode() );
        }
        w.write("    return new DTD_Generic(qName, attrs);\n"+
                "  }\n"+
                "}\n");
        w.close();
        dot.write("}\n");
        dot.close();
        //
        size=roots.size();
        for( index=0; index<size; index++ )
        {
	        String name = (String)roots.get(index);
            DtdClass c = createClass(name);
            c.initDotData();
            dot = new FileWriter(new File(baseDirectory_, c.getJavaName()+".dot"));
            dot.write(MAIN_HEADER);
    	    dot.write("/*  dot-file (see http://www.graphviz.org)\n\n    element: "+name+"\n*/\n");
    	    dot.write("digraph G {\n");
            dot.write( c.getDotCode2() );
            dot.write("}\n");
            dot.close();
        }
	}


    void writeCvsToken( Writer w ) throws IOException
    {
        if( cvsToken_!=null )
        {
            w.write("/*\n");
            w.write(cvsToken_);
            w.write("\n*/\n\n");
        }
    }


    // creates the destination directory and all helper classes
	private void createPackage() throws IOException
	{
	    System.out.println("creating package: "+javaPackage_);
        String dirName = javaPackage_.replace('.', File.separatorChar);
        baseDirectory_ = new File(rootDirectory_, dirName);
        if( !baseDirectory_.isDirectory() )
        {
            baseDirectory_.mkdirs();
        }
        parseTree_.write(new File(baseDirectory_,"grammar.dtd"));
        //
        /*  DTD_Container.java
        */
        FileWriter w1 = new FileWriter(new File(baseDirectory_,"DTD_Container.java"));
        w1.write(MAIN_HEADER);
        writeCvsToken(w1);
        w1.write("package "+javaPackage_+";\n\n"+
                 "import java.util.Vector;\n\n"+
                 "/** Base class for all XML-Elements. */\n"+
                 "public abstract class DTD_Container\n{\n"+
                 "  /** the parent (or null) */\n"+
                 "  public DTD_Container parent__;\n\n"+
                 "  /** contains all children */\n"+
                 "  protected Vector content__ = new Vector();\n\n"+
                 "  /** returns the number of children */\n"+
                 "  public int size()\n"+
                 "  {return content__.size();}\n\n"+
                 "  /** returns a child */\n"+
                 "  public Object get(int index) throws ArrayIndexOutOfBoundsException\n"+
                 "  {return content__.get(index);}\n\n"+
                 "  /** adds a new child */\n"+
                 "  public void add(Object child)\n"+
                 "  {\n"+
                 "    content__.add(child);\n"+
                 "    if(child instanceof DTD_Container) {\n"+
                 "      ((DTD_Container)child).parent__ = this;\n"+
                 "    }\n"+
                 "  }\n\n"+
                 "  /** returns all children */\n"+
                 "  public java.util.Collection content()\n"+
                 "  {\n"+
                 "    return content__;\n"+
                 "  }\n\n"+
                 "  /** returns the XML-name of this element */\n"+
                 "  abstract public String xmlName();\n\n"+
                 "  /** returns the XML-code of this element (including all attributes and children) */\n"+
                 "  abstract public String xmlCode();\n\n"+
                 "  /** helper function for 'xmlCode' */\n"+
                 "  protected String makeContent()\n"+
                 "  {\n"+
                 "    StringBuffer code = new StringBuffer();\n"+
                 "    int s = content__.size();\n"+
                 "    for(int i=0; i<s; i++) {\n"+
                 "      Object o = content__.get(i);\n"+
                 "      if(o instanceof DTD_Container) {\n"+
                 "        code.append( ((DTD_Container)o).xmlCode() );\n"+
                 "      } else {\n"+
                 "        code.append(o.toString());\n"+
                 "      }\n"+
                 "    }\n"+
                 "    return code.toString();\n"+
                 "  }\n\n"+
                 "  /** creates a XML-string */\n"+
                 "  public static String makeString( String text )\n"+
                 "  {\n"+
                 "    if( text.indexOf(\"'\")<0 )  return \"'\"+text+\"'\";\n"+
                 "    return \"\\\"\"+text+\"\\\"\";\n"+
                 "  }\n\n"+
                 "  /** finds children */\n"+
                 "  public Vector findChildren( String xml_name )\n"+
                 "  {\n"+
                 "    Vector result = new Vector();\n"+
                 "    int s = content__.size();\n"+
                 "    for(int i=0; i<s; i++) {\n"+
                 "      Object o = content__.get(i);\n"+
                 "      if(o instanceof DTD_Container) {\n"+
                 "        if( ((DTD_Container)o).xmlName().equals(xml_name) ) {\n"+
                 "          result.add(o);\n"+
                 "        }\n"+
                 "      }\n"+
                 "    }\n"+
                 "    return result;\n"+
                 "  }\n\n"+
                 "  /** Writes the XML code to a file. */\n"+
                 "  public void write( java.io.File xmlFile )\n"+
                 "  throws java.io.IOException\n"+
                 "  {\n"+
                 "    java.io.FileWriter w = new java.io.FileWriter(xmlFile);\n"+
                 "    w.write(\"<?xml version='1.0' ?>\\n\");\n"+
                 "    w.write(xmlCode());\n"+
                 "    w.close();\n"+
                 "  }\n"+
                 "}\n");
        w1.close();
        //
        /*  DTD_Root.java
        */
        FileWriter w2 = new FileWriter(new File(baseDirectory_,"DTD_Root.java"));
        w2.write(MAIN_HEADER);
        writeCvsToken(w2);
        w2.write("package "+javaPackage_+";\n\n"+
                 "import java.util.zip.ZipFile;\n"+
                 "import java.util.zip.ZipEntry;\n"+
                 "import javax.xml.parsers.SAXParserFactory;\n"+
                 "import javax.xml.parsers.SAXParser;\n\n"+
                 "/** Base class for all root elements. */\n"+
                 "public abstract class DTD_Root extends DTD_Container\n{\n"+
                 "  /** Parses a XML-file and returns the root element. */\n"+
                 "  public static DTD_Container parse( java.io.File xmlFile )\n"+
                 "  throws org.xml.sax.SAXException, java.io.IOException,\n"+
                 "    javax.xml.parsers.ParserConfigurationException\n"+
                 "  {\n"+
                 "    return parse(xmlFile, new DTD_Creator());\n"+
                 "  }\n\n"+
                 "  /** Parses a XML-file using a special factory. */\n"+
                 "  public static DTD_Container parse( java.io.File xmlFile, DTD_Creator creator )\n"+
                 "  throws org.xml.sax.SAXException, java.io.IOException,\n"+
                 "    javax.xml.parsers.ParserConfigurationException\n"+
                 "  {\n"+
                 "    DTD_SAX_Handler handler = new DTD_SAX_Handler(creator);\n"+
                 "    SAXParserFactory factory = SAXParserFactory.newInstance();\n"+
                 "    SAXParser saxParser = factory.newSAXParser();\n"+
                 "    String xmlName = xmlFile.getName();\n"+
                 "    if( xmlName.endsWith(\".zip\") || xmlName.endsWith(\".ZIP\") ) {\n"+
                        // ZIP
                 "      xmlName = xmlName.substring(0, xmlName.length()-4);\n"+
                 "      ZipFile zf = new ZipFile(xmlFile);\n"+
                 "      ZipEntry entry = zf.getEntry(xmlName);\n"+
                 "      if( entry==null ) {\n"+
                 "        entry = zf.getEntry(xmlName+\".xml\");\n"+
                 "        if( entry==null ) {\n"+
                 "          throw new java.io.IOException(\n"+
                 "            \"cannot find Zip-entry '\"+xmlName+\"' or '\"+xmlName+\".xml'\" );\n"+
                 "        }\n"+
                 "      }\n"+
                 "      saxParser.parse(zf.getInputStream(entry), handler);\n"+
                 "    } else if( xmlName.endsWith(\".zuml\") ) {\n"+
                        // Poseidon
                 "      xmlName = xmlName.substring(0, xmlName.length()-5)+\".xmi\";\n"+
                 "      ZipFile zf = new ZipFile(xmlFile);\n"+
                 "      ZipEntry entry = zf.getEntry(xmlName);\n"+
                 "      if( entry==null ) {\n"+
                 "        throw new java.io.IOException(\n"+
                 "          \"cannot find entry \"+xmlName+\" in Poseidon file\" );\n"+
                 "      }\n"+
                 "      saxParser.parse(zf.getInputStream(entry), handler);\n"+
                 "    } else {\n"+
                 "      saxParser.parse(xmlFile, handler);\n"+
                 "    }\n"+
                 "    return handler.parseTree_;\n"+
                 "  }\n"+
                 "}\n");
        w2.close();
        //
        /*  DTD_SAX_Handler.java
        */
        FileWriter w3 = new FileWriter(new File(baseDirectory_,"DTD_SAX_Handler.java"));
        w3.write(MAIN_HEADER);
        writeCvsToken(w3);
        w3.write("package "+javaPackage_+";\n\n"+
                 "import org.xml.sax.Attributes;\n"+
                 "import org.xml.sax.SAXException;\n"+
                 "import java.util.Stack;\n\n"+
                 "/** Creates the parse tree of the XML-file. */\n"+
                 "public class DTD_SAX_Handler extends org.xml.sax.helpers.DefaultHandler\n{\n"+
                 "  private DTD_Creator creator_;\n"+
                 "  private DTD_Container currentElement_;\n"+
                 "  private Stack previousElements_;\n"+
                 "  private String currentText_;\n\n"+
                 "  /** the parse tree of the XML-file */\n"+
                 "  DTD_Container parseTree_;\n\n"+
                 "  DTD_SAX_Handler( DTD_Creator creator )\n"+
                 "  {\n"+
                 "    super();\n"+
                 "    creator_ = creator;\n"+
                 "  }\n\n"+
                 "  public void startDocument() throws SAXException\n"+
                 "  {\n"+
                 "    previousElements_ = new Stack();\n"+
                 "    parseTree_ = currentElement_ = null;\n"+
                 "  }\n\n"+
                 "  public void endDocument() throws SAXException\n"+
                 "  {\n"+
                 "    if(!previousElements_.empty())  System.err.println(\"stack is not empty\");\n"+
                 "  }\n\n"+
                 "  public void startElement( String _n, String _l, String qName, Attributes attrs ) throws SAXException\n"+
                 "  {\n"+
                 "    if(parseTree_==null) {\n"+
                 "      parseTree_ = currentElement_ = creator_.create(qName, attrs);\n"+
                 "      currentText_ = null;\n"+
                 "    } else {\n"+
                 "      updateText();\n"+
                 "      previousElements_.push(currentElement_);\n"+
                 "      currentElement_ = creator_.create(qName, attrs);\n"+
                 "    }\n"+
                 "  }\n\n"+
                 "  public void endElement( String _n, String _s, String qName ) throws SAXException\n"+
                 "  {\n"+
                 "    updateText();\n"+
                 "    if(!previousElements_.empty()) {\n"+
                 "      DTD_Container result = currentElement_;\n"+
                 "      currentElement_ = (DTD_Container)previousElements_.pop();\n"+
                 "      currentElement_.add(result);\n"+
                 "    }\n"+
                 "  }\n\n"+
                 "  private void updateText()\n"+
                 "  {\n"+
                 "    if( currentText_!=null ) {\n"+
                 "      currentText_ = currentText_.trim();\n"+
                 "      if( currentText_.length()>0 ) {\n"+
                 "        currentElement_.add(currentText_);\n"+
                 "      }\n"+
                 "      currentText_ = null;\n"+
                 "    }\n"+
                 "  }\n\n"+
                 "  public void characters( char buf[], int offset, int len ) throws SAXException\n"+
                 "  {\n"+
                 "    String str = new String(buf, offset, len);\n"+
                 "    if( currentText_==null ) {\n"+
                 "      currentText_ = str;\n"+
                 "    } else {\n"+
                 "      currentText_ = currentText_+str;\n"+
                 "    }\n"+
                 "  }\n\n"+
                 "}\n");
        w3.close();
        //
        /*  DTD_Main.java
        */
        FileWriter w4 = new FileWriter(new File(baseDirectory_,"DTD_Main.java"));
        w4.write(MAIN_HEADER);
        writeCvsToken(w4);
        w4.write("package "+javaPackage_+";\n\n"+
                 "/** Tests the XML-parser. */\n"+
                 "public class DTD_Main\n"+
                 "{\n"+
                 "  /** argv[0] is the name of a XML-file */\n"+
                 "  public static void main( String[] argv )\n"+
                 "  {\n"+
                 "    try {\n"+
                 "      if(argv.length!=1) {\n"+
                 "        System.out.println(\"missing parameter: 'XML_filename'\\n\");\n"+
                 "        System.out.println(\"usage:  java "+javaPackage_+".DTD_Main XML_filename\");\n"+
                 "        System.exit(1);\n"+
                 "      }\n"+
                 "      System.out.println(\"input: \"+argv[0]);\n"+
                 "      DTD_Container root = DTD_Root.parse(new java.io.File(argv[0]));\n"+
                 "      System.out.println(\"output: OUT.\"+argv[0]);\n"+
                 "      java.io.FileWriter w = new java.io.FileWriter(\"OUT.\"+argv[0]);\n"+
                 "      w.write(\"<?xml version='1.0' ?>\\n\");\n"+
                 "      w.write(root.xmlCode());\n"+
                 "      w.close();\n"+
                 "    } catch( Exception e ) {\n"+
                 "      e.printStackTrace();\n"+
                 "    }\n"+
                 "  }\n"+
                 "}\n");
        w4.close();
        //
        /*  DTD_Generic.java
        */
        FileWriter w5 = new FileWriter(new File(baseDirectory_,"DTD_Generic.java"));
        w5.write(MAIN_HEADER);
        writeCvsToken(w5);
        w5.write("package "+javaPackage_+";\n\n"+
                 "import java.util.Vector;\n"+
                 "import org.xml.sax.Attributes;\n\n"+
                 "/** Stores the attributes and children of any unknown XML-element. */\n"+
                 "public class DTD_Generic extends DTD_Container\n"+
                 "{\n"+
                 "  /** the XML-name of this element */\n"+
                 "  protected String dtdName_;\n\n"+
                 "  /** the XML-name of the attributes */\n"+
                 "  protected Vector attributeNames_ = new Vector();\n\n"+
                 "  /** the attribute values */\n"+
                 "  protected Vector attributeValues_ = new Vector();\n\n"+
                 "  public DTD_Generic( String qName, Attributes attrs )\n"+
                 "  {\n"+
                 "    dtdName_ = qName;\n"+
                 "    int length = attrs.getLength();\n"+
                 "    for( int index=0; index<length; index++ ) {\n"+
                 "      attributeNames_.add(attrs.getQName(index));\n"+
                 "      attributeValues_.add(attrs.getValue(index));\n"+
                 "    }\n"+
                 "  }\n\n"+
                 "  public String xmlName()\n"+
                 "  {return dtdName_;}\n\n"+
                 "  public String xmlCode()\n"+
                 "  {\n"+
                 "    String code = \"<!-- generic: --><\"+dtdName_;\n"+
                 "    for(int i=0; i<attributeNames_.size(); i++) {\n"+
                 "      code += \" \"+((String)attributeNames_.get(i))+\"=\";\n"+
                 "      code += makeString((String)attributeValues_.get(i));\n"+
                 "    }\n"+
                 "    code += \" >\";\n"+
                 "    code += makeContent();\n"+
                 "    code += \"</\"+dtdName_+\">\\n\";\n"+
                 "    return code;\n"+
                 "  }\n\n"+
                 "}\n");
        w5.close();
        //
        /*  package.html
        */
        FileWriter w6 = new FileWriter(new File(baseDirectory_,"package.html"));
        writeCvsToken(w6);
        w6.write("<body>\n"+
                 "This package was automatically generated by <b><tt>dtd2java</tt></b>.<br>\n"+
                 "<b><tt>dtd2java</tt></b> is part of the "+
                 "<a href=\"http://ccmtools.sf.net\">CCM tools</a>"+
                 " project.<p>\n"+
                 "<pre>\n"+
                 GPL_TEXT+
                 "</pre>\n"+
                 "</body>\n");
        w6.close();
	}


    /**
     * Returns the Java-class of a DTD-element.
     */
	DtdClass createClass( String eName )
	{
        if( eName.equals(DtdClass.PCDATA) )
        {
            return DtdClass.FAKE_PCDATA;
        }
        if( eName.equals(DtdClass.EMPTY) )
        {
            return DtdClass.FAKE_EMPTY;
        }
        if( eName.equals(DtdClass.ANY) )
        {
            return DtdClass.FAKE_ANY;
        }
        DtdClass theClass = classes_.get(eName);
        if( theClass!=null )
        {
            return theClass;
        }
        DtdElement element = parseTree_.getElementByName(eName);
        if( element==null )
        {
            // this should never happen
            System.err.println("cannot find element  "+eName);
            return null;
        }
        DtdAttributes attributes = parseTree_.getAttributeList(eName);
        theClass = new DtdClass(eName, javaPackage_, element, attributes, rootDirectory_);
        classes_.put(eName, theClass); // before 'theClass.parseContent' to avoid endless loops
        theClass.parseContent(element.getContent(), this);
        return theClass;
	}
}
